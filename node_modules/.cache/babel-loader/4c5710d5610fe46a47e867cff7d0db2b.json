{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\"; // this component is simple enough that tests would be purely tautological.\n\n/* istanbul ignore next */\n\nvar TextArea =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TextArea, _super);\n\n  function TextArea() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {};\n\n    _this.handleChange = function (e) {\n      if (_this.props.growVertically) {\n        _this.setState({\n          height: e.target.scrollHeight\n        });\n      }\n\n      if (_this.props.onChange != null) {\n        _this.props.onChange(e);\n      }\n    }; // hold an internal ref for growVertically\n\n\n    _this.handleInternalRef = function (ref) {\n      _this.internalTextAreaRef = ref;\n\n      if (_this.props.inputRef != null) {\n        _this.props.inputRef(ref);\n      }\n    };\n\n    return _this;\n  }\n\n  TextArea.prototype.componentDidMount = function () {\n    if (this.props.growVertically) {\n      this.setState({\n        height: this.internalTextAreaRef.scrollHeight\n      });\n    }\n  };\n\n  TextArea.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        className = _b.className,\n        fill = _b.fill,\n        inputRef = _b.inputRef,\n        intent = _b.intent,\n        large = _b.large,\n        small = _b.small,\n        growVertically = _b.growVertically,\n        htmlProps = tslib_1.__rest(_b, [\"className\", \"fill\", \"inputRef\", \"intent\", \"large\", \"small\", \"growVertically\"]);\n\n    var rootClasses = classNames(Classes.INPUT, Classes.intentClass(intent), (_a = {}, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a[Classes.SMALL] = small, _a), className); // add explicit height style while preserving user-supplied styles if they exist\n\n    var _c = htmlProps.style,\n        style = _c === void 0 ? {} : _c;\n\n    if (growVertically && this.state.height != null) {\n      // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n      // so we make a new one to add a property\n      style = tslib_1.__assign({}, style, {\n        height: this.state.height + \"px\"\n      });\n    }\n\n    return React.createElement(\"textarea\", tslib_1.__assign({}, htmlProps, {\n      className: rootClasses,\n      onChange: this.handleChange,\n      ref: this.handleInternalRef,\n      style: style\n    }));\n  };\n\n  TextArea.displayName = DISPLAYNAME_PREFIX + \".TextArea\";\n  return TextArea;\n}(React.PureComponent);\n\nexport { TextArea };","map":null,"metadata":{},"sourceType":"module"}