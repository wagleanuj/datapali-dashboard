{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Divider, HTMLSelect, Icon, Utils } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as Classes from \"./common/classes\";\nimport { clone } from \"./common/dateUtils\";\nimport { measureTextWidth } from \"./common/utils\";\n\nvar DatePickerCaption =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DatePickerCaption, _super);\n\n  function DatePickerCaption() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      monthRightOffset: 0\n    };\n    _this.handleMonthSelectChange = _this.dateChangeHandler(function (d, month) {\n      return d.setMonth(month);\n    }, _this.props.onMonthChange);\n    _this.handleYearSelectChange = _this.dateChangeHandler(function (d, year) {\n      return d.setFullYear(year);\n    }, _this.props.onYearChange);\n    return _this;\n  }\n\n  DatePickerCaption.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        date = _a.date,\n        locale = _a.locale,\n        localeUtils = _a.localeUtils,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        _b = _a.months,\n        months = _b === void 0 ? localeUtils.getMonths(locale) : _b;\n    var minYear = minDate.getFullYear();\n    var maxYear = maxDate.getFullYear();\n    var displayMonth = date.getMonth();\n    var displayYear = date.getFullYear(); // build the list of available months, limiting based on minDate and maxDate as necessary\n\n    var startMonth = displayYear === minYear ? minDate.getMonth() : 0;\n    var endMonth = displayYear === maxYear ? maxDate.getMonth() + 1 : undefined;\n    var monthOptionElements = months.map(function (month, i) {\n      return {\n        label: month,\n        value: i\n      };\n    }).slice(startMonth, endMonth);\n    var years = [minYear];\n\n    for (var year = minYear + 1; year <= maxYear; ++year) {\n      years.push(year);\n    } // allow out-of-bounds years but disable the option. this handles the Dec 2016 case in #391.\n\n\n    if (displayYear > maxYear) {\n      years.push({\n        value: displayYear,\n        disabled: true\n      });\n    }\n\n    this.displayedMonthText = months[displayMonth];\n    var monthSelect = React.createElement(HTMLSelect, {\n      iconProps: {\n        style: {\n          right: this.state.monthRightOffset\n        }\n      },\n      className: Classes.DATEPICKER_MONTH_SELECT,\n      key: \"month\",\n      minimal: true,\n      onChange: this.handleMonthSelectChange,\n      value: displayMonth,\n      options: monthOptionElements\n    });\n    var yearSelect = React.createElement(HTMLSelect, {\n      className: Classes.DATEPICKER_YEAR_SELECT,\n      key: \"year\",\n      minimal: true,\n      onChange: this.handleYearSelectChange,\n      value: displayYear,\n      options: years\n    });\n    var orderedSelects = this.props.reverseMonthAndYearMenus ? [yearSelect, monthSelect] : [monthSelect, yearSelect];\n    return React.createElement(\"div\", {\n      className: this.props.classNames.caption\n    }, React.createElement(\"div\", {\n      className: Classes.DATEPICKER_CAPTION,\n      ref: function (ref) {\n        return _this.containerElement = ref;\n      }\n    }, orderedSelects), React.createElement(Divider, null));\n  };\n\n  DatePickerCaption.prototype.componentDidMount = function () {\n    var _this = this;\n\n    requestAnimationFrame(function () {\n      return _this.positionArrows();\n    });\n  };\n\n  DatePickerCaption.prototype.componentDidUpdate = function () {\n    this.positionArrows();\n  };\n\n  DatePickerCaption.prototype.positionArrows = function () {\n    // measure width of text as rendered inside our container element.\n    var monthTextWidth = measureTextWidth(this.displayedMonthText, Classes.DATEPICKER_CAPTION_MEASURE, this.containerElement);\n    var monthSelectWidth = this.containerElement == null ? 0 : this.containerElement.firstElementChild.clientWidth;\n    var rightOffset = Math.max(2, monthSelectWidth - monthTextWidth - Icon.SIZE_STANDARD - 2);\n    this.setState({\n      monthRightOffset: rightOffset\n    });\n  };\n\n  DatePickerCaption.prototype.dateChangeHandler = function (updater, handler) {\n    var _this = this;\n\n    return function (e) {\n      var value = parseInt(e.target.value, 10);\n      var newDate = clone(_this.props.date);\n      updater(newDate, value);\n      Utils.safeInvoke(_this.props.onDateChange, newDate);\n      Utils.safeInvoke(handler, value);\n    };\n  };\n\n  return DatePickerCaption;\n}(React.PureComponent);\n\nexport { DatePickerCaption };","map":null,"metadata":{},"sourceType":"module"}