{"ast":null,"code":"import _defineProperty from \"/Users/anujwagle/Desktop/temp/datapali-dashboard/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/DPFormItem.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Form } from 'formik';\nimport { faKey } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as _ from \"lodash\";\nimport { Button, Card, CardHeader, CardBody, FormGroup } from \"reactstrap\";\nimport { QACondition } from \"../form/condition\";\nimport { QAComparisonOperator, QAType } from \"../form/answer\";\nimport { QAQuestion } from \"../form/question\";\nimport { QAAddOptions as AddOption } from \"./AddOptions\";\nimport { AnswerOptions } from \"./AnswerOptions\";\nimport Modal from \"react-modal\";\nimport { openModal, destroyModal } from \"../utils/util\";\nimport { AutofillCondition } from \"./AutofillCondition\";\nimport { CreateConditionModal } from \"./CreateConditionModal\";\nimport { ANSWER_TYPES, AnswerTypeInput } from \"./AnswerType\";\nimport { Switch } from \"@blueprintjs/core\";\nlet root = document.getElementById(\"root\") || document.body;\nModal.setAppElement(root);\nexport function getOperatorForType(valueType) {\n  let allOperators = Object.values(QAComparisonOperator);\n  let type = valueType && valueType.name;\n\n  switch (type) {\n    case ANSWER_TYPES.BOOLEAN:\n    case ANSWER_TYPES.DATE:\n    case ANSWER_TYPES.STRING:\n    case ANSWER_TYPES.TIME:\n      return allOperators.filter(item => item === QAComparisonOperator.Equal);\n\n    case ANSWER_TYPES.NUMBER:\n    default:\n      return allOperators;\n  }\n}\nexport const customStyles = {\n  container: (base, state) => _objectSpread({}, base, {\n    border: state.isFocused ? null : null,\n    background: \"transparent\",\n    transition: \"border-color 0.2s ease, box-shadow 0.2s ease, padding 0.2s ease\",\n    \"&:hover\": {\n      boxShadow: \"0 2px 4px 0 rgba(41, 56, 78, 0.1)\"\n    }\n  }),\n  control: (base, state) => _objectSpread({}, base, {\n    background: \"transparent\",\n    borderColor: state.isFocused ? brandColor : base.borderColor,\n    '&:hover': {\n      borderColor: state.isFocused ? brandColor : base.borderColor\n    }\n  }),\n  valueContainer: (base, state) => _objectSpread({}, base, {\n    background: \"transparent\",\n    color: \"white\"\n  }),\n  menu: (base, state) => _objectSpread({}, base, {\n    background: \"black\",\n    borderColor: \"#e14eca\",\n    zIndex: \"999999999999999999 !important\"\n  }),\n  menuList: (base, state) => {\n    console.log(state);\n    return _objectSpread({}, base, {\n      background: \"#525f7f\",\n      color: \"white\"\n    });\n  },\n  singleValue: (base, state) => _objectSpread({}, base, {\n    color: \"white\"\n  }),\n  input: (base, state) => _objectSpread({}, base, {\n    color: \"white\"\n  }),\n  option: (base, state) => _objectSpread({}, base, {\n    background: state.isSelected ? \"lightblue\" : state.isFocused ? \"hotpink\" : \"#525f7f\"\n  })\n};\nconst brandColor = '#46beed';\nexport class DPFormItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      question: this.props.question\n    };\n  }\n\n  handleChange() {\n    if (this.props.onChange) this.props.onChange(this.state.question);\n  }\n\n  handleRequiredChange(e) {\n    this.setState(prevState => {\n      let question = _.clone(prevState.question);\n\n      question.setIsRequired(!question.isRequired);\n      return {\n        question: question\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  openAppearingConditionModal() {\n    let el = React.createElement(CreateConditionModal, {\n      isOpen: true,\n      onSubmit: this.editAppearingCondition.bind(this),\n      onCancel: destroyModal.bind(this),\n      condition: this.state.question.appearingCondition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    });\n    openModal(el);\n  }\n\n  editAppearingCondition(newLiterals) {\n    this.setState(prevState => {\n      let question = _.clone(prevState.question);\n\n      if (!question.appearingCondition) question.setAppearingCondition(new QACondition());\n      question.appearingCondition.setLiterals(newLiterals);\n      return {\n        question: question\n      };\n    }, () => {\n      destroyModal();\n      this.handleChange();\n    });\n  }\n\n  handleQuestionChange(e) {\n    this.setState(prevState => {\n      let question = _.clone(prevState.question);\n\n      question.setQuestionContent({\n        type: QAType.String,\n        content: e\n      });\n      return {\n        question: question\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleAnswerTypeChange(type) {\n    this.setState(prevState => {\n      let question = _.clone(prevState.question);\n\n      question.setAnswerType(type);\n      return {\n        question: question\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleOptionsChange(options) {\n    this.setState(prevState => {\n      let question = _.clone(prevState.question);\n\n      question.setOptions(options);\n      return {\n        question: question\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleAutoFillChange(autoanswer) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.question);\n\n      cloned.setAutoAnswer(autoanswer);\n      return {\n        question: cloned\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  render() {\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Add Question\")), React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Question\"), React.createElement(\"textarea\", {\n      defaultValue: this.state.question.questionContent.content,\n      className: \"form-control\",\n      onChange: e => this.handleQuestionChange(e.target.value),\n      id: \"question\",\n      name: \"question\",\n      placeholder: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      defaultChecked: this.state.question.isRequired,\n      label: \"Required\",\n      onChange: this.handleRequiredChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(AnswerTypeInput, {\n      answerType: this.state.question.answerType,\n      onChange: this.handleAnswerTypeChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    })), this.state.question.answerType && this.state.question.answerType.name === ANSWER_TYPES.SELECT && this.state.question.answerType.ofType && React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Add Options\"), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(AddOption, {\n      onChange: this.handleOptionsChange.bind(this),\n      defaultOptionType: this.state.question.answerType,\n      options: new AnswerOptions(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }))), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Appearing Condition\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"button\",\n      onClick: this.openAppearingConditionModal.bind(this),\n      size: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      size: \"sm\",\n      icon: faKey,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    })))), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Add Autofill Conditions\"), React.createElement(AutofillCondition, {\n      onChange: this.handleAutoFillChange.bind(this),\n      answerType: this.state.question.answerType,\n      options: this.state.question.options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    })))))));\n  }\n\n}\nDPFormItem.defaultProps = {\n  question: new QAQuestion()\n};\nexport let TableFieldType;\n\n(function (TableFieldType) {\n  TableFieldType[TableFieldType[\"QuestionRef\"] = 1] = \"QuestionRef\";\n  TableFieldType[TableFieldType[\"ComparisonOperator\"] = 2] = \"ComparisonOperator\";\n  TableFieldType[TableFieldType[\"ComparisonValue\"] = 3] = \"ComparisonValue\";\n  TableFieldType[TableFieldType[\"FollowingOperator\"] = 4] = \"FollowingOperator\";\n})(TableFieldType || (TableFieldType = {}));","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/DPFormItem.tsx"],"names":["React","Form","faKey","FontAwesomeIcon","_","Button","Card","CardHeader","CardBody","FormGroup","QACondition","QAComparisonOperator","QAType","QAQuestion","QAAddOptions","AddOption","AnswerOptions","Modal","openModal","destroyModal","AutofillCondition","CreateConditionModal","ANSWER_TYPES","AnswerTypeInput","Switch","root","document","getElementById","body","setAppElement","getOperatorForType","valueType","allOperators","Object","values","type","name","BOOLEAN","DATE","STRING","TIME","filter","item","Equal","NUMBER","customStyles","container","base","state","border","isFocused","background","transition","boxShadow","control","borderColor","brandColor","valueContainer","color","menu","zIndex","menuList","console","log","singleValue","input","option","isSelected","DPFormItem","Component","constructor","props","question","handleChange","onChange","handleRequiredChange","e","setState","prevState","clone","setIsRequired","isRequired","bind","openAppearingConditionModal","el","editAppearingCondition","appearingCondition","newLiterals","setAppearingCondition","setLiterals","handleQuestionChange","setQuestionContent","String","content","handleAnswerTypeChange","setAnswerType","handleOptionsChange","options","setOptions","handleAutoFillChange","autoanswer","cloned","setAutoAnswer","render","questionContent","target","value","answerType","SELECT","ofType","defaultProps","TableFieldType"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Form } from 'formik';\r\nimport { faKey } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport * as _ from \"lodash\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    FormGroup,\r\n} from \"reactstrap\";\r\nimport { QACondition } from \"../form/condition\";\r\nimport { QALiteral, QAComparisonOperator, QAType, AnswerType } from \"../form/answer\";\r\nimport { QAQuestion, QAAutoAnswer } from \"../form/question\";\r\nimport { QAAddOptions as AddOption } from \"./AddOptions\";\r\nimport { AnswerOptions } from \"./AnswerOptions\";\r\nimport Modal from \"react-modal\";\r\nimport { openModal, destroyModal } from \"../utils/util\";\r\nimport { AutofillCondition } from \"./AutofillCondition\";\r\nimport { CreateConditionModal } from \"./CreateConditionModal\";\r\nimport { ANSWER_TYPES, AnswerTypeInput, QAValueType } from \"./AnswerType\";\r\nimport { Switch } from \"@blueprintjs/core\";\r\nlet root: HTMLElement = document.getElementById(\"root\") || document.body;\r\nModal.setAppElement(root);\r\n\r\nexport function getOperatorForType(valueType?: QAValueType) {\r\n    let allOperators = Object.values(QAComparisonOperator);\r\n    let type = valueType && valueType.name;\r\n\r\n    switch (type) {\r\n        case ANSWER_TYPES.BOOLEAN:\r\n        case ANSWER_TYPES.DATE:\r\n        case ANSWER_TYPES.STRING:\r\n        case ANSWER_TYPES.TIME:\r\n\r\n\r\n            return allOperators.filter(item => item === QAComparisonOperator.Equal);\r\n        case ANSWER_TYPES.NUMBER:\r\n        default:\r\n            return allOperators;\r\n    }\r\n}\r\n\r\nexport const customStyles = {\r\n    container: (base: any, state: any) => ({\r\n        ...base,\r\n        border: state.isFocused ? null : null,\r\n        background: \"transparent\",\r\n        transition:\r\n            \"border-color 0.2s ease, box-shadow 0.2s ease, padding 0.2s ease\",\r\n        \"&:hover\": {\r\n            boxShadow: \"0 2px 4px 0 rgba(41, 56, 78, 0.1)\",\r\n        }\r\n    }),\r\n\r\n    control: (base: any, state: any) => ({\r\n        ...base,\r\n        background: \"transparent\",\r\n        borderColor: state.isFocused ? brandColor : base.borderColor,\r\n        '&:hover': {\r\n            borderColor: state.isFocused\r\n                ? brandColor\r\n                : base.borderColor\r\n        }\r\n    }),\r\n    valueContainer: (base: any, state: any) => ({\r\n        ...base,\r\n        background: \"transparent\",\r\n        color: \"white\"\r\n    }),\r\n\r\n    menu: (base: any, state: any) => ({\r\n        ...base,\r\n        background: \"black\",\r\n        borderColor: \"#e14eca\",\r\n        zIndex: \"999999999999999999 !important\"\r\n\r\n    }),\r\n    menuList: (base: any, state: any) => {\r\n        console.log(state)\r\n        return {\r\n            ...base,\r\n            background: \"#525f7f\",\r\n            color: \"white\",\r\n\r\n        }\r\n    },\r\n    singleValue: (base: any, state: any) => ({\r\n        ...base,\r\n        color: \"white\"\r\n    }),\r\n\r\n    input: (base: any, state: any) => ({\r\n        ...base,\r\n        color: \"white\"\r\n    }),\r\n    option: (base: any, state: any) => ({\r\n        ...base,\r\n        background: state.isSelected ? \"lightblue\" : state.isFocused ? \"hotpink\" : \"#525f7f\"\r\n    }),\r\n};\r\n\r\nconst brandColor = '#46beed';\r\n\r\n\r\ninterface FormItemProps {\r\n    question: QAQuestion,\r\n    onChange: (question: QAQuestion) => void\r\n}\r\ninterface FormItemState {\r\n    question: QAQuestion\r\n}\r\n\r\nexport class DPFormItem extends React.Component<FormItemProps, FormItemState>{\r\n    static defaultProps = {\r\n        question: new QAQuestion()\r\n    }\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            question: this.props.question\r\n        }\r\n    }\r\n    handleChange() {\r\n        if (this.props.onChange) this.props.onChange(this.state.question)\r\n    }\r\n    handleRequiredChange(e: any) {\r\n        this.setState((prevState: FormItemState) => {\r\n            let question = _.clone(prevState.question);\r\n            question.setIsRequired(!question.isRequired);\r\n            return {\r\n                question: question\r\n            }\r\n        }, this.handleChange.bind(this))\r\n    }\r\n    openAppearingConditionModal() {\r\n        let el = <CreateConditionModal\r\n            isOpen={true}\r\n            onSubmit={this.editAppearingCondition.bind(this)}\r\n            onCancel={destroyModal.bind(this)}\r\n            condition={this.state.question.appearingCondition} />\r\n        openModal(el);\r\n    }\r\n\r\n    editAppearingCondition(newLiterals: QALiteral[]) {\r\n        this.setState((prevState: any) => {\r\n            let question: QAQuestion = _.clone(prevState.question)\r\n            if (!question.appearingCondition) question.setAppearingCondition(new QACondition())\r\n            question.appearingCondition.setLiterals(newLiterals)\r\n            return {\r\n                question: question\r\n            }\r\n        }, () => {\r\n            destroyModal();\r\n            this.handleChange();\r\n        })\r\n    }\r\n    handleQuestionChange(e: string) {\r\n        this.setState((prevState: FormItemState) => {\r\n            let question = _.clone(prevState.question);\r\n            question.setQuestionContent({ type: QAType.String, content: e });\r\n            return {\r\n                question: question\r\n            }\r\n        }, this.handleChange.bind(this))\r\n    }\r\n    handleAnswerTypeChange(type: QAValueType) {\r\n        this.setState((prevState: FormItemState) => {\r\n            let question = _.clone(prevState.question);\r\n            question.setAnswerType(type);\r\n            return {\r\n                question: question\r\n            }\r\n        }, this.handleChange.bind(this))\r\n    }\r\n    handleOptionsChange(options: AnswerOptions) {\r\n        this.setState((prevState: FormItemState) => {\r\n            let question = _.clone(prevState.question);\r\n            question.setOptions(options);\r\n            return {\r\n                question: question\r\n            }\r\n        }, this.handleChange.bind(this))\r\n    }\r\n    handleAutoFillChange(autoanswer: QAAutoAnswer) {\r\n        this.setState((prevState: any) => {\r\n            let cloned: QAQuestion = _.clone(prevState.question);\r\n            cloned.setAutoAnswer(autoanswer)\r\n            return {\r\n                question: cloned\r\n            }\r\n        }, this.handleChange.bind(this))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Form>\r\n                <div>\r\n                    <Card>\r\n                        <CardHeader>\r\n                            <h5 className=\"title\">Add Question</h5>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            <FormGroup>\r\n                                <label htmlFor=\"question\">Question</label>\r\n                                <textarea defaultValue={this.state.question.questionContent.content} className=\"form-control\" onChange={e => this.handleQuestionChange(e.target.value)} id=\"question\" name=\"question\" placeholder=\"\" />\r\n                            </FormGroup>\r\n\r\n\r\n                            <FormGroup>\r\n                                <Switch defaultChecked={this.state.question.isRequired} label=\"Required\" onChange={this.handleRequiredChange.bind(this)} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <AnswerTypeInput answerType={this.state.question.answerType} onChange={this.handleAnswerTypeChange.bind(this)} />\r\n                            </FormGroup>\r\n\r\n                            {this.state.question.answerType && this.state.question.answerType.name === ANSWER_TYPES.SELECT && this.state.question.answerType.ofType && <FormGroup >\r\n                                <label >Add Options</label>\r\n                                <Card>\r\n                                    <AddOption onChange={this.handleOptionsChange.bind(this)} defaultOptionType={this.state.question.answerType} options={new AnswerOptions()} />\r\n                                </Card>\r\n                            </FormGroup>}\r\n\r\n                            <FormGroup>\r\n                                <label htmlFor=\"type\">Appearing Condition</label>\r\n                                <div>\r\n                                    <Button type=\"button\" onClick={this.openAppearingConditionModal.bind(this)}\r\n                                        size=\"sm\">\r\n                                        <FontAwesomeIcon size={\"sm\"} icon={faKey} /></Button>\r\n\r\n                                </div>\r\n\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <FormGroup>\r\n                                    <label htmlFor=\"type\">Add Autofill Conditions</label>\r\n\r\n                                    <AutofillCondition onChange={this.handleAutoFillChange.bind(this)}\r\n                                        answerType={this.state.question.answerType}\r\n                                        options={this.state.question.options} />\r\n\r\n                                </FormGroup>\r\n                            </FormGroup>\r\n\r\n\r\n                        </CardBody>\r\n\r\n                    </Card>\r\n                </div>\r\n            </Form>)\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport interface SelectOption {\r\n    value: string | keyof typeof AnswerType,\r\n    label: string\r\n}\r\n\r\n\r\n\r\nexport enum TableFieldType {\r\n    QuestionRef = 1,\r\n    ComparisonOperator,\r\n    ComparisonValue,\r\n    FollowingOperator,\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}