{"ast":null,"code":"import _ from \"lodash\";\nexport class QACondition {\n  constructor() {\n    this.literals = void 0;\n    this.literals = Array();\n  }\n\n  static checkIfValid(condition) {\n    if (!condition.literals) return false;\n    let isValid = true;\n    condition.literals.forEach(literal => {\n      let validity = Object.values(literal).every(x => !_.isNil(x));\n      if (!validity) isValid = false;\n    });\n    console.log(isValid);\n    return isValid;\n  }\n\n  static Clone(condition) {\n    let newCondition = new QACondition();\n    return newCondition;\n  }\n\n  setLiterals(newLiterals) {\n    this.literals = newLiterals;\n    return this;\n  }\n\n  getClause() {\n    let clause = \"\";\n    this.literals.forEach((literal, key) => {\n      clause += \"l\".concat(key).concat(key === this.literals.length - 1 ? literal.followingOperator : \"\");\n    });\n    return clause;\n  }\n\n  get Literals() {\n    return this.literals;\n  }\n\n  addLiteral(literal) {\n    this.literals.push(literal);\n    console.log(this.literals);\n  }\n\n  deleteLiteral(literalIndex) {\n    this.literals.splice(literalIndex, 1);\n    return this;\n  }\n\n}\nexport let QAFollowingOperator;\n\n(function (QAFollowingOperator) {\n  QAFollowingOperator[\"OR\"] = \"||\";\n  QAFollowingOperator[\"AND\"] = \"&\";\n})(QAFollowingOperator || (QAFollowingOperator = {}));","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/form/condition.ts"],"names":["_","QACondition","constructor","literals","Array","checkIfValid","condition","isValid","forEach","literal","validity","Object","values","every","x","isNil","console","log","Clone","newCondition","setLiterals","newLiterals","getClause","clause","key","length","followingOperator","Literals","addLiteral","push","deleteLiteral","literalIndex","splice","QAFollowingOperator"],"mappings":"AACA,OAAOA,CAAP,MAAc,QAAd;AAEA,OAAO,MAAMC,WAAN,CAAkB;AAIrBC,EAAAA,WAAW,GAAG;AAAA,SAFdC,QAEc;AACV,SAAKA,QAAL,GAAgBC,KAAK,EAArB;AACH;;AAED,SAAOC,YAAP,CAAoBC,SAApB,EAA4C;AACxC,QAAI,CAACA,SAAS,CAACH,QAAf,EAAyB,OAAO,KAAP;AACzB,QAAII,OAAO,GAAG,IAAd;AACAD,IAAAA,SAAS,CAACH,QAAV,CAAmBK,OAAnB,CAA4BC,OAAD,IAAa;AACpC,UAAIC,QAAiB,GAAGC,MAAM,CAACC,MAAP,CAAcH,OAAd,EAAuBI,KAAvB,CAA8BC,CAAD,IAAkB,CAACd,CAAC,CAACe,KAAF,CAAQD,CAAR,CAAhD,CAAxB;AACA,UAAI,CAACJ,QAAL,EAAeH,OAAO,GAAG,KAAV;AAClB,KAHD;AAIAS,IAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACA,WAAOA,OAAP;AAEH;;AAED,SAAOW,KAAP,CAAaZ,SAAb,EAAkD;AAC9C,QAAIa,YAAY,GAAG,IAAIlB,WAAJ,EAAnB;AACA,WAAOkB,YAAP;AACH;;AACDC,EAAAA,WAAW,CAACC,WAAD,EAA2B;AAClC,SAAKlB,QAAL,GAAgBkB,WAAhB;AACA,WAAO,IAAP;AACH;;AAEDC,EAAAA,SAAS,GAAW;AAChB,QAAIC,MAAM,GAAG,EAAb;AACA,SAAKpB,QAAL,CAAcK,OAAd,CAAsB,CAACC,OAAD,EAAUe,GAAV,KAAkB;AACpCD,MAAAA,MAAM,eAAQC,GAAR,SAAcA,GAAG,KAAK,KAAKrB,QAAL,CAAcsB,MAAd,GAAuB,CAA/B,GAAmChB,OAAO,CAACiB,iBAA3C,GAA+D,EAA7E,CAAN;AACH,KAFD;AAGA,WAAOH,MAAP;AACH;;AAED,MAAII,QAAJ,GAAiC;AAC7B,WAAO,KAAKxB,QAAZ;AACH;;AAEDyB,EAAAA,UAAU,CAACnB,OAAD,EAAqB;AAC3B,SAAKN,QAAL,CAAc0B,IAAd,CAAmBpB,OAAnB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,QAAjB;AACH;;AAED2B,EAAAA,aAAa,CAACC,YAAD,EAAuB;AAChC,SAAK5B,QAAL,CAAc6B,MAAd,CAAqBD,YAArB,EAAmC,CAAnC;AACA,WAAO,IAAP;AACH;;AAjDoB;AAuDzB,WAAYE,mBAAZ;;WAAYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB","sourcesContent":["import { QALiteral } from \"./answer\";\r\nimport _ from \"lodash\";\r\n\r\nexport class QACondition {\r\n\r\n    literals: Array<QALiteral>;\r\n\r\n    constructor() {\r\n        this.literals = Array<QALiteral>();\r\n    }\r\n\r\n    static checkIfValid(condition: QACondition) {\r\n        if (!condition.literals) return false;\r\n        let isValid = true;\r\n        condition.literals.forEach((literal) => {\r\n            let validity: boolean = Object.values(literal).every((x: QALiteral) => !_.isNil(x));\r\n            if (!validity) isValid = false;\r\n        });\r\n        console.log(isValid);\r\n        return isValid;\r\n\r\n    }\r\n\r\n    static Clone(condition: QACondition): QACondition {\r\n        let newCondition = new QACondition();\r\n        return newCondition;\r\n    }\r\n    setLiterals(newLiterals: QALiteral[]) {\r\n        this.literals = newLiterals;\r\n        return this;\r\n    }\r\n\r\n    getClause(): string {\r\n        let clause = \"\";\r\n        this.literals.forEach((literal, key) => {\r\n            clause += `l${key}${key === this.literals.length - 1 ? literal.followingOperator : \"\"}`\r\n        });\r\n        return clause;\r\n    }\r\n\r\n    get Literals(): Array<QALiteral> {\r\n        return this.literals;\r\n    }\r\n\r\n    addLiteral(literal: QALiteral) {\r\n        this.literals.push(literal);\r\n        console.log(this.literals);\r\n    }\r\n\r\n    deleteLiteral(literalIndex: number) {\r\n        this.literals.splice(literalIndex, 1);\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport enum QAFollowingOperator {\r\n    OR = \"||\",\r\n    AND = \"&\"\r\n}"]},"metadata":{},"sourceType":"module"}