{"ast":null,"code":"var _jsxFileName = \"/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/formtree.tsx\";\nimport { QuestionSection } from \"./SurveyForm\";\nimport { Tree, Classes } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { QAQuestion } from \"../form/question\";\nexport class FormTree extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNodeClick = (nodeData, _nodePath, e) => {\n      if (this.props.handleNodeClick) this.props.handleNodeClick(nodeData, _nodePath, e);\n    };\n\n    this.handleNodeCollapse = (nodeData, _nodePath, e) => {\n      if (this.props.handleNodeCollapse) this.props.handleNodeCollapse(nodeData, _nodePath, e);\n    };\n\n    this.handleNodeExpand = (nodeData, _nodePath, e) => {\n      if (this.props.handleNodeExpand) this.props.handleNodeExpand(nodeData, _nodePath, e);\n    };\n\n    this.state = {};\n  }\n\n  getNodeFromQuestionOrSection(item, sectionNumber, selectedNodes, expandedNodes) {\n    let def = {\n      id: item.id,\n      icon: undefined,\n      label: \"\",\n      isSelected: selectedNodes.includes(item.id),\n      isExpanded: expandedNodes.includes(item.id)\n    };\n\n    if (item instanceof QAQuestion) {\n      def.icon = \"document\";\n      def.label = \"\".concat(sectionNumber, \" Question\");\n    } else if (item instanceof QuestionSection) {\n      def.icon = \"folder-close\";\n      def.label = \"\".concat(sectionNumber, \" \").concat(item.name || \"Section\");\n      def.childNodes = item.content.map((it, ind) => this.getNodeFromQuestionOrSection(it, sectionNumber + \".\" + (ind + 1), selectedNodes, expandedNodes));\n    }\n\n    return def;\n  }\n\n  generateITNodeTree(form, selectedNodes, expandedNodes) {\n    let root = {\n      id: form.id,\n      hasCaret: true,\n      icon: \"folder-close\",\n      label: \"Root\",\n      isExpanded: expandedNodes.includes(form.id),\n      isSelected: selectedNodes.includes(form.id),\n      childNodes: form.content.map((it, ind) => this.getNodeFromQuestionOrSection(it, (ind + 1).toString(), selectedNodes, expandedNodes))\n    };\n    return [root];\n  }\n\n  render() {\n    return React.createElement(Tree, {\n      contents: this.generateITNodeTree(this.props.root, this.props.selectedNodes, this.props.expandedNodes),\n      onNodeClick: this.handleNodeClick,\n      onNodeCollapse: this.handleNodeCollapse,\n      onNodeExpand: this.handleNodeExpand,\n      className: Classes.ELEVATION_0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/formtree.tsx"],"names":["QuestionSection","Tree","Classes","React","QAQuestion","FormTree","Component","constructor","props","handleNodeClick","nodeData","_nodePath","e","handleNodeCollapse","handleNodeExpand","state","getNodeFromQuestionOrSection","item","sectionNumber","selectedNodes","expandedNodes","def","id","icon","undefined","label","isSelected","includes","isExpanded","name","childNodes","content","map","it","ind","generateITNodeTree","form","root","hasCaret","toString","render","ELEVATION_0"],"mappings":"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","sourcesContent":["import { QuestionSection } from \"./SurveyForm\";\n\nimport { ITreeNode, Tree, Classes } from \"@blueprintjs/core\";\n\nimport React from \"react\";\n\nimport { QAQuestion } from \"../form/question\";\nimport { RootSection } from \"./section\";\n\n\n\ninterface FormTreeState {\n}\ninterface FormTreeProps {\n    root: (RootSection),\n    selectedNodes: string[],\n    expandedNodes: string[],\n    handleNodeClick?: (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => void,\n    handleNodeCollapse?: (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => void,\n    handleNodeExpand?: (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => void,\n\n}\nexport class FormTree extends React.Component<FormTreeProps, FormTreeState>{\n    constructor(props: FormTreeProps) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    private handleNodeClick = (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\n        if (this.props.handleNodeClick) this.props.handleNodeClick(nodeData, _nodePath, e);\n    };\n\n    private handleNodeCollapse = (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\n        if (this.props.handleNodeCollapse) this.props.handleNodeCollapse(nodeData, _nodePath, e);\n    };\n\n    private handleNodeExpand = (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\n        if (this.props.handleNodeExpand) this.props.handleNodeExpand(nodeData, _nodePath, e);\n    };\n    getNodeFromQuestionOrSection(item: QuestionSection | QAQuestion, sectionNumber: string, selectedNodes: string[], expandedNodes: string[]) {\n        let def: ITreeNode = {\n            id: item.id,\n            icon: undefined,\n            label: \"\",\n            isSelected: selectedNodes.includes(item.id),\n            isExpanded: expandedNodes.includes(item.id)\n        };\n        if (item instanceof QAQuestion) {\n            def.icon = \"document\"\n            def.label = `${sectionNumber} Question`;\n        }\n        else if (item instanceof QuestionSection) {\n            def.icon = \"folder-close\"\n            def.label = `${sectionNumber} ${item.name || \"Section\"}`;\n            def.childNodes = item.content.map((it, ind) => this.getNodeFromQuestionOrSection(it, sectionNumber + \".\" + (ind + 1), selectedNodes, expandedNodes))\n\n        }\n        return def;\n    }\n\n    generateITNodeTree(form: QuestionSection, selectedNodes: string[], expandedNodes: string[]): ITreeNode[] {\n        let root: ITreeNode = {\n            id: form.id,\n            hasCaret: true,\n            icon: \"folder-close\",\n            label: \"Root\",\n            isExpanded: expandedNodes.includes(form.id),\n            isSelected: selectedNodes.includes(form.id),\n            childNodes: form.content.map((it: QAQuestion | QuestionSection, ind: number) => this.getNodeFromQuestionOrSection(it, (ind + 1).toString(), selectedNodes, expandedNodes))\n        }\n        return [root];\n    }\n\n\n\n    render() {\n        return <Tree contents={this.generateITNodeTree(this.props.root, this.props.selectedNodes, this.props.expandedNodes)}\n            onNodeClick={this.handleNodeClick}\n            onNodeCollapse={this.handleNodeCollapse}\n            onNodeExpand={this.handleNodeExpand}\n            className={Classes.ELEVATION_0} />\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}