{"ast":null,"code":"var _jsxFileName = \"/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/CreateCondition.tsx\";\nimport React from \"react\";\nimport { faPlusSquare, faWindowClose, faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Select from 'react-select';\nimport { Button, Table, Card, CardHeader, CardBody, Row } from \"reactstrap\";\nimport { QAFollowingOperator } from \"../form/condition\";\nimport { QAComparisonOperator, QAType } from \"../form/answer\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { TableFieldType, customStyles, getOperatorForType } from \"./DPFormItem\";\nimport _ from \"lodash\";\nimport { testQuestion, testQuestion2, testQuestion3, testQuestion4, testQuestion5 } from \"../testData/TestQuestions\";\nimport { ValInput } from \"./ValInput\";\nexport class CreateCondition extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = void 0;\n    this.state = {\n      literals: this.props.condition ? this.props.condition.literals : []\n    };\n    this.columns = [{\n      dataField: \"id\",\n      text: \"Literal ID\"\n    }, {\n      dataField: \"questionRef\",\n      text: \"Question Reference\"\n    }, {\n      dataField: \"comparisonOperator\",\n      text: \"Comparison Operator\"\n    }, {\n      dataField: \"comparisonValue\",\n      text: \"Comparison Value\"\n    }, {\n      dataField: \"followingOperator\",\n      text: \"Following Operator\"\n    }];\n  }\n\n  componentDidMount() {\n    if (this.props.setLiteralsSetter) {\n      this.props.setLiteralsSetter(this.setLiterals.bind(this));\n    }\n  }\n\n  setLiterals(newLiterals) {\n    this.setState({\n      literals: newLiterals\n    });\n  }\n\n  addLiteral(literal) {\n    if (!literal) literal = {\n      literalId: getRandomId(\"lit-\"),\n      questionRef: undefined,\n      comparisonOperator: undefined,\n      comparisonValue: undefined,\n      followingOperator: undefined\n    };\n    this.setState(prevState => {\n      let newLiterals = _.clone(prevState.literals);\n\n      if (literal) newLiterals.push(literal);\n      return {\n        literals: newLiterals\n      };\n    }, () => {\n      if (this.props.onChange) {\n        this.props.onChange(this.state.literals);\n      }\n    });\n  }\n\n  moveLiteralUp(index) {\n    this.setState(prevState => {\n      let newLiterals = _.clone(prevState.literals);\n\n      const get_new_index = (i, length) => {\n        const mod = (x, n) => (x % n + n) % n;\n\n        return mod(i - 1, length);\n      };\n\n      let newIndex = get_new_index(index, newLiterals.length);\n      var _ref = [newLiterals[newIndex], newLiterals[index]];\n      newLiterals[index] = _ref[0];\n      newLiterals[newIndex] = _ref[1];\n      return {\n        literals: newLiterals\n      };\n    }, this.forceUpdate.bind(this));\n  }\n\n  handleDataChange(literalIndex, valueField, newValue) {\n    this.setState(prevState => {\n      let newLiterals = _.clone(prevState.literals);\n\n      let current = newLiterals[literalIndex];\n\n      switch (valueField) {\n        case TableFieldType.QuestionRef:\n          current.questionRef = newValue && newValue.value ? newValue.value : undefined;\n          break;\n\n        case TableFieldType.ComparisonOperator:\n          let prop;\n          let accessProp;\n\n          for (prop in QAComparisonOperator) {\n            if (QAComparisonOperator[prop] === newValue.value) {\n              accessProp = prop;\n              current.comparisonOperator = QAComparisonOperator[accessProp];\n              break;\n            }\n          }\n\n          break;\n\n        case TableFieldType.ComparisonValue:\n          let newComparisonValue = {\n            content: newValue.value,\n            type: QAType.String\n          };\n          current.comparisonValue = newComparisonValue;\n          break;\n\n        case TableFieldType.FollowingOperator:\n          current.followingOperator = newValue.value === QAFollowingOperator.AND ? QAFollowingOperator.AND : QAFollowingOperator.OR;\n          break;\n\n        default:\n          break;\n      }\n\n      return {\n        literals: newLiterals\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.literals);\n    });\n  }\n\n  getQuestion(questionRef) {\n    if (questionRef && this.props.definedQuestions && !_.isEmpty(this.props.definedQuestions)) {\n      let v = this.props.definedQuestions[questionRef];\n      return v;\n    }\n\n    return null;\n  }\n\n  removeLiteral(index) {\n    this.setState(prevState => {\n      let newLiterals = _.clone(prevState.literals);\n\n      newLiterals.splice(index, 1);\n      return {\n        literals: newLiterals\n      };\n    }, () => {\n      if (this.props.onChange) {\n        this.props.onChange(this.state.literals);\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"\".concat(this.props.condition ? \"Edit\" : \"Add\", \" Condtion\")), React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      key: \"th-first\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"\"), this.columns.map((item, key) => {\n      return React.createElement(\"th\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, item.text);\n    }), React.createElement(\"th\", {\n      key: \"th-last\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, this.state.literals.map((item, key) => {\n      let questions_ = this.props.definedQuestions ? Object.values(this.props.definedQuestions).map(item => ({\n        value: item.referenceId,\n        label: item.questionContent.content\n      })) : [];\n      let questionselect = React.createElement(Select, {\n        key: \"literalq-\".concat(key, \"-\").concat(item.literalId),\n        styles: customStyles,\n        options: questions_,\n        value: questions_.find(r => r.value === item.questionRef),\n        onChange: selecteOption => this.handleDataChange(key, TableFieldType.QuestionRef, selecteOption),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      });\n      let selectedQuestionType = item.questionRef && this.props.definedQuestions ? this.props.definedQuestions[item.questionRef].answerType : undefined;\n      let comparisionOPOptions_ = getOperatorForType(selectedQuestionType).map((val, index) => ({\n        value: val,\n        label: val\n      }));\n      let comparisonOpSelect = React.createElement(Select, {\n        key: \"literalo-\".concat(key, \"-\").concat(item.literalId),\n        styles: customStyles,\n        options: comparisionOPOptions_,\n        value: comparisionOPOptions_.find((op, index) => op.value === item.comparisonOperator),\n        onChange: this.handleDataChange.bind(this, key, TableFieldType.ComparisonOperator),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      });\n      let question_ = this.getQuestion(item.questionRef);\n      let qAnswerType = question_ ? question_.answerType : undefined;\n      let qOptions = question_ && question_.options ? question_.options : undefined;\n      let comparisonValueSelect = React.createElement(ValInput, {\n        options: qOptions,\n        key: \"literalv-\".concat(key, \"-\").concat(item.literalId),\n        onChange: this.handleDataChange.bind(this, key, TableFieldType.ComparisonValue),\n        defaultValue: item.comparisonValue && item.comparisonValue.content,\n        type: qAnswerType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      });\n      let followingOperatorOptions_ = Object.keys(QAFollowingOperator).map(key => ({\n        label: key,\n        value: key === \"AND\" ? QAFollowingOperator.AND : key === \"OR\" ? QAFollowingOperator.OR : \"\"\n      }));\n      let followingOperatorSelect = React.createElement(Select, {\n        key: \"literalfo-\".concat(key, \"-\").concat(item.literalId),\n        styles: customStyles,\n        options: followingOperatorOptions_,\n        value: followingOperatorOptions_.find(r => r.value === item.followingOperator),\n        onChange: this.handleDataChange.bind(this, key, TableFieldType.FollowingOperator),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      });\n      return React.createElement(\"tr\", {\n        key: \"tr_\" + key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        size: \"sm\",\n        onClick: () => this.moveLiteralUp(key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(FontAwesomeIcon, {\n        icon: faArrowUp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"l\", React.createElement(\"sub\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, key)), React.createElement(\"td\", {\n        className: \"questionRef\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, questionselect), React.createElement(\"td\", {\n        className: \"comparisonOperator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, comparisonOpSelect), React.createElement(\"td\", {\n        className: \"comparisonValue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, comparisonValueSelect), React.createElement(\"td\", {\n        className: \"followingOperator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, followingOperatorSelect), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(Button, {\n        size: \"sm\",\n        onClick: () => {\n          this.removeLiteral(key);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \" \", React.createElement(FontAwesomeIcon, {\n        icon: faWindowClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }))));\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"sm\",\n      onClick: () => this.addLiteral(),\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faPlusSquare,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })))))));\n  }\n\n}\nCreateCondition.defaultProps = {\n  onChange: () => {},\n  definedQuestions: {\n    'question-1': testQuestion,\n    'question-2': testQuestion2,\n    \"question-3\": testQuestion3,\n    \"question-4\": testQuestion4,\n    \"question-5\": testQuestion5\n  }\n};","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/CreateCondition.tsx"],"names":["React","faPlusSquare","faWindowClose","faArrowUp","FontAwesomeIcon","Select","Button","Table","Card","CardHeader","CardBody","Row","QAFollowingOperator","QAComparisonOperator","QAType","getRandomId","TableFieldType","customStyles","getOperatorForType","_","testQuestion","testQuestion2","testQuestion3","testQuestion4","testQuestion5","ValInput","CreateCondition","Component","constructor","props","columns","state","literals","condition","dataField","text","componentDidMount","setLiteralsSetter","setLiterals","bind","newLiterals","setState","addLiteral","literal","literalId","questionRef","undefined","comparisonOperator","comparisonValue","followingOperator","prevState","clone","push","onChange","moveLiteralUp","index","get_new_index","i","length","mod","x","n","newIndex","forceUpdate","handleDataChange","literalIndex","valueField","newValue","current","QuestionRef","value","ComparisonOperator","prop","accessProp","ComparisonValue","newComparisonValue","content","type","String","FollowingOperator","AND","OR","getQuestion","definedQuestions","isEmpty","v","removeLiteral","splice","render","map","item","key","questions_","Object","values","referenceId","label","questionContent","questionselect","find","r","selecteOption","selectedQuestionType","answerType","comparisionOPOptions_","val","comparisonOpSelect","op","question_","qAnswerType","qOptions","options","comparisonValueSelect","followingOperatorOptions_","keys","followingOperatorSelect","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { faPlusSquare, faWindowClose, faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Select from 'react-select';\nimport { Button, Table, Card, CardHeader, CardBody, Row } from \"reactstrap\";\nimport { QAFollowingOperator, QACondition } from \"../form/condition\";\nimport { QALiteral, QAComparisonOperator, QAType, QAContent, AnswerType } from \"../form/answer\";\nimport { QAQuestion, AnswerOption } from \"../form/question\";\nimport { ValueType } from \"react-select/src/types\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { ValueInput } from \"./ValueInput\";\nimport { TableFieldType, customStyles, SelectOption, getOperatorForType } from \"./DPFormItem\";\nimport _ from \"lodash\";\nimport { testQuestion, testQuestion2, testQuestion3, testQuestion4, testQuestion5 } from \"../testData/TestQuestions\";\nimport { ValInput } from \"./ValInput\";\nexport type CreateConditionState = {\n    literals: QALiteral[]\n};\n\nexport type CreateConditionProps = {\n    definedQuestions?: { [key: string]: QAQuestion }\n    onChange?: (data: QALiteral[]) => void\n    literals?: Array<QALiteral>\n    setLiteralsSetter?: Function\n    condition?: QACondition\n\n}\nexport class CreateCondition extends React.Component<CreateConditionProps, CreateConditionState> {\n    columns: {\n        dataField: string;\n        text: string;\n    }[];\n    static defaultProps: CreateConditionProps = {\n        onChange: () => { },\n        definedQuestions: { 'question-1': testQuestion, 'question-2': testQuestion2, \"question-3\": testQuestion3, \"question-4\": testQuestion4, \"question-5\": testQuestion5 }\n    };\n    constructor(props: CreateConditionProps) {\n        super(props);\n        this.state = {\n            literals: this.props.condition ? this.props.condition.literals : [],\n        };\n        this.columns = [\n            {\n                dataField: \"id\",\n                text: \"Literal ID\"\n            },\n            {\n                dataField: \"questionRef\",\n                text: \"Question Reference\"\n            },\n            {\n                dataField: \"comparisonOperator\",\n                text: \"Comparison Operator\"\n            },\n            {\n                dataField: \"comparisonValue\",\n                text: \"Comparison Value\"\n            },\n            {\n                dataField: \"followingOperator\",\n                text: \"Following Operator\"\n            }\n        ];\n    }\n    componentDidMount() {\n        if (this.props.setLiteralsSetter) {\n            this.props.setLiteralsSetter(this.setLiterals.bind(this));\n        }\n    }\n    setLiterals(newLiterals: QALiteral[]) {\n        this.setState({\n            literals: newLiterals\n        });\n    }\n    addLiteral(literal?: QALiteral) {\n        if (!literal)\n            literal = { literalId: getRandomId(\"lit-\"), questionRef: undefined, comparisonOperator: undefined, comparisonValue: undefined, followingOperator: undefined };\n\n        this.setState((prevState: CreateConditionState) => {\n            let newLiterals = _.clone(prevState.literals);\n            if (literal) newLiterals.push(literal);\n            return { literals: newLiterals };\n        }, () => {\n            if (this.props.onChange) {\n                this.props.onChange(this.state.literals);\n            }\n        });\n    }\n    moveLiteralUp(index: number) {\n        this.setState((prevState: CreateConditionState) => {\n            let newLiterals = _.clone(prevState.literals);\n            const get_new_index = (i: number, length: number) => {\n                const mod = (x: number, n: number) => (x % n + n) % n;\n                return mod(i - 1, length);\n            };\n            let newIndex = get_new_index(index, newLiterals.length);\n            [newLiterals[index], newLiterals[newIndex]] = [newLiterals[newIndex], newLiterals[index]];\n            return {\n                literals: newLiterals\n            };\n        }, this.forceUpdate.bind(this));\n    }\n    handleDataChange(literalIndex: number, valueField: TableFieldType, newValue: any) {\n        this.setState((prevState: CreateConditionState) => {\n            let newLiterals: QALiteral[] = _.clone(prevState.literals);\n            let current = newLiterals[literalIndex];\n            switch (valueField) {\n                case TableFieldType.QuestionRef:\n                    current.questionRef = newValue && newValue.value ? newValue.value : undefined;\n                    break;\n                case TableFieldType.ComparisonOperator:\n                    let prop: keyof typeof QAComparisonOperator;\n                    let accessProp: keyof typeof QAComparisonOperator;\n                    for (prop in QAComparisonOperator) {\n                        if (QAComparisonOperator[prop] === newValue.value) {\n                            accessProp = prop;\n                            current.comparisonOperator = QAComparisonOperator[accessProp];\n                            break;\n                        }\n                    }\n                    break;\n                case TableFieldType.ComparisonValue:\n                    let newComparisonValue: QAContent = { content: newValue.value, type: QAType.String };\n                    current.comparisonValue = newComparisonValue;\n                    break;\n                case TableFieldType.FollowingOperator:\n                    current.followingOperator = (newValue.value === QAFollowingOperator.AND) ? QAFollowingOperator.AND : QAFollowingOperator.OR;\n                    break;\n                default:\n                    break;\n            }\n            return {\n                literals: newLiterals\n            };\n        }, () => {\n            if (this.props.onChange)\n                this.props.onChange(this.state.literals);\n        });\n    }\n    getQuestion(questionRef?: string) {\n        if (questionRef && this.props.definedQuestions && !_.isEmpty(this.props.definedQuestions)) {\n            let v = this.props.definedQuestions[questionRef];\n            return v;\n        }\n        return null;\n    }\n    removeLiteral(index: number) {\n        this.setState((prevState: CreateConditionState) => {\n            let newLiterals = _.clone(prevState.literals);\n            newLiterals.splice(index, 1);\n            return {\n                literals: newLiterals\n            };\n        }, () => {\n            if (this.props.onChange) {\n                this.props.onChange(this.state.literals);\n            }\n        });\n    }\n    render() {\n        return (<Card>\n            <CardHeader>{`${this.props.condition ? \"Edit\" : \"Add\"} Condtion`}</CardHeader>\n            <CardBody>\n                <Row>\n                    <Table>\n                        <thead>\n                            <tr>\n                                <th key=\"th-first\">{``}</th>\n                                {this.columns.map((item, key) => {\n                                    return <th key={key}>{item.text}</th>;\n                                })}\n                                <th key=\"th-last\">{``}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.literals.map((item: QALiteral, key: number) => {\n                                let questions_ = this.props.definedQuestions ? Object.values(this.props.definedQuestions).map((item: QAQuestion) => ({ value: item.referenceId, label: item.questionContent.content })) : [];\n                                let questionselect = <Select key={`literalq-${key}-${item.literalId}`} styles={customStyles} options={questions_} value={questions_.find((r: { value: string, label: string }) => r.value === item.questionRef)} onChange={(selecteOption: ValueType<AnswerOption>) => this.handleDataChange(key, TableFieldType.QuestionRef, selecteOption)} />;\n                                let selectedQuestionType = item.questionRef && this.props.definedQuestions ? this.props.definedQuestions[item.questionRef].answerType : undefined;\n                                let comparisionOPOptions_: SelectOption[] = getOperatorForType(selectedQuestionType).map((val, index) => ({ value: val, label: val }));\n                                let comparisonOpSelect = <Select key={`literalo-${key}-${item.literalId}`} styles={customStyles} options={comparisionOPOptions_} value={comparisionOPOptions_.find((op, index) => op.value === item.comparisonOperator)} onChange={this.handleDataChange.bind(this, key, TableFieldType.ComparisonOperator)} />;\n                                let question_: QAQuestion | null = this.getQuestion(item.questionRef);\n                                let qAnswerType = question_ ? question_.answerType : undefined;\n                                let qOptions = question_ && question_.options ? question_.options: undefined ;\n                                let comparisonValueSelect = <ValInput options={qOptions} key={`literalv-${key}-${item.literalId}`} onChange={this.handleDataChange.bind(this, key, TableFieldType.ComparisonValue)} defaultValue={ item.comparisonValue && item.comparisonValue.content } type={qAnswerType} />;\n                                let followingOperatorOptions_: SelectOption[] = Object.keys(QAFollowingOperator).map((key) => ({ label: key, value: key === \"AND\" ? QAFollowingOperator.AND : key === \"OR\" ? QAFollowingOperator.OR : \"\" }));\n                                let followingOperatorSelect = <Select key={`literalfo-${key}-${item.literalId}`} styles={customStyles} options={followingOperatorOptions_} value={followingOperatorOptions_.find(r => r.value === item.followingOperator)} onChange={this.handleDataChange.bind(this, key, TableFieldType.FollowingOperator)} />;\n                                return <tr key={\"tr_\" + key}>\n                                    <td><Button type=\"button\" size=\"sm\" onClick={() => this.moveLiteralUp(key)}><FontAwesomeIcon icon={faArrowUp} /></Button></td>\n                                    <td>l<sub>{key}</sub></td>\n                                    <td className=\"questionRef\">{questionselect}</td>\n                                    <td className=\"comparisonOperator\">{comparisonOpSelect}</td>\n                                    <td className=\"comparisonValue\">{comparisonValueSelect}</td>\n                                    <td className=\"followingOperator\">{followingOperatorSelect}</td>\n                                    <td><Button size=\"sm\" onClick={() => { this.removeLiteral(key); }}> <FontAwesomeIcon icon={faWindowClose} /></Button></td>\n                                </tr>;\n                            })}\n                            <tr>\n                                <td><Button size=\"sm\" onClick={() => this.addLiteral()} type=\"button\">\n                                    <FontAwesomeIcon icon={faPlusSquare} />\n                                </Button></td>\n                                <td></td>\n                                <td></td>\n                                <td></td>\n                                <td></td>\n                                <td></td>\n                                <td></td>\n\n                            </tr>\n\n                        </tbody>\n                    </Table>\n                </Row>\n\n            </CardBody>\n        </Card>);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}