{"ast":null,"code":"import _slicedToArray from \"/Users/anujwagle/Desktop/temp/datapali-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/anujwagle/Desktop/temp/datapali-dashboard/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/SurveyForm.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { QAQuestion } from \"../form/question\";\nimport { Button as Button_B, Tree, ButtonGroup, Collapse } from \"@blueprintjs/core\";\nimport { DPFormItem } from \"./DPFormItem\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { Row, Badge } from \"reactstrap\";\nimport { Toolbar } from \"./Toolbar\";\nimport { testQuestion, testQuestion2, testQuestion3, testQuestion4, testQuestion5 } from \"../testData/TestQuestions\";\nimport _ from \"lodash\";\nexport class SurveyForm {\n  constructor() {\n    this.content = void 0;\n    this.id = void 0;\n    this.name = void 0;\n    this.id = getRandomId(\"sf-\");\n  }\n\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  setContent(content) {\n    this.content = content;\n    return this;\n  }\n\n  addContent(content) {\n    this.content.push(content);\n    return this;\n  }\n\n}\nexport class QuestionSection {\n  constructor() {\n    this.name = void 0;\n    this.content = void 0;\n    this.id = void 0;\n    this.id = getRandomId(\"ss-\");\n    this.content = [];\n  }\n\n  setID(id) {\n    this.id = id;\n    return this;\n  }\n\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  setContent(content) {\n    this.content = content;\n    return this;\n  }\n\n  addContent(content) {\n    this.content.push(content);\n    return this;\n  }\n\n  deleteContent(contentId) {\n    let found = this.content.findIndex(item => item.id === contentId);\n\n    if (found > -1) {\n      this.content.splice(found, 1);\n    }\n  }\n\n}\nconst TreeF = Tree.ofType();\nexport class SurveyForm_ extends React.Component {\n  static questionOrSectionFromPath(path, root) {\n    let el = root[path[0]];\n\n    if (path.length === 1) {\n      return el;\n    } else {\n      return SurveyForm_.questionOrSectionFromPath(path.slice(1), el.content);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeSection: this.props.form,\n      treeNodes: [convertToTreeNode(this.props.form)],\n      activeSectionPath: [0]\n    };\n  }\n\n  getNodeFromQuestionOrSection(item, sectionNumber) {\n    let def = {\n      id: item.id,\n      icon: undefined,\n      label: \"\"\n    };\n\n    if (item instanceof QAQuestion) {\n      def.icon = \"document\";\n      def.label = sectionNumber + \" \" + \"Question\";\n    } else if (item instanceof QuestionSection) {\n      def.icon = \"folder-close\";\n      def.label = sectionNumber + \" \" + (item.name || \"Section\");\n      def.childNodes = item.content.map((it, ind) => this.getNodeFromQuestionOrSection(it, sectionNumber + \".\" + (ind + 1)));\n    }\n\n    return def;\n  }\n\n  generateITNodeTree(form) {\n    let root = {\n      id: 0,\n      hasCaret: true,\n      icon: \"folder-close\",\n      label: form.name,\n      isExpanded: true,\n      childNodes: form.content.map((it, ind) => this.getNodeFromQuestionOrSection(it, (ind + 1).toString()))\n    };\n    return [root];\n  }\n\n  addSectionToNodeTree(_nodePath, section) {\n    let node = Tree.nodeFromPath(_nodePath, this.state.treeNodes);\n\n    if (node.childNodes) {\n      let readablePath = getReadablePath(this.state.activeSectionPath);\n      if (readablePath) readablePath += \".\";\n      node.childNodes.push(this.getNodeFromQuestionOrSection(section, readablePath + (node.childNodes.length + 1).toString()));\n    }\n\n    return this.state;\n  }\n\n  deleteNodeFromNodeTree(_nodePath, id) {\n    let node = Tree.nodeFromPath(_nodePath, this.state.treeNodes);\n\n    if (node.childNodes) {\n      let foundIndex = node.childNodes.findIndex(item => item.id === id);\n\n      if (foundIndex > -1) {\n        node.childNodes.splice(foundIndex, 1);\n      }\n    }\n\n    return this.state;\n  }\n\n  addQuestionToNodeTree(_nodePath, section) {\n    let node = Tree.nodeFromPath(_nodePath, this.state.treeNodes);\n\n    if (node.childNodes) {\n      let readablePath = getReadablePath(this.state.activeSectionPath);\n      if (readablePath) readablePath += \".\";\n      node.childNodes.push(this.getNodeFromQuestionOrSection(section, readablePath + (node.childNodes.length + 1).toString()));\n    }\n\n    return this.state;\n  } // handleChange(section: QuestionSection) {\n  //     this.setState((prevState: SurveyFormState) => {\n  //         return {\n  //             form: section,\n  //         }\n  //     }, () => {\n  //         if (this.props.onChange) this.props.onChange(this.state.form);\n  //     })\n  // }\n\n\n  handleAddSection() {\n    this.setState(prevState => {\n      let toAddin = Tree.nodeFromPath(prevState.activeSectionPath, prevState.treeNodes);\n      let newsection = new QuestionSection();\n      toAddIn.addContent(new QuestionSection());\n      this.addSectionToNodeTree(this.state.activeSectionPath, newsection);\n      return _objectSpread({}, this.state, {\n        form: cloned\n      });\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleAddQuestion() {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.form);\n\n      let toAddIn = SurveyForm_.questionOrSectionFromPath(this.state.activeSectionPath, [cloned]);\n\n      if (toAddIn instanceof QAQuestion) {\n        return {};\n      }\n\n      let q = new QAQuestion();\n      toAddIn.addContent(new QAQuestion());\n      this.addQuestionToNodeTree(this.state.activeSectionPath, q);\n      return _objectSpread({}, this.state, {\n        form: cloned\n      });\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleDeleteQuestionOrSection(deleteid) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.form);\n\n      cloned.deleteContent(deleteid);\n      this.deleteNodeFromNodeTree(this.state.activeSectionPath, deleteid);\n      return _objectSpread({}, this.state, {\n        form: cloned\n      });\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleToolbarItemClick(name) {\n    switch (name) {\n      case \"add-section\":\n        this.handleAddSection();\n        break;\n\n      case \"add-question\":\n        this.handleAddQuestion();\n        break;\n    }\n  }\n\n  handleQuestionUpdate(question) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.form);\n\n      let foundQ = cloned.content.find(item => item.id === question.id);\n\n      if (foundQ && foundQ instanceof QAQuestion) {\n        foundQ.updateFromQuestion(question);\n      }\n\n      return {\n        form: cloned\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  forEachNode(nodes, callback) {\n    if (nodes == null) {\n      return;\n    }\n\n    for (const node of nodes) {\n      callback(node);\n      if (node.childNodes) this.forEachNode(node.childNodes, callback);\n    }\n  }\n\n  handleFormTreeNodeExpand(nodeData) {\n    nodeData.isExpanded = true;\n    this.setState(this.state);\n  }\n\n  handleFormTreeNodeCollapse(nodeData) {\n    nodeData.isExpanded = false;\n    this.setState(this.state);\n  }\n\n  handleFormTreeNodeClick(nodeData, _nodePath, e) {\n    console.log(_nodePath);\n    const initiallySelected = !!nodeData.isSelected;\n\n    if (!e.shiftKey) {\n      this.forEachNode(this.state.treeNodes, n => n.isSelected = false);\n    }\n\n    nodeData.isSelected = !initiallySelected;\n    let item = SurveyForm_.questionOrSectionFromPath(_nodePath, [this.state.form]);\n\n    if (item instanceof QuestionSection) {\n      this.setState(prevState => {\n        return _objectSpread({}, this.state, {\n          activeSection: item instanceof QuestionSection ? item : prevState.activeSection,\n          activeSectionPath: _nodePath\n        });\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      handleItemClick: this.handleToolbarItemClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        background: \"transparent\"\n      },\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(TreeF, {\n      contents: this.state.treeNodes,\n      onNodeExpand: this.handleFormTreeNodeExpand.bind(this),\n      onNodeCollapse: this.handleFormTreeNodeCollapse.bind(this),\n      onNodeClick: this.handleFormTreeNodeClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(SectionC, {\n      handleDeleteChildSectionOrQuestion: this.handleDeleteQuestionOrSection.bind(this),\n      parentPath: this.state.activeSectionPath,\n      handleQuestionChange: this.handleQuestionUpdate.bind(this),\n      section: this.state.activeSection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    })), React.createElement(Row, {\n      style: {\n        position: \"fixed\",\n        height: \"60px\",\n        bottom: 0,\n        width: \"100%\",\n        margin: \"0 auto\"\n      },\n      className: \"fixed-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    })));\n  }\n\n}\nSurveyForm_.defaultProps = {\n  form: new QuestionSection().setContent([testQuestion, testQuestion2, testQuestion3, new QuestionSection().setContent([testQuestion4, testQuestion5]).setName(\"true things\")])\n};\n\nclass SectionC extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleQuestionChange(q) {\n    if (this.props.handleQuestionChange) this.props.handleQuestionChange(q);\n  }\n\n  render() {\n    let comp = null;\n    let readablePath = getReadablePath(this.props.parentPath);\n    if (readablePath) readablePath += \".\";\n    comp = this.props.section.content.map((item, index) => {\n      if (item instanceof QAQuestion) {\n        return React.createElement(QuestionButton, {\n          questionId: item.id,\n          handleDeletion: this.props.handleDeleteChildSectionOrQuestion,\n          path: readablePath + (index + 1),\n          key: item.id,\n          isExpanded: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 369\n          },\n          __self: this\n        }, React.createElement(DPFormItem, {\n          onChange: this.handleQuestionChange.bind(this),\n          question: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372\n          },\n          __self: this\n        }));\n      } else if (item instanceof QuestionSection) {\n        return React.createElement(SectionButton, {\n          handleDeletion: this.props.handleDeleteChildSectionOrQuestion,\n          sectionId: item.id,\n          path: readablePath + (index + 1),\n          key: item.id,\n          onClick: () => console.log(\"Sdf\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 376\n          },\n          __self: this\n        });\n      }\n    });\n    return React.createElement(ButtonGroup, {\n      fill: true,\n      vertical: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, comp);\n  }\n\n}\n\nconst QuestionButton = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isExpanded = _useState2[0],\n        setIsExpanded = _useState2[1];\n\n  return React.createElement(ButtonGroup, {\n    className: \"bp3-dark\",\n    style: {\n      paddingBottom: \"20px\"\n    },\n    fill: true,\n    vertical: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399\n    },\n    __self: this\n  }, React.createElement(ButtonGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400\n    },\n    __self: this\n  }, React.createElement(Button_B, {\n    style: {\n      height: 50\n    },\n    onClick: () => setIsExpanded(!isExpanded),\n    alignText: \"left\",\n    rightIcon: isExpanded ? \"chevron-up\" : \"chevron-down\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401\n    },\n    __self: this\n  }, React.createElement(Badge, {\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401\n    },\n    __self: this\n  }, \"Q\"), \" \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401\n    },\n    __self: this\n  }, props.path + \" Question\", \" \")), React.createElement(Button_B, {\n    onClick: () => props.handleDeletion(props.questionId),\n    style: {\n      height: 50,\n      width: 20\n    },\n    alignText: \"left\",\n    rightIcon: \"cross\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402\n    },\n    __self: this\n  })), React.createElement(Collapse, {\n    keepChildrenMounted: false,\n    isOpen: isExpanded,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404\n    },\n    __self: this\n  }, props.children));\n};\n\nconst SectionButton = props => {\n  return React.createElement(ButtonGroup, {\n    className: \"bp3-dark\",\n    style: {\n      paddingBottom: \"20px\"\n    },\n    fill: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420\n    },\n    __self: this\n  }, React.createElement(Button_B, {\n    style: {\n      height: 50\n    },\n    alignText: \"left\",\n    onClick: props.onClick,\n    rightIcon: \"folder-open\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421\n    },\n    __self: this\n  }, React.createElement(Badge, {\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421\n    },\n    __self: this\n  }, \"S\"), \" \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421\n    },\n    __self: this\n  }, props.path + \" Section\", \" \")), React.createElement(Button_B, {\n    onClick: () => props.handleDeletion(props.sectionId),\n    style: {\n      height: 50,\n      width: 20\n    },\n    alignText: \"left\",\n    rightIcon: \"cross\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422\n    },\n    __self: this\n  }));\n};\n\nfunction getReadablePath(nu) {\n  return nu.slice(1).map(item => item + 1).join(\".\");\n}\n\nfunction convertToTreeNode(q) {\n  let n = {\n    isExpanded: false,\n    isSelected: false,\n    id: q.id,\n    label: \"se\",\n    icon: q instanceof QuestionSection ? \"folder-close\" : \"document\",\n    nodeData: q\n  };\n\n  if (q instanceof QuestionSection) {\n    n.childNodes = q.content.map(item => convertToTreeNode(item));\n  }\n\n  return n;\n}","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/SurveyForm.tsx"],"names":["React","useState","QAQuestion","Button","Button_B","Tree","ButtonGroup","Collapse","DPFormItem","getRandomId","Row","Badge","Toolbar","testQuestion","testQuestion2","testQuestion3","testQuestion4","testQuestion5","_","SurveyForm","constructor","content","id","name","setName","setContent","addContent","push","QuestionSection","setID","deleteContent","contentId","found","findIndex","item","splice","TreeF","ofType","SurveyForm_","Component","questionOrSectionFromPath","path","root","el","length","slice","props","state","activeSection","form","treeNodes","convertToTreeNode","activeSectionPath","getNodeFromQuestionOrSection","sectionNumber","def","icon","undefined","label","childNodes","map","it","ind","generateITNodeTree","hasCaret","isExpanded","toString","addSectionToNodeTree","_nodePath","section","node","nodeFromPath","readablePath","getReadablePath","deleteNodeFromNodeTree","foundIndex","addQuestionToNodeTree","handleAddSection","setState","prevState","toAddin","newsection","toAddIn","cloned","onChange","handleAddQuestion","clone","q","handleDeleteQuestionOrSection","deleteid","handleToolbarItemClick","handleQuestionUpdate","question","foundQ","find","updateFromQuestion","forEachNode","nodes","callback","handleFormTreeNodeExpand","nodeData","handleFormTreeNodeCollapse","handleFormTreeNodeClick","e","console","log","initiallySelected","isSelected","shiftKey","n","render","bind","background","position","height","bottom","width","margin","defaultProps","SectionC","handleQuestionChange","comp","parentPath","index","handleDeleteChildSectionOrQuestion","QuestionButton","setIsExpanded","paddingBottom","handleDeletion","questionId","children","SectionButton","onClick","sectionId","nu","join"],"mappings":"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","sourcesContent":["import React, { ReactNode, useState } from \"react\";\nimport { QAQuestion } from \"../form/question\";\nimport { Classes, Button as Button_B, Icon, Intent, ITreeNode, Position, Tooltip, Tree, ButtonGroup, Collapse, IconName, Pre } from \"@blueprintjs/core\";\nimport { DPFormItem } from \"./DPFormItem\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { AnswerType, QAType } from \"../form/answer\";\nimport { Row, Col, Button, Label, Badge } from \"reactstrap\";\nimport { Toolbar } from \"./Toolbar\";\nimport { testQuestion, testQuestion2, testQuestion3, testQuestion4, testQuestion5 } from \"../testData/TestQuestions\";\nimport _ from \"lodash\";\n\nexport class SurveyForm {\n    content!: (QuestionSection | QAQuestion)[];\n    id: string;\n    name!: string;\n    constructor() {\n        this.id = getRandomId(\"sf-\");\n    }\n    setName(name: string) {\n        this.name = name;\n        return this;\n    }\n\n    setContent(content: (QuestionSection | QAQuestion)[]) {\n        this.content = content;\n        return this;\n    }\n\n    addContent(content: QAQuestion | QuestionSection) {\n        this.content.push(content);\n        return this;\n    }\n\n}\n\nexport class QuestionSection {\n    name!: string;\n    content!: (QuestionSection | QAQuestion)[]\n    id: string\n    constructor() {\n        this.id = getRandomId(\"ss-\");\n        this.content = []\n\n    }\n    setID(id: string) {\n        this.id = id;\n        return this;\n    }\n    setName(name: string) {\n        this.name = name;\n        return this;\n    }\n    setContent(content: (QuestionSection | QAQuestion)[]) {\n        this.content = content;\n        return this;\n    }\n\n    addContent(content: QuestionSection | QAQuestion) {\n        this.content.push(content);\n        return this;\n    }\n\n    deleteContent(contentId: string) {\n        let found = this.content.findIndex(item => item.id === contentId);\n        if (found > -1) {\n            this.content.splice(found, 1);\n        }\n    }\n}\n\ninterface SurveyFormState {\n    activeSection: QuestionSection,\n    activeSectionPath: number[]\n    treeNodes: ITreeNode<QuestionSection|QAQuestion>[],\n\n}\ninterface SurveyFormProps {\n    form: QuestionSection,\n    onChange: (form: QuestionSection) => void\n}\n\n\nconst TreeF = Tree.ofType<QuestionSection|QAQuestion>();\n\n\nexport class SurveyForm_ extends React.Component<SurveyFormProps, SurveyFormState>{\n    static defaultProps = {\n        form: new QuestionSection().setContent([testQuestion, testQuestion2, testQuestion3, new QuestionSection().setContent([testQuestion4, testQuestion5]).setName(\"true things\")]),\n    }\n    public static questionOrSectionFromPath(path: number[], root: (QuestionSection | QAQuestion)[]): QuestionSection | QAQuestion {\n        let el = root[path[0]];\n        if (path.length === 1) {\n            return el;\n        } else {\n            return SurveyForm_.questionOrSectionFromPath(path.slice(1), el.content);\n        }\n    }\n    constructor(props: SurveyFormProps) {\n        super(props);\n        this.state = {\n            activeSection: this.props.form,\n            treeNodes: [convertToTreeNode(this.props.form)],\n            activeSectionPath: [0]\n        }\n    }\n\n    getNodeFromQuestionOrSection(item: QuestionSection | QAQuestion, sectionNumber: string) {\n        let def: ITreeNode = {\n            id: item.id,\n            icon: undefined,\n            label: \"\",\n        };\n        if (item instanceof QAQuestion) {\n            def.icon = \"document\"\n            def.label = sectionNumber + \" \" + \"Question\";\n        }\n        else if (item instanceof QuestionSection) {\n            def.icon = \"folder-close\"\n            def.label = sectionNumber + \" \" + (item.name || \"Section\");\n            def.childNodes = item.content.map((it, ind) => this.getNodeFromQuestionOrSection(it, sectionNumber + \".\" + (ind + 1)))\n\n        }\n        return def;\n    }\n\n    generateITNodeTree(form: SurveyForm): ITreeNode[] {\n        let root: ITreeNode = {\n            id: 0,\n            hasCaret: true,\n            icon: \"folder-close\",\n            label: form.name,\n            isExpanded: true,\n            childNodes: form.content.map((it, ind) => this.getNodeFromQuestionOrSection(it, (ind + 1).toString()))\n        }\n        return [root];\n    }\n\n    addSectionToNodeTree(_nodePath: number[], section: QuestionSection) {\n        let node = Tree.nodeFromPath(_nodePath, this.state.treeNodes);\n        if (node.childNodes) {\n            let readablePath = getReadablePath(this.state.activeSectionPath);\n            if (readablePath) readablePath += \".\";\n            node.childNodes.push(this.getNodeFromQuestionOrSection(section, readablePath + (node.childNodes.length + 1).toString()))\n        }\n\n        return this.state;\n    }\n\n\n    deleteNodeFromNodeTree(_nodePath: number[], id: string) {\n        let node = Tree.nodeFromPath(_nodePath, this.state.treeNodes);\n        if (node.childNodes) {\n            let foundIndex = node.childNodes.findIndex(item => item.id === id);\n            if (foundIndex > -1) {\n                node.childNodes.splice(foundIndex, 1)\n            }\n        }\n        return this.state;\n    }\n\n    addQuestionToNodeTree(_nodePath: number[], section: QAQuestion) {\n        let node = Tree.nodeFromPath(_nodePath, this.state.treeNodes);\n        if (node.childNodes) {\n            let readablePath = getReadablePath(this.state.activeSectionPath);\n            if (readablePath) readablePath += \".\";\n            node.childNodes.push(this.getNodeFromQuestionOrSection(section, readablePath + (node.childNodes.length + 1).toString()))\n        }\n        return this.state;\n    }\n\n    // handleChange(section: QuestionSection) {\n    //     this.setState((prevState: SurveyFormState) => {\n    //         return {\n    //             form: section,\n    //         }\n    //     }, () => {\n    //         if (this.props.onChange) this.props.onChange(this.state.form);\n    //     })\n    // }\n\n    handleAddSection() {\n        this.setState((prevState: SurveyFormState) => {\n            let toAddin = Tree.nodeFromPath(prevState.activeSectionPath, prevState.treeNodes);\n          \n            let newsection = new QuestionSection();\n            toAddIn.addContent(new QuestionSection());\n            this.addSectionToNodeTree(this.state.activeSectionPath, newsection);\n            return {\n                ...this.state,\n                form: cloned\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n\n    handleAddQuestion() {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.form);\n            let toAddIn = SurveyForm_.questionOrSectionFromPath(this.state.activeSectionPath, [cloned]);\n            if (toAddIn instanceof QAQuestion) {\n                return {\n\n                }\n            }\n            let q = new QAQuestion();\n            toAddIn.addContent(new QAQuestion());\n\n            this.addQuestionToNodeTree(this.state.activeSectionPath, q)\n\n            return {\n                ...this.state,\n                form: cloned,\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n    handleDeleteQuestionOrSection(deleteid: string) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.form);\n            cloned.deleteContent(deleteid);\n\n            this.deleteNodeFromNodeTree(this.state.activeSectionPath, deleteid)\n\n            return {\n                ...this.state,\n                form: cloned,\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n\n    handleToolbarItemClick(name: string) {\n        switch (name) {\n            case \"add-section\":\n                this.handleAddSection()\n                break;\n            case \"add-question\":\n                this.handleAddQuestion();\n                break;\n        }\n    }\n\n    handleQuestionUpdate(question: QAQuestion) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.form);\n            let foundQ = cloned.content.find(item => item.id === question.id);\n            if (foundQ && foundQ instanceof QAQuestion) {\n                foundQ.updateFromQuestion(question);\n            }\n            return {\n                form: cloned\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n\n    private forEachNode(nodes: ITreeNode[], callback: (node: ITreeNode) => void) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            if (node.childNodes)\n                this.forEachNode(node.childNodes, callback);\n        }\n    }\n\n    handleFormTreeNodeExpand(nodeData: ITreeNode) {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n\n    }\n\n    handleFormTreeNodeCollapse(nodeData: ITreeNode) {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    }\n\n\n    handleFormTreeNodeClick(nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) {\n        console.log(_nodePath);\n        const initiallySelected = !!nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.treeNodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = !initiallySelected;\n        let item = SurveyForm_.questionOrSectionFromPath(_nodePath, [this.state.form]);\n        if (item instanceof QuestionSection) {\n            this.setState((prevState: SurveyFormState) => {\n\n                return {\n                    ...this.state,\n                    activeSection: item instanceof QuestionSection ? item : prevState.activeSection,\n                    activeSectionPath: _nodePath\n                }\n\n            })\n        }\n\n\n\n    }\n\n    render() {\n\n        return (\n            <Row>\n                <Toolbar handleItemClick={this.handleToolbarItemClick.bind(this)}></Toolbar>\n                <div className=\"container\">\n\n                    <div style={{ background: \"transparent\" }} className=\"sidebar\">\n                        <div className=\"sidebar-wrapper\">\n                            <TreeF contents = {this.state.treeNodes} onNodeExpand={this.handleFormTreeNodeExpand.bind(this)} onNodeCollapse={this.handleFormTreeNodeCollapse.bind(this)} onNodeClick={this.handleFormTreeNodeClick.bind(this)}  />\n                        </div>\n                    </div>\n                    <div className=\"content\">\n                        <SectionC handleDeleteChildSectionOrQuestion={this.handleDeleteQuestionOrSection.bind(this)} parentPath={this.state.activeSectionPath} handleQuestionChange={this.handleQuestionUpdate.bind(this)} section={this.state.activeSection} />\n                    </div>\n                    <Row style={{\n                        position: \"fixed\",\n                        height: \"60px\",\n                        bottom: 0,\n                        width: \"100%\",\n                        margin: \"0 auto\"\n                    }} className=\"fixed-footer\">\n\n\n\n                    </Row>\n                </div>\n            </Row>\n\n        )\n    }\n}\n\ninterface SectionCProps {\n    section: QuestionSection,\n    handleQuestionChange: (question: QAQuestion) => void,\n    parentPath: number[],\n    handleDeleteChildSectionOrQuestion: (deleteid: string) => void,\n}\ninterface SectionCState {\n}\nclass SectionC extends React.Component<SectionCProps, SectionCState>{\n    constructor(props: SectionCProps) {\n        super(props);\n        this.state = {\n        }\n    }\n\n    handleQuestionChange(q: QAQuestion) {\n        if (this.props.handleQuestionChange) this.props.handleQuestionChange(q);\n    }\n\n\n\n    render() {\n        let comp = null;\n        let readablePath = getReadablePath(this.props.parentPath);\n        if (readablePath) readablePath += \".\";\n        comp = this.props.section.content.map((item, index) => {\n            if (item instanceof QAQuestion) {\n                return <QuestionButton \n                questionId={item.id} \n                handleDeletion={this.props.handleDeleteChildSectionOrQuestion} path={readablePath + (index + 1)} key={item.id} isExpanded={false}>\n                    <DPFormItem onChange={this.handleQuestionChange.bind(this)} question={item} />\n                </QuestionButton>\n            }\n            else if (item instanceof QuestionSection) {\n                return <SectionButton handleDeletion={this.props.handleDeleteChildSectionOrQuestion} sectionId={item.id} path={readablePath + (index + 1)} key={item.id} onClick={() => console.log(\"Sdf\")}></SectionButton>\n            }\n        })\n        return (\n            <ButtonGroup fill vertical>\n                {comp}\n\n            </ButtonGroup>\n\n        )\n    }\n}\ninterface QuestionButtonProps {\n    questionId: string,\n    isExpanded: boolean,\n    children: ReactNode,\n    path?: string,\n    handleDeletion: (id: string) => void,\n}\n\nconst QuestionButton = (props: QuestionButtonProps) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n    return (\n        <ButtonGroup className=\"bp3-dark\" style={{ paddingBottom: \"20px\" }} fill vertical>\n            <ButtonGroup>\n                <Button_B style={{ height: 50 }} onClick={() => setIsExpanded(!isExpanded)} alignText={\"left\"} rightIcon={isExpanded ? \"chevron-up\" : \"chevron-down\"}><Badge color=\"secondary\">Q</Badge> <span>{props.path + \" Question\"} </span></Button_B>\n                <Button_B onClick={() => props.handleDeletion(props.questionId)} style={{ height: 50, width: 20 }} alignText=\"left\" rightIcon={\"cross\"} />\n            </ButtonGroup>\n            <Collapse keepChildrenMounted={false} isOpen={isExpanded}>\n                {props.children}\n            </Collapse>\n        </ButtonGroup>\n    )\n}\n\ninterface SectionButtonProps {\n    sectionId: string,\n    onClick: (e: React.MouseEvent) => void,\n    path?: string,\n    handleDeletion: (id: string) => void\n\n}\nconst SectionButton = (props: SectionButtonProps) => {\n    return (\n        <ButtonGroup className=\"bp3-dark\" style={{ paddingBottom: \"20px\" }} fill >\n            <Button_B style={{ height: 50 }} alignText=\"left\" onClick={props.onClick} rightIcon={\"folder-open\"}><Badge color=\"secondary\">S</Badge> <span>{props.path + \" Section\"} </span></Button_B>\n            <Button_B onClick={() => props.handleDeletion(props.sectionId)} style={{ height: 50, width: 20 }} alignText=\"left\"  rightIcon={\"cross\"} />\n\n        </ButtonGroup>\n    )\n}\n\n\n\n\nfunction getReadablePath(nu: number[]) {\n    return nu.slice(1).map(item => item + 1).join(\".\");\n\n}\n\nfunction convertToTreeNode(q:QuestionSection|QAQuestion){\n    let n: ITreeNode<QuestionSection|QAQuestion> = {\n        isExpanded: false,\n        isSelected: false,\n        id: q.id,\n        label: \"se\",\n        icon: q instanceof QuestionSection?\"folder-close\":\"document\",\n        nodeData: q,\n    }\n    if(q instanceof QuestionSection){\n        n.childNodes =   q.content.map(item=>convertToTreeNode(item));\n    }\n    return n;\n}"]},"metadata":{},"sourceType":"module"}