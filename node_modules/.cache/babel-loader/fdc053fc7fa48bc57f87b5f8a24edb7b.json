{"ast":null,"code":"var _jsxFileName = \"/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/CreateConditionModal.tsx\";\nimport React from \"react\";\nimport { Button, Row, ModalFooter, ModalBody } from \"reactstrap\";\nimport { QACondition } from \"../form/condition\";\nimport Modal from \"react-modal\";\nimport { CreateCondition } from \"./CreateCondition\";\nexport class CreateConditionModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.createCondition_ = void 0;\n\n    this.handleChange = data => {\n      this.setState({\n        errors: [],\n        literals: data\n      });\n    };\n\n    this.primaryButtonHandler = () => {\n      let newCondition = new QACondition().setLiterals(this.state.literals);\n      let isValid = QACondition.checkIfValid(newCondition);\n\n      if (!isValid) {\n        this.setState({\n          errors: [{\n            message: \"Condition is not valid!\"\n          }]\n        });\n        return;\n      }\n\n      if (this.props.onSubmit) {\n        this.props.onSubmit(this.state.literals);\n      }\n    };\n\n    this.secondaryButtonHandler = () => {\n      if (this.props.onCancel) {\n        this.props.onCancel(this.state.literals);\n      }\n    };\n\n    this.state = {\n      isOpen: this.props.isOpen,\n      literals: this.props.condition && this.props.condition.literals ? this.props.condition.literals : [],\n      errors: []\n    };\n    this.createCondition_ = React.createRef();\n  }\n\n  render() {\n    const customStyles = {\n      content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n        minHeight: \"400px\",\n        backgroundColor: \"#27293d\"\n      },\n      overlay: {\n        backgroundColor: \"rgba(0, 0, 0, 0.50)\"\n      }\n    };\n    return React.createElement(Modal, {\n      style: customStyles,\n      isOpen: this.props.isOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.props.isOpen && React.createElement(CreateCondition, {\n      definedQuestions: this.props.definedQuestions,\n      condition: this.props.condition ? this.props.condition : undefined,\n      ref: this.createCondition_,\n      onChange: data => this.handleChange(data),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btn-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.errors.map(item => item.message)))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.primaryButtonHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.secondaryButtonHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Cancel\")));\n  }\n\n}\nCreateConditionModal.defaultProps = {\n  isOpen: false,\n  condition: new QACondition()\n};","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/CreateConditionModal.tsx"],"names":["React","Button","Row","ModalFooter","ModalBody","QACondition","Modal","CreateCondition","CreateConditionModal","Component","constructor","props","createCondition_","handleChange","data","setState","errors","literals","primaryButtonHandler","newCondition","setLiterals","state","isValid","checkIfValid","message","onSubmit","secondaryButtonHandler","onCancel","isOpen","condition","createRef","render","customStyles","content","top","left","right","bottom","marginRight","transform","minHeight","backgroundColor","overlay","definedQuestions","undefined","map","item","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button, Row, ModalFooter, ModalBody } from \"reactstrap\";\nimport { QACondition } from \"../form/condition\";\nimport { ILiteral } from \"../form/answer\";\nimport Modal from \"react-modal\";\nimport { CreateCondition } from \"./CreateCondition\";\nimport { QAQuestion } from \"../form/question\";\n\n\n\ninterface CreateConditionModalState {\n    isOpen: boolean,\n    literals: ILiteral[],\n    errors: { message: string }[]\n}\n\ninterface CreateConditionModalProp {\n    isOpen: boolean\n    definedQuestions: {[key:string]: QAQuestion}\n    onSubmit?: (data: ILiteral[]) => void;\n    onCancel?: (data: ILiteral[]) => void;\n    condition?: QACondition\n}\n\n\nexport class CreateConditionModal extends React.Component<CreateConditionModalProp, CreateConditionModalState> {\n    createCondition_: React.RefObject<CreateCondition>;\n    static defaultProps = {\n        isOpen: false,\n        condition: new QACondition()\n    };\n\n    constructor(props: CreateConditionModalProp) {\n        super(props);\n        this.state = {\n            isOpen: this.props.isOpen,\n            literals: this.props.condition && this.props.condition.literals ? this.props.condition.literals : [],\n            errors: []\n        };\n        this.createCondition_ = React.createRef();\n    }\n    handleChange = (data: ILiteral[]) => {\n        this.setState({\n            errors: [],\n            literals: data\n        });\n    };\n    primaryButtonHandler = () => {\n        let newCondition = new QACondition().setLiterals(this.state.literals);\n        let isValid = QACondition.checkIfValid(newCondition);\n        if (!isValid) {\n            this.setState({\n                errors: [{ message: \"Condition is not valid!\" }]\n            });\n            return;\n        }\n        if (this.props.onSubmit) {\n            this.props.onSubmit(this.state.literals);\n        }\n    };\n    secondaryButtonHandler = () => {\n        if (this.props.onCancel) {\n            this.props.onCancel(this.state.literals);\n        }\n    };\n    render() {\n        const customStyles = {\n            content: {\n                top: '50%',\n                left: '50%',\n                right: 'auto',\n                bottom: 'auto',\n                marginRight: '-50%',\n                transform: 'translate(-50%, -50%)',\n                minHeight: \"400px\",\n                backgroundColor: \"#27293d\"\n            },\n            overlay: {\n                backgroundColor: \"rgba(0, 0, 0, 0.50)\"\n            }\n        };\n        return (<Modal style={customStyles} isOpen={this.props.isOpen}>\n            <ModalBody>\n\n                {this.props.isOpen && <CreateCondition definedQuestions = {this.props.definedQuestions} condition={this.props.condition ? this.props.condition : undefined} ref={this.createCondition_} onChange={(data) => this.handleChange(data)} />}\n                <Row>\n                    <div className=\"btn-danger\">{this.state.errors.map((item: { message: string }) => item.message)}</div>\n                </Row>\n            </ModalBody>\n\n            <ModalFooter>\n                <Button color=\"primary\" onClick={this.primaryButtonHandler}>Submit</Button>\n                <Button color=\"secondary\" onClick={this.secondaryButtonHandler}>Cancel</Button>\n            </ModalFooter>\n        </Modal>);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}