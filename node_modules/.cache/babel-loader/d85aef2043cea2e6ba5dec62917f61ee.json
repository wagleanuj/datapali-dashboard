{"ast":null,"code":"var _jsxFileName = \"/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/AutofillCondition.tsx\";\nimport React from \"react\";\nimport { Table, Button } from \"reactstrap\";\nimport { QACondition } from \"../form/condition\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { openModal, destroyModal } from \"../utils/util\";\nimport { CreateConditionModal } from \"./CreateConditionModal\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport _ from \"lodash\";\nimport { faKey, faPlusSquare, faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\nimport { ValInput } from \"./ValInput\";\nexport class AutofillCondition extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      aConditions: [],\n      isEnabled: true\n    };\n  }\n\n  editIfTrueFalseValue(type, index, value) {\n    this.setState(prevState => {\n      let found = this.props.options.optionGroupMap[value];\n\n      let newConditions = _.clone(prevState.aConditions);\n\n      let selected = newConditions[index];\n\n      if (type === \"true\") {\n        selected.ifTrue = found;\n      } else if (type === \"false\") {\n        selected.ifFalse = found;\n      }\n\n      return {\n        aConditions: newConditions\n      };\n    }, () => {\n      if (this.props.onChange) {\n        this.props.onChange({\n          isEnabled: this.state.isEnabled,\n          answerCondition: this.state.aConditions\n        });\n      }\n    });\n  }\n\n  openConditionModal(index) {\n    let condition = this.state.aConditions[index];\n    let el = React.createElement(CreateConditionModal, {\n      isOpen: true,\n      onSubmit: this.editCondition.bind(this, index),\n      onCancel: destroyModal.bind(this),\n      condition: condition.condition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    });\n    openModal(el);\n  }\n\n  addAutoFillCondition() {\n    this.setState(prevState => {\n      let newConditions = _.clone(prevState.aConditions);\n\n      newConditions.push({\n        condition: new QACondition(),\n        ifTrue: undefined,\n        ifFalse: undefined\n      });\n      return {\n        aConditions: newConditions\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange({\n        isEnabled: this.state.isEnabled,\n        answerCondition: this.state.aConditions\n      });\n    });\n  }\n\n  editCondition(index, data) {\n    let cloned = _.clone(this.state.aConditions);\n\n    let condition = cloned[index].condition;\n\n    if (!condition) {\n      cloned[index].condition = new QACondition();\n    }\n\n    cloned[index].condition.setLiterals(data);\n    this.setState({\n      aConditions: cloned\n    }, () => {\n      destroyModal();\n      if (this.props.onChange) this.props.onChange({\n        isEnabled: this.state.isEnabled,\n        answerCondition: this.state.aConditions\n      });\n    });\n  }\n\n  removeAutofillCondition(index) {\n    this.setState(prevState => {\n      let aConditions = _.clone(prevState.aConditions);\n\n      aConditions.splice(index, 1);\n      return {\n        aConditions: aConditions\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange({\n        isEnabled: this.state.isEnabled,\n        answerCondition: this.state.aConditions\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"custom-control custom-switch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      defaultChecked: this.state.isEnabled,\n      onChange: e => this.setState({\n        isEnabled: e.target.checked\n      }),\n      type: \"checkbox\",\n      className: \"form-check-input\",\n      id: \"customSwitch1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"custom-control-label\",\n      htmlFor: \"customSwitch1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Enabled\")), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Condition\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \" if True\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \" if False\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.state.aConditions.map((item, index) => {\n      let comparisonValueSelect = ifFalseOrTrue => React.createElement(ValInput, {\n        key: \"literalv-\".concat(getRandomId()),\n        onChange: data => this.editIfTrueFalseValue(ifFalseOrTrue, index, data.value),\n        options: this.props.options,\n        defaultValue: ifFalseOrTrue === \"true\" ? item.ifTrue : item.ifFalse,\n        type: this.props.answerType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      });\n\n      return React.createElement(\"tr\", {\n        key: \"af\".concat(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), \"``                                \", React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        onClick: () => this.openConditionModal(index),\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(FontAwesomeIcon, {\n        size: \"sm\",\n        icon: faKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, comparisonValueSelect(\"true\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, comparisonValueSelect(\"false\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Button, {\n        size: \"sm\",\n        onClick: () => {\n          this.removeAutofillCondition(index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \" \", React.createElement(FontAwesomeIcon, {\n        icon: faWindowClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }))));\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"sm\",\n      onClick: () => this.addAutoFillCondition(),\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faPlusSquare,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/AutofillCondition.tsx"],"names":["React","Table","Button","QACondition","FontAwesomeIcon","openModal","destroyModal","CreateConditionModal","getRandomId","_","faKey","faPlusSquare","faWindowClose","ValInput","AutofillCondition","Component","constructor","props","state","aConditions","isEnabled","editIfTrueFalseValue","type","index","value","setState","prevState","found","options","optionGroupMap","newConditions","clone","selected","ifTrue","ifFalse","onChange","answerCondition","openConditionModal","condition","el","editCondition","bind","addAutoFillCondition","push","undefined","data","cloned","setLiterals","removeAutofillCondition","splice","render","e","target","checked","map","item","comparisonValueSelect","ifFalseOrTrue","answerType"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Table, Button } from \"reactstrap\";\r\nimport { QACondition } from \"../form/condition\";\r\nimport {  QALiteral } from \"../form/answer\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { openModal, destroyModal } from \"../utils/util\";\r\nimport { CreateConditionModal } from \"./CreateConditionModal\";\r\nimport { getRandomId } from \"../utils/getRandomId\";\r\nimport _ from \"lodash\";\r\nimport { faKey, faPlusSquare, faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { QAAnswerCondition } from \"../form/question\";\r\nimport { QAValueType } from \"./AnswerType\";\r\nimport { ValInput } from \"./ValInput\";\r\nimport {  AnswerOptions } from \"./AnswerOptions\";\r\n\r\ninterface AutoAnswerProps {\r\n    onChange: Function,\r\n    options: AnswerOptions,\r\n    answerType: QAValueType\r\n}\r\ninterface AutoAnswerState {\r\n    aConditions: QAAnswerCondition[];\r\n    isEnabled: boolean,\r\n\r\n}\r\n\r\nexport class AutofillCondition extends React.Component<AutoAnswerProps, AutoAnswerState> {\r\n    constructor(props: AutoAnswerProps) {\r\n        super(props);\r\n        this.state = {\r\n            aConditions: [],\r\n            isEnabled: true\r\n        }\r\n    }\r\n\r\n    editIfTrueFalseValue(type: string, index: number, value: string) {\r\n        this.setState((prevState: AutoAnswerState) => {\r\n            let found = this.props.options.optionGroupMap[value];\r\n            let newConditions = _.clone(prevState.aConditions);\r\n            let selected = newConditions[index];\r\n            if (type === \"true\") {\r\n                selected.ifTrue = found\r\n\r\n            }\r\n            else if (type === \"false\") {\r\n                selected.ifFalse = found\r\n            }\r\n            return {\r\n                aConditions: newConditions\r\n            }\r\n        }, () => {\r\n            if (this.props.onChange) {\r\n                this.props.onChange({ isEnabled: this.state.isEnabled, answerCondition: this.state.aConditions })\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n    openConditionModal(index: number) {\r\n        let condition: QAAnswerCondition = this.state.aConditions[index];\r\n\r\n        let el = <CreateConditionModal\r\n            isOpen={true}\r\n            onSubmit={this.editCondition.bind(this, index)}\r\n            onCancel={destroyModal.bind(this)}\r\n            condition={condition.condition} />\r\n        openModal(el);\r\n    }\r\n\r\n    addAutoFillCondition() {\r\n        this.setState((prevState: AutoAnswerState) => {\r\n            let newConditions = _.clone(prevState.aConditions);\r\n            newConditions.push({\r\n                condition: new QACondition(),\r\n                ifTrue: undefined,\r\n                ifFalse: undefined\r\n            } as unknown as QAAnswerCondition)\r\n            return {\r\n                aConditions: newConditions\r\n            }\r\n        }, () => {\r\n            if (this.props.onChange)\r\n                this.props.onChange({ isEnabled: this.state.isEnabled, answerCondition: this.state.aConditions })\r\n        })\r\n    }\r\n\r\n    editCondition(index: number, data: QALiteral[]) {\r\n        let cloned = _.clone(this.state.aConditions);\r\n        let condition = cloned[index].condition;\r\n        if (!condition) {\r\n            cloned[index].condition = new QACondition();\r\n        }\r\n        cloned[index].condition.setLiterals(data);\r\n        this.setState({\r\n            aConditions: cloned\r\n        }, () => {\r\n            destroyModal();\r\n            if (this.props.onChange) this.props.onChange({ isEnabled: this.state.isEnabled, answerCondition: this.state.aConditions })\r\n\r\n        })\r\n    }\r\n\r\n    removeAutofillCondition(index: number) {\r\n        this.setState((prevState: AutoAnswerState) => {\r\n            let aConditions = _.clone(prevState.aConditions);\r\n            aConditions.splice(index, 1);\r\n            return {\r\n                aConditions: aConditions\r\n            }\r\n\r\n        }, () => {\r\n            if (this.props.onChange) this.props.onChange({ isEnabled: this.state.isEnabled, answerCondition: this.state.aConditions })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"custom-control custom-switch\">\r\n                    <input defaultChecked={this.state.isEnabled} onChange={e => this.setState({ isEnabled: e.target.checked })} type=\"checkbox\" className=\"form-check-input\" id=\"customSwitch1\" />\r\n                    <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Enabled</label>\r\n\r\n                </div>\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th>\r\n                            <th>Condition</th>\r\n                            <th> if True</th>\r\n                            <th> if False</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.aConditions.map((item: QAAnswerCondition, index: number) => {\r\n                   \r\n                            let comparisonValueSelect = (ifFalseOrTrue: string) => <ValInput\r\n                                key={`literalv-${getRandomId()}`}\r\n                                onChange={(data: {value:string}) => this.editIfTrueFalseValue(ifFalseOrTrue, index, data.value)}\r\n                                options={this.props.options}\r\n                                defaultValue={ifFalseOrTrue === \"true\" ? item.ifTrue : item.ifFalse}\r\n                                type={this.props.answerType} />\r\n\r\n                            return (<tr key={`af${index}`}>\r\n                                <td></td>\r\n``                                <td><Button type=\"button\" onClick={() => this.openConditionModal(index)}\r\n                                    size=\"sm\">\r\n                                    <FontAwesomeIcon size={\"sm\"} icon={faKey} /></Button>\r\n                                </td>\r\n                                <td>{comparisonValueSelect(\"true\")}</td>\r\n                                <td>{comparisonValueSelect(\"false\")}</td>\r\n                                <td><Button size=\"sm\" onClick={() => { this.removeAutofillCondition(index) }}> <FontAwesomeIcon icon={faWindowClose} /></Button></td>\r\n                            </tr>)\r\n                        })}\r\n                        <tr>\r\n                            <td ><Button size=\"sm\" onClick={() => this.addAutoFillCondition()} type=\"button\" >\r\n                                <FontAwesomeIcon icon={faPlusSquare} />\r\n                            </Button></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                        </tr>\r\n\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}