{"ast":null,"code":"var _jsxFileName = \"/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/SurveyForm.tsx\";\nimport React from \"react\";\nimport { QAQuestion } from \"../form/question\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { Row } from \"reactstrap\";\nimport { Toolbar } from \"./Toolbar\";\nimport { testQuestion, testQuestion2, testQuestion3, testQuestion4, testQuestion5 } from \"../testData/TestQuestions\";\nimport _ from \"lodash\";\nimport { SectionC } from \"./section\";\nimport { FormTree } from \"./formtree\";\nexport class QASurveyForm {\n  constructor() {\n    this.content = void 0;\n    this.id = void 0;\n    this.name = void 0;\n    this.id = getRandomId(\"sf-\");\n  }\n\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  setContent(content) {\n    this.content = content;\n    return this;\n  }\n\n  addContent(content) {\n    this.content.push(content);\n    return this;\n  }\n\n}\nexport class QuestionSection {\n  constructor() {\n    this.name = void 0;\n    this.content = void 0;\n    this.id = void 0;\n    this.duplicatingSettings = void 0;\n    this.id = getRandomId(\"ss-\");\n    this.content = [];\n  }\n\n  setID(id) {\n    this.id = id;\n    return this;\n  }\n\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  setContent(content) {\n    this.content = content;\n    return this;\n  }\n\n  addContent(content) {\n    this.content.push(content);\n    return this;\n  }\n\n  deleteContent(contentId) {\n    let found = this.content.findIndex(item => item.id === contentId);\n\n    if (found > -1) {\n      this.content.splice(found, 1);\n    }\n  }\n\n  setDuplicatingSettings(dupe) {\n    this.duplicatingSettings = dupe;\n    return this;\n  }\n\n}\nexport class SurveyForm extends React.Component {\n  static questionOrSectionFromPath(path, root) {\n    let el = root[path[0]];\n\n    if (path.length === 1) {\n      return el;\n    } else {\n      return SurveyForm.questionOrSectionFromPath(path.slice(1), el.content);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedNodes: [],\n      expandedNodes: [this.props.form.id],\n      form: this.props.form,\n      activeSection: this.props.form,\n      activeSectionPath: [0]\n    };\n  }\n\n  handleChange(section) {\n    this.setState(prevState => {\n      return {\n        form: section\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleAddSection() {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.form);\n\n      let toAddIn = SurveyForm.questionOrSectionFromPath(this.state.activeSectionPath, [cloned]);\n\n      if (toAddIn instanceof QuestionSection) {\n        toAddIn.addContent(new QuestionSection());\n      }\n\n      return {\n        form: cloned\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleAddQuestion() {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.form);\n\n      let toAddIn = SurveyForm.questionOrSectionFromPath(this.state.activeSectionPath, [cloned]);\n\n      if (toAddIn instanceof QuestionSection) {\n        toAddIn.addContent(new QAQuestion());\n      }\n\n      return {\n        form: cloned\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleDeleteQuestionOrSection(deleteid, path_) {\n    this.setState(prevState => {\n      let parent = path_.slice(0, path_.length - 1);\n\n      let cloned = _.clone(prevState.form);\n\n      let parentSection = SurveyForm.questionOrSectionFromPath(parent, [cloned]);\n\n      if (parentSection instanceof QuestionSection) {\n        parentSection.deleteContent(deleteid);\n      }\n\n      return {\n        form: cloned\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleToolbarItemClick(name) {\n    switch (name) {\n      case \"add-section\":\n        this.handleAddSection();\n        break;\n\n      case \"add-question\":\n        this.handleAddQuestion();\n        break;\n    }\n  }\n\n  handleQuestionUpdate(question, path) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.form);\n\n      let parent = path.slice(0, path.length - 1);\n      let parentSection = SurveyForm.questionOrSectionFromPath(parent, [cloned]);\n\n      if (parentSection instanceof QuestionSection) {\n        let foundQ = parentSection.content.find(item => item.id === question.id);\n\n        if (foundQ && foundQ instanceof QAQuestion) {\n          foundQ.updateFromQuestion(question);\n        }\n      }\n\n      return {\n        form: cloned\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  forEachNode(nodes, callback) {\n    if (nodes == null) {\n      return;\n    }\n\n    for (const node of nodes) {\n      callback(node);\n      if (node.childNodes) this.forEachNode(node.childNodes, callback);\n    }\n  }\n\n  handleFormTreeNodeExpand(nodeData, _nodePath, e) {\n    nodeData.isExpanded = true;\n    this.setState(prevState => {\n      let item = SurveyForm.questionOrSectionFromPath(_nodePath, [this.state.form]);\n\n      let expandedNodes = _.union([item.id], prevState.expandedNodes);\n\n      return {\n        expandedNodes: expandedNodes\n      };\n    });\n  }\n\n  handleFormTreeNodeCollapse(nodeData) {\n    this.setState(prevState => {\n      let expandedNodes = prevState.expandedNodes.filter(item => nodeData.id !== item);\n      return {\n        expandedNodes: expandedNodes\n      };\n    });\n  }\n\n  handleFormTreeNodeClick(nodeData, _nodePath, e) {\n    let item = SurveyForm.questionOrSectionFromPath(_nodePath, [this.state.form]);\n\n    if (item instanceof QuestionSection) {\n      this.setState(prevState => {\n        let expandedNodes = _.union([item.id], prevState.expandedNodes);\n\n        let selectedNodes = [item.id];\n        return {\n          selectedNodes: selectedNodes,\n          expandedNodes: expandedNodes,\n          activeSection: item instanceof QuestionSection ? item : prevState.activeSection,\n          activeSectionPath: _nodePath\n        };\n      });\n    } else {\n      this.setState(prevState => {\n        let parent = _nodePath.slice(0, _nodePath.length - 1);\n\n        let parentSection = SurveyForm.questionOrSectionFromPath(parent, [prevState.form]);\n        let selectedQuestion = SurveyForm.questionOrSectionFromPath(_nodePath, [prevState.form]);\n        let expandedNodes = prevState.expandedNodes;\n        let selectedNodes = [selectedQuestion.id];\n\n        if (parentSection instanceof QuestionSection) {\n          expandedNodes = _.union([parentSection.id], expandedNodes);\n          selectedNodes.push(parentSection.id);\n        }\n\n        return {\n          expandedNodes: expandedNodes,\n          selectedNodes: selectedNodes,\n          activeSection: parentSection instanceof QuestionSection ? parentSection : prevState.activeSection,\n          activeSectionPath: parent\n        };\n      });\n    }\n  }\n\n  handleSectionChange(id, path) {\n    this.setState(prevState => {\n      let section = SurveyForm.questionOrSectionFromPath(path, [prevState.form]);\n      let expandedNodes = prevState.expandedNodes;\n      let selectedNodes = [];\n\n      if (section instanceof QuestionSection) {\n        expandedNodes = _.union([section.id], expandedNodes);\n        selectedNodes.push(section.id);\n      }\n\n      return {\n        expandedNodes: expandedNodes,\n        selectedNodes: selectedNodes,\n        activeSection: section instanceof QuestionSection ? section : prevState.activeSection,\n        activeSectionPath: path\n      };\n    });\n  }\n\n  hanldeDuplicatingSectionSettingsChange(id, dupe) {\n    this.setState(prevState => {\n      let prev;\n    });\n  }\n\n  render() {\n    return React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      handleItemClick: this.handleToolbarItemClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        background: \"transparent\"\n      },\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(FormTree, {\n      expandedNodes: this.state.expandedNodes,\n      selectedNodes: this.state.selectedNodes,\n      handleNodeExpand: this.handleFormTreeNodeExpand.bind(this),\n      handleNodeCollapse: this.handleFormTreeNodeCollapse.bind(this),\n      handleNodeClick: this.handleFormTreeNodeClick.bind(this),\n      root: this.state.form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(SectionC, {\n      handleSectionDuplicatingSettingsChange: this.hanldeDuplicatingSectionSettingsChange.bind(this),\n      handleSectionClick: this.handleSectionChange.bind(this),\n      handleDeleteChildSectionOrQuestion: this.handleDeleteQuestionOrSection.bind(this),\n      parentPath: this.state.activeSectionPath,\n      handleQuestionChange: this.handleQuestionUpdate.bind(this),\n      section: this.state.activeSection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    })), React.createElement(Row, {\n      style: {\n        position: \"fixed\",\n        height: \"60px\",\n        bottom: 0,\n        width: \"100%\",\n        margin: \"0 auto\"\n      },\n      className: \"fixed-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    })));\n  }\n\n}\nSurveyForm.defaultProps = {\n  form: new QuestionSection().setContent([testQuestion, testQuestion2, testQuestion3, new QuestionSection().setContent([testQuestion4, testQuestion5]).setName(\"true things\")])\n};","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/SurveyForm.tsx"],"names":["React","QAQuestion","getRandomId","Row","Toolbar","testQuestion","testQuestion2","testQuestion3","testQuestion4","testQuestion5","_","SectionC","FormTree","QASurveyForm","constructor","content","id","name","setName","setContent","addContent","push","QuestionSection","duplicatingSettings","setID","deleteContent","contentId","found","findIndex","item","splice","setDuplicatingSettings","dupe","SurveyForm","Component","questionOrSectionFromPath","path","root","el","length","slice","props","state","selectedNodes","expandedNodes","form","activeSection","activeSectionPath","handleChange","section","setState","prevState","onChange","handleAddSection","cloned","clone","toAddIn","handleAddQuestion","handleDeleteQuestionOrSection","deleteid","path_","parent","parentSection","handleToolbarItemClick","handleQuestionUpdate","question","foundQ","find","updateFromQuestion","forEachNode","nodes","callback","node","childNodes","handleFormTreeNodeExpand","nodeData","_nodePath","e","isExpanded","union","handleFormTreeNodeCollapse","filter","handleFormTreeNodeClick","selectedQuestion","handleSectionChange","hanldeDuplicatingSectionSettingsChange","prev","render","bind","background","position","height","bottom","width","margin","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { QAQuestion } from \"../form/question\";\nimport { ITreeNode } from \"@blueprintjs/core\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { Row } from \"reactstrap\";\nimport { Toolbar } from \"./Toolbar\";\n\nimport { testQuestion, testQuestion2, testQuestion3, testQuestion4, testQuestion5 } from \"../testData/TestQuestions\";\nimport _ from \"lodash\";\nimport { SectionC } from \"./section\";\nimport { FormTree } from \"./formtree\";\nimport { QACondition } from \"../form/condition\";\nimport { DuplicateSettings, DupeSettings } from \"./duplicateSettings\";\n\nexport class QASurveyForm {\n    content!: (QuestionSection | QAQuestion)[];\n    id: string;\n    name!: string;\n    constructor() {\n        this.id = getRandomId(\"sf-\");\n    }\n    setName(name: string) {\n        this.name = name;\n        return this;\n    }\n\n    setContent(content: (QuestionSection | QAQuestion)[]) {\n        this.content = content;\n        return this;\n    }\n\n    addContent(content: QAQuestion | QuestionSection) {\n        this.content.push(content);\n        return this;\n    }\n\n}\n\nexport class QuestionSection {\n    name!: string;\n    content!: (QuestionSection | QAQuestion)[]\n    id: string\n    duplicatingSettings!: DupeSettings;\n    constructor() {\n        this.id = getRandomId(\"ss-\");\n        this.content = []\n\n    }\n    setID(id: string) {\n        this.id = id;\n        return this;\n    }\n    setName(name: string) {\n        this.name = name;\n        return this;\n    }\n    setContent(content: (QuestionSection | QAQuestion)[]) {\n        this.content = content;\n        return this;\n    }\n\n    addContent(content: QuestionSection | QAQuestion) {\n        this.content.push(content);\n        return this;\n    }\n\n    deleteContent(contentId: string) {\n        let found = this.content.findIndex(item => item.id === contentId);\n        if (found > -1) {\n            this.content.splice(found, 1);\n        }\n    }\n    setDuplicatingSettings(dupe: DupeSettings){\n        this.duplicatingSettings = dupe;\n        return this;\n    }\n}\n\ninterface SurveyFormState {\n    form: QuestionSection,\n    activeSection: QuestionSection,\n    activeSectionPath: number[]\n    selectedNodes: string[],\n    expandedNodes: string[],\n\n}\ninterface SurveyFormProps {\n    form: QuestionSection,\n    onChange: (form: QuestionSection) => void\n}\n\n\n\nexport class SurveyForm extends React.Component<SurveyFormProps, SurveyFormState>{\n    static defaultProps = {\n        form: new QuestionSection().setContent([testQuestion, testQuestion2, testQuestion3, new QuestionSection().setContent([testQuestion4, testQuestion5]).setName(\"true things\")]),\n    }\n    public static questionOrSectionFromPath(path: number[], root: (QuestionSection | QAQuestion)[]): QuestionSection | QAQuestion {\n        let el = root[path[0]];\n        if (path.length === 1) {\n            return el;\n        } else {\n            return SurveyForm.questionOrSectionFromPath(path.slice(1), el.content);\n        }\n    }\n    constructor(props: SurveyFormProps) {\n        super(props);\n        this.state = {\n            selectedNodes: [],\n            expandedNodes: [this.props.form.id],\n            form: this.props.form,\n            activeSection: this.props.form,\n            activeSectionPath: [0]\n        }\n    }\n\n    handleChange(section: QuestionSection) {\n        this.setState((prevState: SurveyFormState) => {\n            return {\n                form: section,\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n\n    handleAddSection() {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.form);\n            let toAddIn = SurveyForm.questionOrSectionFromPath(this.state.activeSectionPath, [cloned]);\n            if (toAddIn instanceof QuestionSection) {\n                toAddIn.addContent(new QuestionSection());\n            }\n            return {\n                form: cloned\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n\n    handleAddQuestion() {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.form);\n            let toAddIn = SurveyForm.questionOrSectionFromPath(this.state.activeSectionPath, [cloned]);\n            if (toAddIn instanceof QuestionSection) {\n                toAddIn.addContent(new QAQuestion());\n            }\n            return {\n                form: cloned,\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n    handleDeleteQuestionOrSection(deleteid: string, path_: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let parent = path_.slice(0, path_.length - 1);\n            let cloned = _.clone(prevState.form)\n            let parentSection = SurveyForm.questionOrSectionFromPath(parent, [cloned]);\n            if (parentSection instanceof QuestionSection) {\n                parentSection.deleteContent(deleteid);\n            }\n\n            return {\n                form: cloned,\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n\n    handleToolbarItemClick(name: string) {\n        switch (name) {\n            case \"add-section\":\n                this.handleAddSection()\n                break;\n            case \"add-question\":\n                this.handleAddQuestion();\n                break;\n        }\n    }\n\n    handleQuestionUpdate(question: QAQuestion, path: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.form);\n            let parent = path.slice(0, path.length - 1);\n            let parentSection = SurveyForm.questionOrSectionFromPath(parent, [cloned]);\n            if (parentSection instanceof QuestionSection) {\n                let foundQ = parentSection.content.find(item => item.id === question.id);\n                if (foundQ && foundQ instanceof QAQuestion) {\n                    foundQ.updateFromQuestion(question);\n                }\n            }\n\n            return {\n                form: cloned\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n\n    private forEachNode(nodes: ITreeNode[], callback: (node: ITreeNode) => void) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            if (node.childNodes)\n                this.forEachNode(node.childNodes, callback);\n        }\n    }\n\n    handleFormTreeNodeExpand(nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) {\n        nodeData.isExpanded = true;\n        this.setState((prevState: SurveyFormState) => {\n            let item = SurveyForm.questionOrSectionFromPath(_nodePath, [this.state.form]);\n            let expandedNodes = _.union([item.id], prevState.expandedNodes);\n            return {\n                expandedNodes: expandedNodes\n            }\n        })\n\n    }\n\n    handleFormTreeNodeCollapse(nodeData: ITreeNode) {\n        this.setState((prevState: SurveyFormState) => {\n            let expandedNodes = prevState.expandedNodes.filter((item => nodeData.id !== item));\n            return {\n                expandedNodes: expandedNodes\n            }\n        })\n    }\n\n\n    handleFormTreeNodeClick(nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) {\n        let item = SurveyForm.questionOrSectionFromPath(_nodePath, [this.state.form]);\n        if (item instanceof QuestionSection) {\n            this.setState((prevState: SurveyFormState) => {\n                let expandedNodes = _.union([item.id], prevState.expandedNodes);\n                let selectedNodes = [item.id];\n                return {\n                    selectedNodes: selectedNodes,\n                    expandedNodes: expandedNodes,\n                    activeSection: item instanceof QuestionSection ? item : prevState.activeSection,\n                    activeSectionPath: _nodePath\n                }\n\n            })\n        }\n        else {\n            this.setState((prevState: SurveyFormState) => {\n                let parent = _nodePath.slice(0, _nodePath.length - 1);\n                let parentSection = SurveyForm.questionOrSectionFromPath(parent, [prevState.form]);\n                let selectedQuestion = SurveyForm.questionOrSectionFromPath(_nodePath, [prevState.form]);\n                let expandedNodes = prevState.expandedNodes;\n                let selectedNodes = [selectedQuestion.id];\n                if (parentSection instanceof QuestionSection) {\n                    expandedNodes = _.union([parentSection.id], expandedNodes);\n                    selectedNodes.push(parentSection.id);\n                }\n\n                return {\n                    expandedNodes: expandedNodes,\n                    selectedNodes: selectedNodes,\n                    activeSection: parentSection instanceof QuestionSection ? parentSection : prevState.activeSection,\n                    activeSectionPath: parent\n                }\n\n\n            })\n        }\n    }\n\n    handleSectionChange(id: string, path: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let section = SurveyForm.questionOrSectionFromPath(path, [prevState.form]);\n            let expandedNodes = prevState.expandedNodes;\n            let selectedNodes = []\n            if (section instanceof QuestionSection) {\n                expandedNodes = _.union([section.id], expandedNodes);\n                selectedNodes.push(section.id);\n            }\n            return {\n                expandedNodes: expandedNodes,\n                selectedNodes: selectedNodes,\n                activeSection: section instanceof QuestionSection ? section : prevState.activeSection,\n                activeSectionPath: path\n            }\n        })\n    }\n    hanldeDuplicatingSectionSettingsChange(id:string, dupe: DupeSettings){\n        this.setState((prevState: SurveyFormState)=>{\n            let prev\n        })\n    }\n\n    render() {\n\n        return (\n            <Row>\n                <Toolbar handleItemClick={this.handleToolbarItemClick.bind(this)}></Toolbar>\n                <div className=\"container\">\n\n                    <div style={{ background: \"transparent\" }} className=\"sidebar\">\n                        <div className=\"sidebar-wrapper\">\n                            <FormTree\n                                expandedNodes={this.state.expandedNodes}\n                                selectedNodes={this.state.selectedNodes}\n                                handleNodeExpand={this.handleFormTreeNodeExpand.bind(this)}\n                                handleNodeCollapse={this.handleFormTreeNodeCollapse.bind(this)}\n                                handleNodeClick={this.handleFormTreeNodeClick.bind(this)} root={this.state.form} />\n                        </div>\n                    </div>\n                    <div className=\"content\">\n                        <SectionC\n                            handleSectionDuplicatingSettingsChange = {this.hanldeDuplicatingSectionSettingsChange.bind(this)}\n                            handleSectionClick={this.handleSectionChange.bind(this)}\n                            handleDeleteChildSectionOrQuestion={this.handleDeleteQuestionOrSection.bind(this)}\n                            parentPath={this.state.activeSectionPath}\n                            handleQuestionChange={this.handleQuestionUpdate.bind(this)}\n                            section={this.state.activeSection} />\n                    </div>\n                    <Row style={{\n                        position: \"fixed\",\n                        height: \"60px\",\n                        bottom: 0,\n                        width: \"100%\",\n                        margin: \"0 auto\"\n                    }} className=\"fixed-footer\">\n\n\n\n                    </Row>\n                </div>\n            </Row>\n\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}