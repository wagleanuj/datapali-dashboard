{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractPureComponent, Button, DISPLAYNAME_PREFIX, Divider, Utils } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport DayPicker from \"react-day-picker\";\nimport * as Classes from \"./common/classes\";\nimport * as DateUtils from \"./common/dateUtils\";\nimport * as Errors from \"./common/errors\";\nimport { DatePickerCaption } from \"./datePickerCaption\";\nimport { getDefaultMaxDate, getDefaultMinDate } from \"./datePickerCore\";\nimport { DatePickerNavbar } from \"./datePickerNavbar\";\nimport { TimePicker } from \"./timePicker\";\n\nvar DatePicker =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DatePicker, _super);\n\n  function DatePicker(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.ignoreNextMonthChange = false;\n\n    _this.disabledDays = function (day) {\n      return !DateUtils.isDayInRange(day, [_this.props.minDate, _this.props.maxDate]);\n    };\n\n    _this.getDisabledDaysModifier = function () {\n      var disabledDays = _this.props.dayPickerProps.disabledDays;\n      return Array.isArray(disabledDays) ? [_this.disabledDays].concat(disabledDays) : [_this.disabledDays, disabledDays];\n    };\n\n    _this.renderCaption = function (props) {\n      return React.createElement(DatePickerCaption, tslib_1.__assign({}, props, {\n        maxDate: _this.props.maxDate,\n        minDate: _this.props.minDate,\n        onDateChange: _this.handleMonthChange,\n        reverseMonthAndYearMenus: _this.props.reverseMonthAndYearMenus\n      }));\n    };\n\n    _this.renderNavbar = function (props) {\n      return React.createElement(DatePickerNavbar, tslib_1.__assign({}, props, {\n        maxDate: _this.props.maxDate,\n        minDate: _this.props.minDate\n      }));\n    };\n\n    _this.handleDayClick = function (day, modifiers, e) {\n      Utils.safeInvoke(_this.props.dayPickerProps.onDayClick, day, modifiers, e);\n\n      if (modifiers.disabled) {\n        return;\n      }\n\n      if (_this.props.value === undefined) {\n        // set now if uncontrolled, otherwise they'll be updated in `componentWillReceiveProps`\n        _this.setState({\n          displayMonth: day.getMonth(),\n          displayYear: day.getFullYear(),\n          selectedDay: day.getDate()\n        });\n      }\n\n      if (_this.state.value != null && _this.state.value.getMonth() !== day.getMonth()) {\n        _this.ignoreNextMonthChange = true;\n      } // allow toggling selected date by clicking it again (if prop enabled)\n\n\n      var newValue = _this.props.canClearSelection && modifiers.selected ? null : DateUtils.getDateTime(day, _this.state.value);\n\n      _this.updateValue(newValue, true);\n    };\n\n    _this.handleClearClick = function () {\n      return _this.updateValue(null, true);\n    };\n\n    _this.handleMonthChange = function (newDate) {\n      var date = _this.computeValidDateInSpecifiedMonthYear(newDate.getFullYear(), newDate.getMonth());\n\n      _this.setState({\n        displayMonth: date.getMonth(),\n        displayYear: date.getFullYear()\n      });\n\n      if (_this.state.value !== null) {\n        // if handleDayClick just got run (so this flag is set), then the\n        // user selected a date in a new month, so don't invoke onChange a\n        // second time\n        _this.updateValue(date, false, _this.ignoreNextMonthChange);\n\n        _this.ignoreNextMonthChange = false;\n      }\n\n      Utils.safeInvoke(_this.props.dayPickerProps.onMonthChange, date);\n    };\n\n    _this.handleTodayClick = function () {\n      var value = new Date();\n      var displayMonth = value.getMonth();\n      var displayYear = value.getFullYear();\n      var selectedDay = value.getDate();\n\n      _this.setState({\n        displayMonth: displayMonth,\n        displayYear: displayYear,\n        selectedDay: selectedDay\n      });\n\n      _this.updateValue(value, true);\n    };\n\n    _this.handleTimeChange = function (time) {\n      Utils.safeInvoke(_this.props.timePickerProps.onChange, time);\n      var value = _this.state.value;\n      var newValue = DateUtils.getDateTime(value != null ? value : new Date(), time);\n\n      _this.updateValue(newValue, true);\n    };\n\n    var value = getInitialValue(props);\n    var initialMonth = getInitialMonth(props, value);\n    _this.state = {\n      displayMonth: initialMonth.getMonth(),\n      displayYear: initialMonth.getFullYear(),\n      selectedDay: value == null ? null : value.getDate(),\n      value: value\n    };\n    return _this;\n  }\n\n  DatePicker.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        dayPickerProps = _a.dayPickerProps,\n        locale = _a.locale,\n        localeUtils = _a.localeUtils,\n        maxDate = _a.maxDate,\n        minDate = _a.minDate,\n        modifiers = _a.modifiers,\n        showActionsBar = _a.showActionsBar;\n    var _b = this.state,\n        displayMonth = _b.displayMonth,\n        displayYear = _b.displayYear;\n    return React.createElement(\"div\", {\n      className: classNames(Classes.DATEPICKER, className)\n    }, React.createElement(DayPicker, tslib_1.__assign({\n      showOutsideDays: true,\n      locale: locale,\n      localeUtils: localeUtils,\n      modifiers: modifiers\n    }, dayPickerProps, {\n      canChangeMonth: true,\n      captionElement: this.renderCaption,\n      navbarElement: this.renderNavbar,\n      disabledDays: this.getDisabledDaysModifier(),\n      fromMonth: minDate,\n      month: new Date(displayYear, displayMonth),\n      onDayClick: this.handleDayClick,\n      onMonthChange: this.handleMonthChange,\n      selectedDays: this.state.value,\n      toMonth: maxDate\n    })), this.maybeRenderTimePicker(), showActionsBar && this.renderOptionsBar());\n  };\n\n  DatePicker.prototype.componentWillReceiveProps = function (nextProps) {\n    _super.prototype.componentWillReceiveProps.call(this, nextProps);\n\n    var value = nextProps.value;\n\n    if (value === this.props.value) {\n      // no action needed\n      return;\n    } else if (value == null) {\n      // clear the value\n      this.setState({\n        value: value\n      });\n    } else {\n      this.setState({\n        displayMonth: value.getMonth(),\n        displayYear: value.getFullYear(),\n        selectedDay: value.getDate(),\n        value: value\n      });\n    }\n  };\n\n  DatePicker.prototype.validateProps = function (props) {\n    var defaultValue = props.defaultValue,\n        initialMonth = props.initialMonth,\n        maxDate = props.maxDate,\n        minDate = props.minDate,\n        value = props.value;\n\n    if (defaultValue != null && !DateUtils.isDayInRange(defaultValue, [minDate, maxDate])) {\n      throw new Error(Errors.DATEPICKER_DEFAULT_VALUE_INVALID);\n    }\n\n    if (initialMonth != null && !DateUtils.isMonthInRange(initialMonth, [minDate, maxDate])) {\n      throw new Error(Errors.DATEPICKER_INITIAL_MONTH_INVALID);\n    }\n\n    if (maxDate != null && minDate != null && maxDate < minDate && !DateUtils.areSameDay(maxDate, minDate)) {\n      throw new Error(Errors.DATEPICKER_MAX_DATE_INVALID);\n    }\n\n    if (value != null && !DateUtils.isDayInRange(value, [minDate, maxDate])) {\n      throw new Error(Errors.DATEPICKER_VALUE_INVALID);\n    }\n  };\n\n  DatePicker.prototype.renderOptionsBar = function () {\n    var _a = this.props,\n        clearButtonText = _a.clearButtonText,\n        todayButtonText = _a.todayButtonText;\n    return [React.createElement(Divider, {\n      key: \"div\"\n    }), React.createElement(\"div\", {\n      className: Classes.DATEPICKER_FOOTER,\n      key: \"footer\"\n    }, React.createElement(Button, {\n      minimal: true,\n      onClick: this.handleTodayClick,\n      text: todayButtonText\n    }), React.createElement(Button, {\n      minimal: true,\n      onClick: this.handleClearClick,\n      text: clearButtonText\n    }))];\n  };\n\n  DatePicker.prototype.maybeRenderTimePicker = function () {\n    var _a = this.props,\n        timePrecision = _a.timePrecision,\n        timePickerProps = _a.timePickerProps;\n\n    if (timePrecision == null && timePickerProps === DatePicker.defaultProps.timePickerProps) {\n      return null;\n    }\n\n    return React.createElement(TimePicker, tslib_1.__assign({\n      precision: timePrecision\n    }, timePickerProps, {\n      onChange: this.handleTimeChange,\n      value: this.state.value\n    }));\n  };\n\n  DatePicker.prototype.computeValidDateInSpecifiedMonthYear = function (displayYear, displayMonth) {\n    var _a = this.props,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate;\n    var selectedDay = this.state.selectedDay; // month is 0-based, date is 1-based. date 0 is last day of previous month.\n\n    var maxDaysInMonth = new Date(displayYear, displayMonth + 1, 0).getDate();\n    var displayDate = selectedDay == null ? 1 : Math.min(selectedDay, maxDaysInMonth); // 12:00 matches the underlying react-day-picker timestamp behavior\n\n    var value = DateUtils.getDateTime(new Date(displayYear, displayMonth, displayDate, 12), this.state.value); // clamp between min and max dates\n\n    if (value < minDate) {\n      return minDate;\n    } else if (value > maxDate) {\n      return maxDate;\n    }\n\n    return value;\n  };\n  /**\n   * Update `value` by invoking `onChange` (always) and setting state (if uncontrolled).\n   */\n\n\n  DatePicker.prototype.updateValue = function (value, isUserChange, skipOnChange) {\n    if (skipOnChange === void 0) {\n      skipOnChange = false;\n    }\n\n    if (!skipOnChange) {\n      Utils.safeInvoke(this.props.onChange, value, isUserChange);\n    }\n\n    if (this.props.value === undefined) {\n      this.setState({\n        value: value\n      });\n    }\n  };\n\n  DatePicker.defaultProps = {\n    canClearSelection: true,\n    clearButtonText: \"Clear\",\n    dayPickerProps: {},\n    maxDate: getDefaultMaxDate(),\n    minDate: getDefaultMinDate(),\n    reverseMonthAndYearMenus: false,\n    showActionsBar: false,\n    timePickerProps: {},\n    todayButtonText: \"Today\"\n  };\n  DatePicker.displayName = DISPLAYNAME_PREFIX + \".DatePicker\";\n  return DatePicker;\n}(AbstractPureComponent);\n\nexport { DatePicker };\n\nfunction getInitialValue(props) {\n  // !== because `null` is a valid value (no date)\n  if (props.value !== undefined) {\n    return props.value;\n  }\n\n  if (props.defaultValue !== undefined) {\n    return props.defaultValue;\n  }\n\n  return null;\n}\n\nfunction getInitialMonth(props, value) {\n  var today = new Date(); // != because we must have a real `Date` to begin the calendar on.\n\n  if (props.initialMonth != null) {\n    return props.initialMonth;\n  } else if (value != null) {\n    return value;\n  } else if (DateUtils.isDayInRange(today, [props.minDate, props.maxDate])) {\n    return today;\n  } else {\n    return DateUtils.getDateBetween([props.minDate, props.maxDate]);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}