{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent } from \"../../common/abstractPureComponent\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { getPositionIgnoreAngles, isPositionHorizontal } from \"../../common/position\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { Button } from \"../button/buttons\";\nimport { H4 } from \"../html/html\";\nimport { Icon } from \"../icon/icon\";\nimport { Overlay } from \"../overlay/overlay\";\n\nvar Drawer =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Drawer, _super);\n\n  function Drawer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Drawer.prototype.render = function () {\n    var _a, _b;\n\n    var _c = this.props,\n        size = _c.size,\n        style = _c.style,\n        position = _c.position,\n        vertical = _c.vertical;\n    var realPosition = position ? getPositionIgnoreAngles(position) : null;\n    var classes = classNames(Classes.DRAWER, (_a = {}, _a[Classes.VERTICAL] = !realPosition && vertical, _a[realPosition ? Classes.positionClass(realPosition) : \"\"] = true, _a), this.props.className);\n    var styleProp = size == null ? style : tslib_1.__assign({}, style, (_b = {}, _b[(realPosition ? isPositionHorizontal(realPosition) : vertical) ? \"height\" : \"width\"] = size, _b));\n    return React.createElement(Overlay, tslib_1.__assign({}, this.props, {\n      className: Classes.OVERLAY_CONTAINER\n    }), React.createElement(\"div\", {\n      className: classes,\n      style: styleProp\n    }, this.maybeRenderHeader(), this.props.children));\n  };\n\n  Drawer.prototype.validateProps = function (props) {\n    if (props.title == null) {\n      if (props.icon != null) {\n        console.warn(Errors.DIALOG_WARN_NO_HEADER_ICON);\n      }\n\n      if (props.isCloseButtonShown != null) {\n        console.warn(Errors.DIALOG_WARN_NO_HEADER_CLOSE_BUTTON);\n      }\n    }\n\n    if (props.position != null) {\n      if (props.vertical) {\n        console.warn(Errors.DRAWER_VERTICAL_IS_IGNORED);\n      }\n\n      if (props.position !== getPositionIgnoreAngles(props.position)) {\n        console.warn(Errors.DRAWER_ANGLE_POSITIONS_ARE_CASTED);\n      }\n    }\n  };\n\n  Drawer.prototype.maybeRenderCloseButton = function () {\n    // `isCloseButtonShown` can't be defaulted through default props because of props validation\n    // so this check actually defaults it to true (fails only if directly set to false)\n    if (this.props.isCloseButtonShown !== false) {\n      return React.createElement(Button, {\n        \"aria-label\": \"Close\",\n        className: Classes.DIALOG_CLOSE_BUTTON,\n        icon: React.createElement(Icon, {\n          icon: \"small-cross\",\n          iconSize: Icon.SIZE_LARGE\n        }),\n        minimal: true,\n        onClick: this.props.onClose\n      });\n    } else {\n      return null;\n    }\n  };\n\n  Drawer.prototype.maybeRenderHeader = function () {\n    var _a = this.props,\n        icon = _a.icon,\n        title = _a.title;\n\n    if (title == null) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: Classes.DRAWER_HEADER\n    }, React.createElement(Icon, {\n      icon: icon,\n      iconSize: Icon.SIZE_LARGE\n    }), React.createElement(H4, null, title), this.maybeRenderCloseButton());\n  };\n\n  Drawer.displayName = DISPLAYNAME_PREFIX + \".Drawer\";\n  Drawer.defaultProps = {\n    canOutsideClickClose: true,\n    isOpen: false,\n    position: null,\n    style: {},\n    vertical: false\n  };\n  Drawer.SIZE_SMALL = \"360px\";\n  Drawer.SIZE_STANDARD = \"50%\";\n  Drawer.SIZE_LARGE = \"90%\";\n  return Drawer;\n}(AbstractPureComponent);\n\nexport { Drawer };","map":null,"metadata":{},"sourceType":"module"}