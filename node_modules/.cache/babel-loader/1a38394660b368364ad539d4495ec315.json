{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes, DISPLAYNAME_PREFIX, Utils } from \"../../common\";\nimport { isReactNodeEmpty } from \"../../common/utils\";\nimport { Icon } from \"../icon/icon\";\nimport { Text } from \"../text/text\";\n\nvar Tag =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Tag, _super);\n\n  function Tag() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onRemoveClick = function (e) {\n      Utils.safeInvoke(_this.props.onRemove, e, _this.props);\n    };\n\n    return _this;\n  }\n\n  Tag.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        active = _b.active,\n        children = _b.children,\n        className = _b.className,\n        fill = _b.fill,\n        icon = _b.icon,\n        intent = _b.intent,\n        interactive = _b.interactive,\n        large = _b.large,\n        minimal = _b.minimal,\n        multiline = _b.multiline,\n        onRemove = _b.onRemove,\n        rightIcon = _b.rightIcon,\n        round = _b.round,\n        _c = _b.tabIndex,\n        tabIndex = _c === void 0 ? 0 : _c,\n        htmlProps = tslib_1.__rest(_b, [\"active\", \"children\", \"className\", \"fill\", \"icon\", \"intent\", \"interactive\", \"large\", \"minimal\", \"multiline\", \"onRemove\", \"rightIcon\", \"round\", \"tabIndex\"]);\n\n    var isRemovable = Utils.isFunction(onRemove);\n    var tagClasses = classNames(Classes.TAG, Classes.intentClass(intent), (_a = {}, _a[Classes.ACTIVE] = active, _a[Classes.FILL] = fill, _a[Classes.INTERACTIVE] = interactive, _a[Classes.LARGE] = large, _a[Classes.MINIMAL] = minimal, _a[Classes.ROUND] = round, _a), className);\n    var isLarge = large || tagClasses.indexOf(Classes.LARGE) >= 0;\n    var removeButton = isRemovable ? React.createElement(\"button\", {\n      type: \"button\",\n      className: Classes.TAG_REMOVE,\n      onClick: this.onRemoveClick\n    }, React.createElement(Icon, {\n      icon: \"small-cross\",\n      iconSize: isLarge ? Icon.SIZE_LARGE : Icon.SIZE_STANDARD\n    })) : null;\n    return React.createElement(\"span\", tslib_1.__assign({}, htmlProps, {\n      className: tagClasses,\n      tabIndex: interactive ? tabIndex : undefined\n    }), React.createElement(Icon, {\n      icon: icon\n    }), !isReactNodeEmpty(children) && React.createElement(Text, {\n      className: Classes.FILL,\n      ellipsize: !multiline,\n      tagName: \"span\"\n    }, children), React.createElement(Icon, {\n      icon: rightIcon\n    }), removeButton);\n  };\n\n  Tag.displayName = DISPLAYNAME_PREFIX + \".Tag\";\n  return Tag;\n}(React.PureComponent);\n\nexport { Tag };","map":null,"metadata":{},"sourceType":"module"}