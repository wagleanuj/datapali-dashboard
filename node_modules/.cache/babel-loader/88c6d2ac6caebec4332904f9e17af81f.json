{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { safeInvoke } from \"../../common/utils\";\nimport { Collapse } from \"../collapse/collapse\";\nimport { Icon } from \"../icon/icon\";\n\nvar TreeNode =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TreeNode, _super);\n\n  function TreeNode() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleCaretClick = function (e) {\n      e.stopPropagation();\n      var _a = _this.props,\n          isExpanded = _a.isExpanded,\n          onCollapse = _a.onCollapse,\n          onExpand = _a.onExpand;\n      safeInvoke(isExpanded ? onCollapse : onExpand, _this, e);\n    };\n\n    _this.handleClick = function (e) {\n      safeInvoke(_this.props.onClick, _this, e);\n    };\n\n    _this.handleContentRef = function (element) {\n      safeInvoke(_this.props.contentRef, _this, element);\n    };\n\n    _this.handleContextMenu = function (e) {\n      safeInvoke(_this.props.onContextMenu, _this, e);\n    };\n\n    _this.handleDoubleClick = function (e) {\n      safeInvoke(_this.props.onDoubleClick, _this, e);\n    };\n\n    _this.handleMouseEnter = function (e) {\n      safeInvoke(_this.props.onMouseEnter, _this, e);\n    };\n\n    _this.handleMouseLeave = function (e) {\n      safeInvoke(_this.props.onMouseLeave, _this, e);\n    };\n\n    return _this;\n  }\n\n  TreeNode.ofType = function () {\n    return TreeNode;\n  };\n\n  TreeNode.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        children = _b.children,\n        className = _b.className,\n        disabled = _b.disabled,\n        icon = _b.icon,\n        isExpanded = _b.isExpanded,\n        isSelected = _b.isSelected,\n        label = _b.label;\n    var classes = classNames(Classes.TREE_NODE, (_a = {}, _a[Classes.DISABLED] = disabled, _a[Classes.TREE_NODE_SELECTED] = isSelected, _a[Classes.TREE_NODE_EXPANDED] = isExpanded, _a), className);\n    var contentClasses = classNames(Classes.TREE_NODE_CONTENT, Classes.TREE_NODE_CONTENT + \"-\" + this.props.depth);\n    var eventHandlers = disabled === true ? {} : {\n      onClick: this.handleClick,\n      onContextMenu: this.handleContextMenu,\n      onDoubleClick: this.handleDoubleClick,\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave\n    };\n    return React.createElement(\"li\", {\n      className: classes\n    }, React.createElement(\"div\", tslib_1.__assign({\n      className: contentClasses,\n      ref: this.handleContentRef\n    }, eventHandlers), this.maybeRenderCaret(), React.createElement(Icon, {\n      className: Classes.TREE_NODE_ICON,\n      icon: icon\n    }), React.createElement(\"span\", {\n      className: Classes.TREE_NODE_LABEL\n    }, label), this.maybeRenderSecondaryLabel()), React.createElement(Collapse, {\n      isOpen: isExpanded\n    }, children));\n  };\n\n  TreeNode.prototype.maybeRenderCaret = function () {\n    var _a = this.props,\n        children = _a.children,\n        isExpanded = _a.isExpanded,\n        disabled = _a.disabled,\n        _b = _a.hasCaret,\n        hasCaret = _b === void 0 ? React.Children.count(children) > 0 : _b;\n\n    if (hasCaret) {\n      var caretClasses = classNames(Classes.TREE_NODE_CARET, isExpanded ? Classes.TREE_NODE_CARET_OPEN : Classes.TREE_NODE_CARET_CLOSED);\n      var onClick = disabled === true ? undefined : this.handleCaretClick;\n      return React.createElement(Icon, {\n        className: caretClasses,\n        onClick: onClick,\n        icon: \"chevron-right\"\n      });\n    }\n\n    return React.createElement(\"span\", {\n      className: Classes.TREE_NODE_CARET_NONE\n    });\n  };\n\n  TreeNode.prototype.maybeRenderSecondaryLabel = function () {\n    if (this.props.secondaryLabel != null) {\n      return React.createElement(\"span\", {\n        className: Classes.TREE_NODE_SECONDARY_LABEL\n      }, this.props.secondaryLabel);\n    } else {\n      return undefined;\n    }\n  };\n\n  TreeNode.displayName = DISPLAYNAME_PREFIX + \".TreeNode\";\n  return TreeNode;\n}(React.Component);\n\nexport { TreeNode };","map":null,"metadata":{},"sourceType":"module"}