{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { AbstractPureComponent } from \"../../common/abstractPureComponent\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { safeInvoke } from \"../../common/utils\";\nimport { PanelView } from \"./panelView\";\n\nvar PanelStack =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PanelStack, _super);\n\n  function PanelStack() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      direction: \"push\",\n      stack: _this.props.stack != null ? _this.props.stack.slice().reverse() : [_this.props.initialPanel]\n    };\n\n    _this.handlePanelClose = function (panel) {\n      var stack = _this.state.stack; // only remove this panel if it is at the top and not the only one.\n\n      if (stack[0] !== panel || stack.length <= 1) {\n        return;\n      }\n\n      safeInvoke(_this.props.onClose, panel);\n\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"pop\",\n            stack: state.stack.filter(function (p) {\n              return p !== panel;\n            })\n          };\n        });\n      }\n    };\n\n    _this.handlePanelOpen = function (panel) {\n      safeInvoke(_this.props.onOpen, panel);\n\n      if (_this.props.stack == null) {\n        _this.setState(function (state) {\n          return {\n            direction: \"push\",\n            stack: [panel].concat(state.stack)\n          };\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  PanelStack.prototype.componentWillReceiveProps = function (nextProps) {\n    if (this.props.stack !== nextProps.stack && this.props.stack != null && nextProps.stack != null) {\n      this.setState({\n        direction: this.props.stack.length - nextProps.stack.length < 0 ? \"push\" : \"pop\",\n        stack: nextProps.stack.slice().reverse()\n      });\n    }\n  };\n\n  PanelStack.prototype.render = function () {\n    var classes = classNames(Classes.PANEL_STACK, Classes.PANEL_STACK + \"-\" + this.state.direction, this.props.className);\n    return React.createElement(TransitionGroup, {\n      className: classes,\n      component: \"div\"\n    }, this.renderCurrentPanel());\n  };\n\n  PanelStack.prototype.validateProps = function (props) {\n    if (props.initialPanel == null && props.stack == null || props.initialPanel != null && props.stack != null) {\n      throw new Error(Errors.PANEL_STACK_INITIAL_PANEL_STACK_MUTEX);\n    }\n\n    if (props.stack != null && props.stack.length === 0) {\n      throw new Error(Errors.PANEL_STACK_REQUIRES_PANEL);\n    }\n  };\n\n  PanelStack.prototype.renderCurrentPanel = function () {\n    var _a = this.props.showPanelHeader,\n        showPanelHeader = _a === void 0 ? true : _a;\n    var stack = this.state.stack;\n\n    if (stack.length === 0) {\n      return null;\n    }\n\n    var activePanel = stack[0],\n        previousPanel = stack[1];\n    return React.createElement(CSSTransition, {\n      classNames: Classes.PANEL_STACK,\n      key: stack.length,\n      timeout: 400\n    }, React.createElement(PanelView, {\n      onClose: this.handlePanelClose,\n      onOpen: this.handlePanelOpen,\n      panel: activePanel,\n      previousPanel: previousPanel,\n      showHeader: showPanelHeader\n    }));\n  };\n\n  return PanelStack;\n}(AbstractPureComponent);\n\nexport { PanelStack };","map":null,"metadata":{},"sourceType":"module"}