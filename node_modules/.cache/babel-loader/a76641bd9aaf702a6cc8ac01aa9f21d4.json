{"ast":null,"code":"var _jsxFileName = \"/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/SurveyForm.tsx\";\nimport React from \"react\";\nimport { QAQuestion } from \"../form/question\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { Row } from \"reactstrap\";\nimport { Toolbar } from \"./Toolbar\";\nimport { testQuestion, testQuestion2, testQuestion3, testQuestion4, testQuestion5 } from \"../testData/TestQuestions\";\nimport _ from \"lodash\";\nimport { SectionC, RootSection } from \"./section\";\nimport { FormTree } from \"./formtree\";\nexport class QASurveyForm {\n  constructor() {\n    this.content = void 0;\n    this.id = void 0;\n    this.name = void 0;\n    this.id = getRandomId(\"sf-\");\n  }\n\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  setContent(content) {\n    this.content = content;\n    return this;\n  }\n\n  addContent(content) {\n    this.content.push(content);\n    return this;\n  }\n\n}\nexport class QuestionSection {\n  constructor() {\n    this.name = void 0;\n    this.content = void 0;\n    this.id = void 0;\n    this.duplicatingSettings = void 0;\n    this.id = getRandomId(\"ss-\");\n    this.duplicatingSettings = {\n      condition: undefined,\n      enabled: false,\n      duplicateTimes: {\n        value: \"\",\n        type: \"number\"\n      }\n    };\n    this.content = [];\n  }\n\n  setID(id) {\n    this.id = id;\n    return this;\n  }\n\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  setContent(content) {\n    this.content = content;\n    return this;\n  }\n\n  addContent(content) {\n    this.content.push(content);\n    return this;\n  }\n\n  deleteContent(contentId) {\n    let found = this.content.findIndex(item => item.id === contentId);\n\n    if (found > -1) {\n      this.content.splice(found, 1);\n    }\n  }\n\n  setDuplicatingSettings(dupe) {\n    this.duplicatingSettings = dupe;\n    return this;\n  }\n\n}\nexport const rootSection = new RootSection().addSection([0]).addQuestion([0], [testQuestion]).addQuestion([0, 0], [testQuestion2, testQuestion3]);\nconsole.log(rootSection);\nexport class SurveyForm extends React.Component {\n  static questionOrSectionFromPath(path, root) {\n    let el = root[path[0]];\n\n    if (path.length === 1) {\n      return el;\n    } else {\n      return SurveyForm.questionOrSectionFromPath(path.slice(1), el.content);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedNodes: [],\n      expandedNodes: [this.props.root.id],\n      root: this.props.root,\n      activeSection: this.props.root,\n      activeSectionPath: [0]\n    };\n  }\n\n  handleChange(section) {\n    this.setState(prevState => {\n      return {\n        form: section\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleAddSection() {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.root);\n\n      cloned.addSection(this.state.activeSectionPath);\n      return {\n        root: cloned\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleAddQuestion() {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.root);\n\n      cloned.addQuestion(this.state.activeSectionPath);\n      return {\n        root: cloned\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleDeleteQuestionOrSection(deleteid, path_) {\n    this.setState(prevState => {\n      let activeSection = prevState.activeSection;\n      let activeSectionPath = prevState.activeSectionPath;\n      let parent = path_.slice(0, path_.length - 1);\n\n      let cloned = _.clone(prevState.root);\n\n      let item = RootSection.getFromPath(path_, [this.state.root]);\n      if (deleteid !== item.id) throw new Error(\"cannot delete, id mismatch\");\n\n      if (item instanceof QAQuestion) {\n        cloned.removeQuestion(item.id, path_);\n      } else if (item instanceof QuestionSection) {\n        cloned.removeSection(item.id, path_);\n\n        if (item.id === prevState.activeSection.id) {\n          let parentSection = RootSection.getFromPath(parent, [this.state.root]);\n\n          if (!(parentSection instanceof QAQuestion)) {\n            activeSection = parentSection;\n            activeSectionPath = parent;\n          }\n        }\n      }\n\n      return {\n        root: cloned,\n        activeSection: activeSection,\n        activeSectionPath: activeSectionPath\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleToolbarItemClick(name) {\n    switch (name) {\n      case \"add-section\":\n        this.handleAddSection();\n        break;\n\n      case \"add-question\":\n        this.handleAddQuestion();\n        break;\n    }\n  }\n\n  handleQuestionUpdate(question, path) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.form);\n\n      let parent = path.slice(0, path.length - 1);\n      let parentSection = SurveyForm.questionOrSectionFromPath(parent, [cloned]);\n\n      if (parentSection instanceof QuestionSection) {\n        let foundQ = parentSection.content.find(item => item.id === question.id);\n\n        if (foundQ && foundQ instanceof QAQuestion) {\n          foundQ.updateFromQuestion(question);\n        }\n      }\n\n      return {\n        form: cloned\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.form);\n    });\n  }\n\n  handleFormTreeNodeExpand(nodeData, _nodePath, e) {\n    nodeData.isExpanded = true;\n    this.setState(prevState => {\n      let item = RootSection.getFromPath(_nodePath, [this.state.root]);\n\n      let expandedNodes = _.union([item.id], prevState.expandedNodes);\n\n      return {\n        expandedNodes: expandedNodes\n      };\n    });\n  }\n\n  handleFormTreeNodeCollapse(nodeData) {\n    this.setState(prevState => {\n      let expandedNodes = prevState.expandedNodes.filter(item => nodeData.id !== item);\n      return {\n        expandedNodes: expandedNodes\n      };\n    });\n  }\n\n  handleFormTreeNodeClick(nodeData, _nodePath, e) {\n    let item = RootSection.getFromPath(_nodePath, [this.state.root]);\n    console.log(item);\n\n    if (!(item instanceof QAQuestion)) {\n      this.setState(prevState => {\n        let expandedNodes = _.union([item.id], prevState.expandedNodes);\n\n        let selectedNodes = [item.id];\n        return {\n          selectedNodes: selectedNodes,\n          expandedNodes: expandedNodes,\n          activeSection: item instanceof QuestionSection ? item : prevState.activeSection,\n          activeSectionPath: _nodePath\n        };\n      });\n    } else {\n      this.setState(prevState => {\n        let parent = _nodePath.length > 1 ? _nodePath.slice(0, _nodePath.length - 1) : _nodePath;\n        let parentSection = RootSection.getFromPath(parent, [prevState.root]);\n        let selectedQuestion = RootSection.getFromPath(_nodePath, [prevState.root]);\n        let expandedNodes = prevState.expandedNodes;\n        let selectedNodes = [selectedQuestion.id];\n\n        if (parentSection instanceof QuestionSection) {\n          expandedNodes = _.union([parentSection.id], expandedNodes);\n          selectedNodes.push(parentSection.id);\n        }\n\n        return {\n          expandedNodes: expandedNodes,\n          selectedNodes: selectedNodes,\n          activeSection: parentSection instanceof QuestionSection ? parentSection : prevState.activeSection,\n          activeSectionPath: parent\n        };\n      });\n    }\n  }\n\n  handleSectionChange(id, path) {\n    this.setState(prevState => {\n      let section = RootSection.getFromPath(path, [prevState.root]);\n      let expandedNodes = prevState.expandedNodes;\n      let selectedNodes = [];\n\n      if (section instanceof QuestionSection) {\n        expandedNodes = _.union([section.id], expandedNodes);\n        selectedNodes.push(section.id);\n      }\n\n      return {\n        expandedNodes: expandedNodes,\n        selectedNodes: selectedNodes,\n        activeSection: !(section instanceof QAQuestion) ? section : prevState.activeSection,\n        activeSectionPath: path\n      };\n    });\n  }\n\n  hanldeDuplicatingSectionSettingsChange(id, dupe) {\n    this.setState(prevState => {\n      let s = prevState.activeSection;\n      let sectionToChange = s.content.find(item => item.id === id);\n\n      if (sectionToChange instanceof QuestionSection) {\n        sectionToChange.setDuplicatingSettings(dupe);\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      handleItemClick: this.handleToolbarItemClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        background: \"transparent\"\n      },\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(FormTree, {\n      expandedNodes: this.state.expandedNodes,\n      selectedNodes: this.state.selectedNodes,\n      handleNodeExpand: this.handleFormTreeNodeExpand.bind(this),\n      handleNodeCollapse: this.handleFormTreeNodeCollapse.bind(this),\n      handleNodeClick: this.handleFormTreeNodeClick.bind(this),\n      root_: this.state.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(SectionC, {\n      definedQuestions: [],\n      handleSectionDuplicatingSettingsChange: this.hanldeDuplicatingSectionSettingsChange.bind(this),\n      handleSectionClick: this.handleSectionChange.bind(this),\n      handleDeleteChildSectionOrQuestion: this.handleDeleteQuestionOrSection.bind(this),\n      parentPath: this.state.activeSectionPath,\n      handleQuestionChange: this.handleQuestionUpdate.bind(this),\n      section: this.state.activeSection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    })), React.createElement(Row, {\n      style: {\n        position: \"fixed\",\n        height: \"60px\",\n        bottom: 0,\n        width: \"100%\",\n        margin: \"0 auto\"\n      },\n      className: \"fixed-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    })));\n  }\n\n}\nSurveyForm.defaultProps = {\n  root: rootSection,\n  form: new QuestionSection().setContent([testQuestion, testQuestion2, testQuestion3, new QuestionSection().setContent([testQuestion4, testQuestion5]).setName(\"true things\")])\n};","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/SurveyForm.tsx"],"names":["React","QAQuestion","getRandomId","Row","Toolbar","testQuestion","testQuestion2","testQuestion3","testQuestion4","testQuestion5","_","SectionC","RootSection","FormTree","QASurveyForm","constructor","content","id","name","setName","setContent","addContent","push","QuestionSection","duplicatingSettings","condition","undefined","enabled","duplicateTimes","value","type","setID","deleteContent","contentId","found","findIndex","item","splice","setDuplicatingSettings","dupe","rootSection","addSection","addQuestion","console","log","SurveyForm","Component","questionOrSectionFromPath","path","root","el","length","slice","props","state","selectedNodes","expandedNodes","activeSection","activeSectionPath","handleChange","section","setState","prevState","form","onChange","handleAddSection","cloned","clone","handleAddQuestion","handleDeleteQuestionOrSection","deleteid","path_","parent","getFromPath","Error","removeQuestion","removeSection","parentSection","handleToolbarItemClick","handleQuestionUpdate","question","foundQ","find","updateFromQuestion","handleFormTreeNodeExpand","nodeData","_nodePath","e","isExpanded","union","handleFormTreeNodeCollapse","filter","handleFormTreeNodeClick","selectedQuestion","handleSectionChange","hanldeDuplicatingSectionSettingsChange","s","sectionToChange","render","bind","background","position","height","bottom","width","margin","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,aAAtC,EAAqDC,aAArD,EAAoEC,aAApE,QAAyF,2BAAzF;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,WAAtC;AACA,SAASC,QAAT,QAAyB,YAAzB;AAIA,OAAO,MAAMC,YAAN,CAAmB;AAItBC,EAAAA,WAAW,GAAG;AAAA,SAHdC,OAGc;AAAA,SAFdC,EAEc;AAAA,SADdC,IACc;AACV,SAAKD,EAAL,GAAUf,WAAW,CAAC,KAAD,CAArB;AACH;;AACDiB,EAAAA,OAAO,CAACD,IAAD,EAAe;AAClB,SAAKA,IAAL,GAAYA,IAAZ;AACA,WAAO,IAAP;AACH;;AAEDE,EAAAA,UAAU,CAACJ,OAAD,EAA4C;AAClD,SAAKA,OAAL,GAAeA,OAAf;AACA,WAAO,IAAP;AACH;;AAEDK,EAAAA,UAAU,CAACL,OAAD,EAAwC;AAC9C,SAAKA,OAAL,CAAaM,IAAb,CAAkBN,OAAlB;AACA,WAAO,IAAP;AACH;;AApBqB;AAwB1B,OAAO,MAAMO,eAAN,CAAsB;AAKzBR,EAAAA,WAAW,GAAG;AAAA,SAJdG,IAIc;AAAA,SAHdF,OAGc;AAAA,SAFdC,EAEc;AAAA,SADdO,mBACc;AACV,SAAKP,EAAL,GAAUf,WAAW,CAAC,KAAD,CAArB;AACA,SAAKsB,mBAAL,GAA0B;AAACC,MAAAA,SAAS,EAAEC,SAAZ;AAAuBC,MAAAA,OAAO,EAAE,KAAhC;AAAuCC,MAAAA,cAAc,EAAE;AAACC,QAAAA,KAAK,EAAE,EAAR;AAAYC,QAAAA,IAAI,EAAE;AAAlB;AAAvD,KAA1B;AACA,SAAKd,OAAL,GAAe,EAAf;AAEH;;AACDe,EAAAA,KAAK,CAACd,EAAD,EAAa;AACd,SAAKA,EAAL,GAAUA,EAAV;AACA,WAAO,IAAP;AACH;;AACDE,EAAAA,OAAO,CAACD,IAAD,EAAe;AAClB,SAAKA,IAAL,GAAYA,IAAZ;AACA,WAAO,IAAP;AACH;;AACDE,EAAAA,UAAU,CAACJ,OAAD,EAA4C;AAClD,SAAKA,OAAL,GAAeA,OAAf;AACA,WAAO,IAAP;AACH;;AAEDK,EAAAA,UAAU,CAACL,OAAD,EAAwC;AAC9C,SAAKA,OAAL,CAAaM,IAAb,CAAkBN,OAAlB;AACA,WAAO,IAAP;AACH;;AAEDgB,EAAAA,aAAa,CAACC,SAAD,EAAoB;AAC7B,QAAIC,KAAK,GAAG,KAAKlB,OAAL,CAAamB,SAAb,CAAuBC,IAAI,IAAIA,IAAI,CAACnB,EAAL,KAAYgB,SAA3C,CAAZ;;AACA,QAAIC,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,WAAKlB,OAAL,CAAaqB,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;AACH;AACJ;;AACDI,EAAAA,sBAAsB,CAACC,IAAD,EAAoB;AACtC,SAAKf,mBAAL,GAA2Be,IAA3B;AACA,WAAO,IAAP;AACH;;AAtCwB;AAuD7B,OAAO,MAAMC,WAAW,GAAG,IAAI5B,WAAJ,GAAkB6B,UAAlB,CAA6B,CAAC,CAAD,CAA7B,EAAkCC,WAAlC,CAA8C,CAAC,CAAD,CAA9C,EAAmD,CAACrC,YAAD,CAAnD,EAAmEqC,WAAnE,CAA+E,CAAC,CAAD,EAAG,CAAH,CAA/E,EAAsF,CAACpC,aAAD,EAAgBC,aAAhB,CAAtF,CAApB;AACPoC,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AAGA,OAAO,MAAMK,UAAN,SAAyB7C,KAAK,CAAC8C,SAA/B,CAA0E;AAK7E,SAAcC,yBAAd,CAAwCC,IAAxC,EAAwDC,IAAxD,EAA8H;AAC1H,QAAIC,EAAE,GAAGD,IAAI,CAACD,IAAI,CAAC,CAAD,CAAL,CAAb;;AACA,QAAIA,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;AACnB,aAAOD,EAAP;AACH,KAFD,MAEO;AACH,aAAOL,UAAU,CAACE,yBAAX,CAAqCC,IAAI,CAACI,KAAL,CAAW,CAAX,CAArC,EAAoDF,EAAE,CAAClC,OAAvD,CAAP;AACH;AACJ;;AACDD,EAAAA,WAAW,CAACsC,KAAD,EAAyB;AAChC,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAE,EADN;AAETC,MAAAA,aAAa,EAAE,CAAC,KAAKH,KAAL,CAAWJ,IAAX,CAAgBhC,EAAjB,CAFN;AAGTgC,MAAAA,IAAI,EAAE,KAAKI,KAAL,CAAWJ,IAHR;AAITQ,MAAAA,aAAa,EAAE,KAAKJ,KAAL,CAAWJ,IAJjB;AAKTS,MAAAA,iBAAiB,EAAE,CAAC,CAAD;AALV,KAAb;AAOH;;AAEDC,EAAAA,YAAY,CAACC,OAAD,EAA2B;AACnC,SAAKC,QAAL,CAAeC,SAAD,IAAgC;AAC1C,aAAO;AACHC,QAAAA,IAAI,EAAEH;AADH,OAAP;AAGH,KAJD,EAIG,MAAM;AACL,UAAI,KAAKP,KAAL,CAAWW,QAAf,EAAyB,KAAKX,KAAL,CAAWW,QAAX,CAAoB,KAAKV,KAAL,CAAWS,IAA/B;AAC5B,KAND;AAOH;;AAEDE,EAAAA,gBAAgB,GAAG;AACf,SAAKJ,QAAL,CAAeC,SAAD,IAAgC;AAC1C,UAAII,MAAM,GAAGxD,CAAC,CAACyD,KAAF,CAAQL,SAAS,CAACb,IAAlB,CAAb;;AACAiB,MAAAA,MAAM,CAACzB,UAAP,CAAkB,KAAKa,KAAL,CAAWI,iBAA7B;AACA,aAAO;AACHT,QAAAA,IAAI,EAAEiB;AADH,OAAP;AAGH,KAND,EAMG,MAAM;AACL,UAAI,KAAKb,KAAL,CAAWW,QAAf,EAAyB,KAAKX,KAAL,CAAWW,QAAX,CAAoB,KAAKV,KAAL,CAAWS,IAA/B;AAC5B,KARD;AASH;;AAEDK,EAAAA,iBAAiB,GAAG;AAChB,SAAKP,QAAL,CAAeC,SAAD,IAAgC;AAC1C,UAAII,MAAM,GAAGxD,CAAC,CAACyD,KAAF,CAAQL,SAAS,CAACb,IAAlB,CAAb;;AACAiB,MAAAA,MAAM,CAACxB,WAAP,CAAmB,KAAKY,KAAL,CAAWI,iBAA9B;AACA,aAAO;AACHT,QAAAA,IAAI,EAAEiB;AADH,OAAP;AAGH,KAND,EAMG,MAAM;AACL,UAAI,KAAKb,KAAL,CAAWW,QAAf,EAAyB,KAAKX,KAAL,CAAWW,QAAX,CAAoB,KAAKV,KAAL,CAAWS,IAA/B;AAC5B,KARD;AASH;;AACDM,EAAAA,6BAA6B,CAACC,QAAD,EAAmBC,KAAnB,EAAoC;AAC7D,SAAKV,QAAL,CAAeC,SAAD,IAAgC;AAC1C,UAAIL,aAAa,GAAGK,SAAS,CAACL,aAA9B;AACA,UAAIC,iBAAiB,GAAGI,SAAS,CAACJ,iBAAlC;AACA,UAAIc,MAAM,GAAGD,KAAK,CAACnB,KAAN,CAAY,CAAZ,EAAemB,KAAK,CAACpB,MAAN,GAAe,CAA9B,CAAb;;AACA,UAAIe,MAAM,GAAGxD,CAAC,CAACyD,KAAF,CAAQL,SAAS,CAACb,IAAlB,CAAb;;AACA,UAAIb,IAAI,GAAGxB,WAAW,CAAC6D,WAAZ,CAAwBF,KAAxB,EAA8B,CAAC,KAAKjB,KAAL,CAAWL,IAAZ,CAA9B,CAAX;AACA,UAAGqB,QAAQ,KAAIlC,IAAI,CAACnB,EAApB,EAAwB,MAAM,IAAIyD,KAAJ,CAAU,4BAAV,CAAN;;AACxB,UAAGtC,IAAI,YAAYnC,UAAnB,EAA8B;AAC1BiE,QAAAA,MAAM,CAACS,cAAP,CAAsBvC,IAAI,CAACnB,EAA3B,EAA8BsD,KAA9B;AACH,OAFD,MAGK,IAAGnC,IAAI,YAAYb,eAAnB,EAAmC;AACpC2C,QAAAA,MAAM,CAACU,aAAP,CAAqBxC,IAAI,CAACnB,EAA1B,EAA8BsD,KAA9B;;AACA,YAAGnC,IAAI,CAACnB,EAAL,KAAU6C,SAAS,CAACL,aAAV,CAAwBxC,EAArC,EAAwC;AACpC,cAAI4D,aAAa,GAAGjE,WAAW,CAAC6D,WAAZ,CAAwBD,MAAxB,EAAgC,CAAC,KAAKlB,KAAL,CAAWL,IAAZ,CAAhC,CAApB;;AACA,cAAG,EAAE4B,aAAa,YAAY5E,UAA3B,CAAH,EAA0C;AACtCwD,YAAAA,aAAa,GAAGoB,aAAhB;AACAnB,YAAAA,iBAAiB,GAAGc,MAApB;AACH;AACJ;AACJ;;AAED,aAAO;AACHvB,QAAAA,IAAI,EAAEiB,MADH;AAEHT,QAAAA,aAAa,EAAEA,aAFZ;AAGHC,QAAAA,iBAAiB,EAAEA;AAHhB,OAAP;AAKH,KA1BD,EA0BG,MAAM;AACL,UAAI,KAAKL,KAAL,CAAWW,QAAf,EAAyB,KAAKX,KAAL,CAAWW,QAAX,CAAoB,KAAKV,KAAL,CAAWS,IAA/B;AAC5B,KA5BD;AA6BH;;AAEDe,EAAAA,sBAAsB,CAAC5D,IAAD,EAAe;AACjC,YAAQA,IAAR;AACI,WAAK,aAAL;AACI,aAAK+C,gBAAL;AACA;;AACJ,WAAK,cAAL;AACI,aAAKG,iBAAL;AACA;AANR;AAQH;;AAEDW,EAAAA,oBAAoB,CAACC,QAAD,EAAuBhC,IAAvB,EAAuC;AACvD,SAAKa,QAAL,CAAeC,SAAD,IAAgC;AAC1C,UAAII,MAAM,GAAGxD,CAAC,CAACyD,KAAF,CAAQL,SAAS,CAACC,IAAlB,CAAb;;AACA,UAAIS,MAAM,GAAGxB,IAAI,CAACI,KAAL,CAAW,CAAX,EAAcJ,IAAI,CAACG,MAAL,GAAc,CAA5B,CAAb;AACA,UAAI0B,aAAa,GAAGhC,UAAU,CAACE,yBAAX,CAAqCyB,MAArC,EAA6C,CAACN,MAAD,CAA7C,CAApB;;AACA,UAAIW,aAAa,YAAYtD,eAA7B,EAA8C;AAC1C,YAAI0D,MAAM,GAAGJ,aAAa,CAAC7D,OAAd,CAAsBkE,IAAtB,CAA2B9C,IAAI,IAAIA,IAAI,CAACnB,EAAL,KAAY+D,QAAQ,CAAC/D,EAAxD,CAAb;;AACA,YAAIgE,MAAM,IAAIA,MAAM,YAAYhF,UAAhC,EAA4C;AACxCgF,UAAAA,MAAM,CAACE,kBAAP,CAA0BH,QAA1B;AACH;AACJ;;AAED,aAAO;AACHjB,QAAAA,IAAI,EAAEG;AADH,OAAP;AAGH,KAdD,EAcG,MAAM;AACL,UAAI,KAAKb,KAAL,CAAWW,QAAf,EAAyB,KAAKX,KAAL,CAAWW,QAAX,CAAoB,KAAKV,KAAL,CAAWS,IAA/B;AAC5B,KAhBD;AAiBH;;AAGDqB,EAAAA,wBAAwB,CAACC,QAAD,EAAsBC,SAAtB,EAA2CC,CAA3C,EAA6E;AACjGF,IAAAA,QAAQ,CAACG,UAAT,GAAsB,IAAtB;AACA,SAAK3B,QAAL,CAAeC,SAAD,IAAgC;AAC1C,UAAI1B,IAAI,GAAGxB,WAAW,CAAC6D,WAAZ,CAAwBa,SAAxB,EAAmC,CAAC,KAAKhC,KAAL,CAAWL,IAAZ,CAAnC,CAAX;;AACA,UAAIO,aAAa,GAAG9C,CAAC,CAAC+E,KAAF,CAAQ,CAACrD,IAAI,CAACnB,EAAN,CAAR,EAAmB6C,SAAS,CAACN,aAA7B,CAApB;;AACA,aAAO;AACHA,QAAAA,aAAa,EAAEA;AADZ,OAAP;AAGH,KAND;AAOH;;AAEDkC,EAAAA,0BAA0B,CAACL,QAAD,EAAsB;AAC5C,SAAKxB,QAAL,CAAeC,SAAD,IAAgC;AAC1C,UAAIN,aAAa,GAAGM,SAAS,CAACN,aAAV,CAAwBmC,MAAxB,CAAgCvD,IAAI,IAAIiD,QAAQ,CAACpE,EAAT,KAAgBmB,IAAxD,CAApB;AACA,aAAO;AACHoB,QAAAA,aAAa,EAAEA;AADZ,OAAP;AAGH,KALD;AAMH;;AAGDoC,EAAAA,uBAAuB,CAACP,QAAD,EAAsBC,SAAtB,EAA2CC,CAA3C,EAA6E;AAChG,QAAInD,IAAI,GAAGxB,WAAW,CAAC6D,WAAZ,CAAwBa,SAAxB,EAAmC,CAAC,KAAKhC,KAAL,CAAWL,IAAZ,CAAnC,CAAX;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;;AACA,QAAI,EAAEA,IAAI,YAAYnC,UAAlB,CAAJ,EAAmC;AAC/B,WAAK4D,QAAL,CAAeC,SAAD,IAAgC;AAC1C,YAAIN,aAAa,GAAG9C,CAAC,CAAC+E,KAAF,CAAQ,CAACrD,IAAI,CAACnB,EAAN,CAAR,EAAmB6C,SAAS,CAACN,aAA7B,CAApB;;AACA,YAAID,aAAa,GAAG,CAACnB,IAAI,CAACnB,EAAN,CAApB;AACA,eAAO;AACHsC,UAAAA,aAAa,EAAEA,aADZ;AAEHC,UAAAA,aAAa,EAAEA,aAFZ;AAGHC,UAAAA,aAAa,EAAErB,IAAI,YAAYb,eAAhB,GAAkCa,IAAlC,GAAyC0B,SAAS,CAACL,aAH/D;AAIHC,UAAAA,iBAAiB,EAAE4B;AAJhB,SAAP;AAOH,OAVD;AAWH,KAZD,MAaK;AACD,WAAKzB,QAAL,CAAeC,SAAD,IAAgC;AAE1C,YAAIU,MAAM,GAAGc,SAAS,CAACnC,MAAV,GAAiB,CAAjB,GAAoBmC,SAAS,CAAClC,KAAV,CAAgB,CAAhB,EAAmBkC,SAAS,CAACnC,MAAV,GAAmB,CAAtC,CAApB,GAA8DmC,SAA3E;AACA,YAAIT,aAAa,GAAIjE,WAAW,CAAC6D,WAAZ,CAAwBD,MAAxB,EAAgC,CAACV,SAAS,CAACb,IAAX,CAAhC,CAArB;AACA,YAAI4C,gBAAgB,GAAGjF,WAAW,CAAC6D,WAAZ,CAAwBa,SAAxB,EAAmC,CAACxB,SAAS,CAACb,IAAX,CAAnC,CAAvB;AACA,YAAIO,aAAa,GAAGM,SAAS,CAACN,aAA9B;AACA,YAAID,aAAa,GAAG,CAACsC,gBAAgB,CAAC5E,EAAlB,CAApB;;AACA,YAAI4D,aAAa,YAAYtD,eAA7B,EAA8C;AAC1CiC,UAAAA,aAAa,GAAG9C,CAAC,CAAC+E,KAAF,CAAQ,CAACZ,aAAa,CAAC5D,EAAf,CAAR,EAA4BuC,aAA5B,CAAhB;AACAD,UAAAA,aAAa,CAACjC,IAAd,CAAmBuD,aAAa,CAAC5D,EAAjC;AACH;;AAED,eAAO;AACHuC,UAAAA,aAAa,EAAEA,aADZ;AAEHD,UAAAA,aAAa,EAAEA,aAFZ;AAGHE,UAAAA,aAAa,EAAEoB,aAAa,YAAYtD,eAAzB,GAA2CsD,aAA3C,GAA2Df,SAAS,CAACL,aAHjF;AAIHC,UAAAA,iBAAiB,EAAEc;AAJhB,SAAP;AAQH,OApBD;AAqBH;AACJ;;AAEDsB,EAAAA,mBAAmB,CAAC7E,EAAD,EAAa+B,IAAb,EAA6B;AAC5C,SAAKa,QAAL,CAAeC,SAAD,IAAgC;AAC1C,UAAIF,OAAO,GAAGhD,WAAW,CAAC6D,WAAZ,CAAwBzB,IAAxB,EAA8B,CAACc,SAAS,CAACb,IAAX,CAA9B,CAAd;AACA,UAAIO,aAAa,GAAGM,SAAS,CAACN,aAA9B;AACA,UAAID,aAAa,GAAG,EAApB;;AACA,UAAIK,OAAO,YAAYrC,eAAvB,EAAwC;AACpCiC,QAAAA,aAAa,GAAG9C,CAAC,CAAC+E,KAAF,CAAQ,CAAC7B,OAAO,CAAC3C,EAAT,CAAR,EAAsBuC,aAAtB,CAAhB;AACAD,QAAAA,aAAa,CAACjC,IAAd,CAAmBsC,OAAO,CAAC3C,EAA3B;AACH;;AACD,aAAO;AACHuC,QAAAA,aAAa,EAAEA,aADZ;AAEHD,QAAAA,aAAa,EAAEA,aAFZ;AAGHE,QAAAA,aAAa,EAAE,EAAEG,OAAO,YAAY3D,UAArB,IAAkC2D,OAAlC,GAA4CE,SAAS,CAACL,aAHlE;AAIHC,QAAAA,iBAAiB,EAAEV;AAJhB,OAAP;AAMH,KAdD;AAeH;;AACD+C,EAAAA,sCAAsC,CAAE9E,EAAF,EAAasB,IAAb,EAAgC;AAClE,SAAKsB,QAAL,CAAeC,SAAD,IAA8B;AACxC,UAAIkC,CAAC,GAAGlC,SAAS,CAACL,aAAlB;AACA,UAAIwC,eAAe,GAAGD,CAAC,CAAChF,OAAF,CAAUkE,IAAV,CAAe9C,IAAI,IAAEA,IAAI,CAACnB,EAAL,KAAUA,EAA/B,CAAtB;;AACA,UAAGgF,eAAe,YAAY1E,eAA9B,EAA8C;AAC1C0E,QAAAA,eAAe,CAAC3D,sBAAhB,CAAuCC,IAAvC;AACH;AAEJ,KAPD;AAQH;;AAED2D,EAAAA,MAAM,GAAG;AAEL,WACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,OAAD;AAAS,MAAA,eAAe,EAAE,KAAKpB,sBAAL,CAA4BqB,IAA5B,CAAiC,IAAjC,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAZ;AAA2C,MAAA,SAAS,EAAC,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,aAAa,EAAE,KAAK9C,KAAL,CAAWE,aAD9B;AAEI,MAAA,aAAa,EAAE,KAAKF,KAAL,CAAWC,aAF9B;AAGI,MAAA,gBAAgB,EAAE,KAAK6B,wBAAL,CAA8Be,IAA9B,CAAmC,IAAnC,CAHtB;AAII,MAAA,kBAAkB,EAAE,KAAKT,0BAAL,CAAgCS,IAAhC,CAAqC,IAArC,CAJxB;AAKI,MAAA,eAAe,EAAE,KAAKP,uBAAL,CAA6BO,IAA7B,CAAkC,IAAlC,CALrB;AAMI,MAAA,KAAK,EAAE,KAAK7C,KAAL,CAAWL,IANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CAFJ,EAcI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,gBAAgB,EAAI,EADxB;AAEI,MAAA,sCAAsC,EAAI,KAAK8C,sCAAL,CAA4CI,IAA5C,CAAiD,IAAjD,CAF9C;AAGI,MAAA,kBAAkB,EAAE,KAAKL,mBAAL,CAAyBK,IAAzB,CAA8B,IAA9B,CAHxB;AAII,MAAA,kCAAkC,EAAE,KAAK9B,6BAAL,CAAmC8B,IAAnC,CAAwC,IAAxC,CAJxC;AAKI,MAAA,UAAU,EAAE,KAAK7C,KAAL,CAAWI,iBAL3B;AAMI,MAAA,oBAAoB,EAAE,KAAKqB,oBAAL,CAA0BoB,IAA1B,CAA+B,IAA/B,CAN1B;AAOI,MAAA,OAAO,EAAE,KAAK7C,KAAL,CAAWG,aAPxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAdJ,EAwBI,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AACR4C,QAAAA,QAAQ,EAAE,OADF;AAERC,QAAAA,MAAM,EAAE,MAFA;AAGRC,QAAAA,MAAM,EAAE,CAHA;AAIRC,QAAAA,KAAK,EAAE,MAJC;AAKRC,QAAAA,MAAM,EAAE;AALA,OAAZ;AAMG,MAAA,SAAS,EAAC,cANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBJ,CAFJ,CADJ;AA0CH;;AA/P4E;AAApE5D,U,CACF6D,Y,GAAe;AAClBzD,EAAAA,IAAI,EAAET,WADY;AAElBuB,EAAAA,IAAI,EAAE,IAAIxC,eAAJ,GAAsBH,UAAtB,CAAiC,CAACf,YAAD,EAAeC,aAAf,EAA8BC,aAA9B,EAA6C,IAAIgB,eAAJ,GAAsBH,UAAtB,CAAiC,CAACZ,aAAD,EAAgBC,aAAhB,CAAjC,EAAiEU,OAAjE,CAAyE,aAAzE,CAA7C,CAAjC;AAFY,C","sourcesContent":["import React from \"react\";\nimport { QAQuestion } from \"../form/question\";\nimport { ITreeNode } from \"@blueprintjs/core\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { Row } from \"reactstrap\";\nimport { Toolbar } from \"./Toolbar\";\n\nimport { testQuestion, testQuestion2, testQuestion3, testQuestion4, testQuestion5 } from \"../testData/TestQuestions\";\nimport _ from \"lodash\";\nimport { SectionC, RootSection } from \"./section\";\nimport { FormTree } from \"./formtree\";\nimport { QACondition } from \"../form/condition\";\nimport { DuplicateSettings, DupeSettings } from \"./duplicateSettings\";\n\nexport class QASurveyForm {\n    content!: (QuestionSection | QAQuestion)[];\n    id: string;\n    name!: string;\n    constructor() {\n        this.id = getRandomId(\"sf-\");\n    }\n    setName(name: string) {\n        this.name = name;\n        return this;\n    }\n\n    setContent(content: (QuestionSection | QAQuestion)[]) {\n        this.content = content;\n        return this;\n    }\n\n    addContent(content: QAQuestion | QuestionSection) {\n        this.content.push(content);\n        return this;\n    }\n\n}\n\nexport class QuestionSection {\n    name!: string;\n    content!: (QuestionSection | QAQuestion)[]\n    id: string\n    duplicatingSettings: DupeSettings;\n    constructor() {\n        this.id = getRandomId(\"ss-\");\n        this.duplicatingSettings ={condition: undefined, enabled: false, duplicateTimes: {value: \"\", type: \"number\"}}\n        this.content = []\n\n    }\n    setID(id: string) {\n        this.id = id;\n        return this;\n    }\n    setName(name: string) {\n        this.name = name;\n        return this;\n    }\n    setContent(content: (QuestionSection | QAQuestion)[]) {\n        this.content = content;\n        return this;\n    }\n\n    addContent(content: QuestionSection | QAQuestion) {\n        this.content.push(content);\n        return this;\n    }\n\n    deleteContent(contentId: string) {\n        let found = this.content.findIndex(item => item.id === contentId);\n        if (found > -1) {\n            this.content.splice(found, 1);\n        }\n    }\n    setDuplicatingSettings(dupe: DupeSettings){\n        this.duplicatingSettings = dupe;\n        return this;\n    }\n}\n\ninterface SurveyFormState {\n    form: QuestionSection,\n    activeSection: QuestionSection|RootSection,\n    activeSectionPath: number[]\n    selectedNodes: string[],\n    expandedNodes: string[],\n    root: RootSection\n\n}\ninterface SurveyFormProps {\n    form: QuestionSection,\n    root: RootSection,\n    onChange: (form: QuestionSection) => void\n}\nexport const rootSection = new RootSection().addSection([0]).addQuestion([0], [testQuestion]).addQuestion([0,0], [testQuestion2, testQuestion3]);\nconsole.log(rootSection);\n\n\nexport class SurveyForm extends React.Component<SurveyFormProps, SurveyFormState>{\n    static defaultProps = {\n        root: rootSection,\n        form: new QuestionSection().setContent([testQuestion, testQuestion2, testQuestion3, new QuestionSection().setContent([testQuestion4, testQuestion5]).setName(\"true things\")]),\n    }\n    public static questionOrSectionFromPath(path: number[], root: (QuestionSection | QAQuestion)[]): QuestionSection | QAQuestion {\n        let el = root[path[0]];\n        if (path.length === 1) {\n            return el;\n        } else {\n            return SurveyForm.questionOrSectionFromPath(path.slice(1), el.content);\n        }\n    }\n    constructor(props: SurveyFormProps) {\n        super(props);\n        this.state = {\n            selectedNodes: [],\n            expandedNodes: [this.props.root.id],\n            root: this.props.root,\n            activeSection: this.props.root,\n            activeSectionPath: [0]\n        }\n    }\n\n    handleChange(section: QuestionSection) {\n        this.setState((prevState: SurveyFormState) => {\n            return {\n                form: section,\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n\n    handleAddSection() {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            cloned.addSection(this.state.activeSectionPath);\n            return {\n                root: cloned\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n\n    handleAddQuestion() {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            cloned.addQuestion(this.state.activeSectionPath);\n            return {\n                root: cloned,\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n    handleDeleteQuestionOrSection(deleteid: string, path_: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let activeSection = prevState.activeSection;\n            let activeSectionPath = prevState.activeSectionPath;\n            let parent = path_.slice(0, path_.length - 1);\n            let cloned = _.clone(prevState.root);\n            let item = RootSection.getFromPath(path_,[this.state.root]);\n            if(deleteid !==item.id) throw new Error(\"cannot delete, id mismatch\");\n            if(item instanceof QAQuestion){\n                cloned.removeQuestion(item.id,path_);\n            }\n            else if(item instanceof QuestionSection){\n                cloned.removeSection(item.id, path_);\n                if(item.id===prevState.activeSection.id){\n                    let parentSection = RootSection.getFromPath(parent, [this.state.root]);\n                    if(!(parentSection instanceof QAQuestion)){\n                        activeSection = parentSection;\n                        activeSectionPath = parent;\n                    }\n                }\n            }\n        \n            return {\n                root: cloned,\n                activeSection: activeSection,\n                activeSectionPath: activeSectionPath\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n\n    handleToolbarItemClick(name: string) {\n        switch (name) {\n            case \"add-section\":\n                this.handleAddSection()\n                break;\n            case \"add-question\":\n                this.handleAddQuestion();\n                break;\n        }\n    }\n\n    handleQuestionUpdate(question: QAQuestion, path: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.form);\n            let parent = path.slice(0, path.length - 1);\n            let parentSection = SurveyForm.questionOrSectionFromPath(parent, [cloned]);\n            if (parentSection instanceof QuestionSection) {\n                let foundQ = parentSection.content.find(item => item.id === question.id);\n                if (foundQ && foundQ instanceof QAQuestion) {\n                    foundQ.updateFromQuestion(question);\n                }\n            }\n\n            return {\n                form: cloned\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.form);\n        })\n    }\n\n\n    handleFormTreeNodeExpand(nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) {\n        nodeData.isExpanded = true;\n        this.setState((prevState: SurveyFormState) => {\n            let item = RootSection.getFromPath(_nodePath, [this.state.root]);\n            let expandedNodes = _.union([item.id], prevState.expandedNodes);\n            return {\n                expandedNodes: expandedNodes\n            }\n        })\n    }\n\n    handleFormTreeNodeCollapse(nodeData: ITreeNode) {\n        this.setState((prevState: SurveyFormState) => {\n            let expandedNodes = prevState.expandedNodes.filter((item => nodeData.id !== item));\n            return {\n                expandedNodes: expandedNodes\n            }\n        })\n    }\n\n\n    handleFormTreeNodeClick(nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) {\n        let item = RootSection.getFromPath(_nodePath, [this.state.root]);\n        console.log(item)\n        if (!(item instanceof QAQuestion)) {\n            this.setState((prevState: SurveyFormState) => {\n                let expandedNodes = _.union([item.id], prevState.expandedNodes);\n                let selectedNodes = [item.id];\n                return {\n                    selectedNodes: selectedNodes,\n                    expandedNodes: expandedNodes,\n                    activeSection: item instanceof QuestionSection ? item : prevState.activeSection,\n                    activeSectionPath: _nodePath\n                }\n\n            })\n        }\n        else {\n            this.setState((prevState: SurveyFormState) => {\n\n                let parent = _nodePath.length>1? _nodePath.slice(0, _nodePath.length - 1): _nodePath;\n                let parentSection =  RootSection.getFromPath(parent, [prevState.root]);\n                let selectedQuestion = RootSection.getFromPath(_nodePath, [prevState.root]);\n                let expandedNodes = prevState.expandedNodes;\n                let selectedNodes = [selectedQuestion.id];\n                if (parentSection instanceof QuestionSection) {\n                    expandedNodes = _.union([parentSection.id], expandedNodes);\n                    selectedNodes.push(parentSection.id);\n                }\n\n                return {\n                    expandedNodes: expandedNodes,\n                    selectedNodes: selectedNodes,\n                    activeSection: parentSection instanceof QuestionSection ? parentSection : prevState.activeSection,\n                    activeSectionPath: parent\n                }\n\n\n            })\n        }\n    }\n\n    handleSectionChange(id: string, path: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let section = RootSection.getFromPath(path, [prevState.root]);\n            let expandedNodes = prevState.expandedNodes;\n            let selectedNodes = []\n            if (section instanceof QuestionSection) {\n                expandedNodes = _.union([section.id], expandedNodes);\n                selectedNodes.push(section.id);\n            }\n            return {\n                expandedNodes: expandedNodes,\n                selectedNodes: selectedNodes,\n                activeSection: !(section instanceof QAQuestion)? section : prevState.activeSection,\n                activeSectionPath: path\n            }\n        })\n    }\n    hanldeDuplicatingSectionSettingsChange( id:string, dupe: DupeSettings){\n        this.setState((prevState: SurveyFormState)=>{\n            let s = prevState.activeSection;\n            let sectionToChange = s.content.find(item=>item.id===id);\n            if(sectionToChange instanceof QuestionSection){\n                sectionToChange.setDuplicatingSettings(dupe);\n            }\n\n        })\n    }\n\n    render() {\n\n        return (\n            <Row>\n                <Toolbar handleItemClick={this.handleToolbarItemClick.bind(this)}></Toolbar>\n                <div className=\"container\">\n\n                    <div style={{ background: \"transparent\" }} className=\"sidebar\">\n                        <div className=\"sidebar-wrapper\">\n                            <FormTree\n                                expandedNodes={this.state.expandedNodes}\n                                selectedNodes={this.state.selectedNodes}\n                                handleNodeExpand={this.handleFormTreeNodeExpand.bind(this)}\n                                handleNodeCollapse={this.handleFormTreeNodeCollapse.bind(this)}\n                                handleNodeClick={this.handleFormTreeNodeClick.bind(this)} \n                                root_={this.state.root}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"content\">\n                        <SectionC\n                            definedQuestions = {[]}\n                            handleSectionDuplicatingSettingsChange = {this.hanldeDuplicatingSectionSettingsChange.bind(this)}\n                            handleSectionClick={this.handleSectionChange.bind(this)}\n                            handleDeleteChildSectionOrQuestion={this.handleDeleteQuestionOrSection.bind(this)}\n                            parentPath={this.state.activeSectionPath}\n                            handleQuestionChange={this.handleQuestionUpdate.bind(this)}\n                            section={this.state.activeSection} />\n                    </div>\n                    <Row style={{\n                        position: \"fixed\",\n                        height: \"60px\",\n                        bottom: 0,\n                        width: \"100%\",\n                        margin: \"0 auto\"\n                    }} className=\"fixed-footer\">\n\n\n\n                    </Row>\n                </div>\n            </Row>\n\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}