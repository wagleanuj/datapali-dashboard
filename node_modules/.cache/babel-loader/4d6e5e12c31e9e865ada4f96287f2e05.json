{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent, DISPLAYNAME_PREFIX, Utils } from \"@blueprintjs/core\";\nimport * as Classes from \"./common/classes\";\nimport * as DateUtils from \"./common/dateUtils\";\nimport { DatePicker } from \"./datePicker\";\nimport { TimePicker } from \"./timePicker\";\n/** @deprecated since 3.4.0. Prefer `<DatePicker>` with `timePrecision` and `timePickerProps`. */\n\nvar DateTimePicker =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DateTimePicker, _super);\n\n  function DateTimePicker(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.handleDateChange = function (dateValue, isUserChange) {\n      if (_this.props.value === undefined) {\n        _this.setState({\n          dateValue: dateValue\n        });\n      }\n\n      var value = DateUtils.getDateTime(dateValue, _this.state.timeValue);\n      Utils.safeInvoke(_this.props.onChange, value, isUserChange);\n    };\n\n    _this.handleTimeChange = function (timeValue) {\n      if (_this.props.value === undefined) {\n        _this.setState({\n          timeValue: timeValue\n        });\n      }\n\n      var value = DateUtils.getDateTime(_this.state.dateValue, timeValue);\n      Utils.safeInvoke(_this.props.onChange, value, true);\n    };\n\n    var initialValue = _this.props.value !== undefined ? _this.props.value : _this.props.defaultValue;\n    _this.state = {\n      dateValue: initialValue,\n      timeValue: initialValue\n    };\n    return _this;\n  }\n\n  DateTimePicker.prototype.render = function () {\n    var value = DateUtils.getDateTime(this.state.dateValue, this.state.timeValue);\n    return React.createElement(\"div\", {\n      className: classNames(Classes.DATETIMEPICKER, this.props.className)\n    }, React.createElement(DatePicker, tslib_1.__assign({}, this.props.datePickerProps, {\n      canClearSelection: this.props.canClearSelection,\n      onChange: this.handleDateChange,\n      value: value\n    })), React.createElement(TimePicker, tslib_1.__assign({}, this.props.timePickerProps, {\n      onChange: this.handleTimeChange,\n      value: value\n    })));\n  };\n\n  DateTimePicker.prototype.componentWillReceiveProps = function (nextProps) {\n    if (this.props.value === nextProps.value) {\n      return;\n    } else if (nextProps.value != null) {\n      this.setState({\n        dateValue: nextProps.value,\n        timeValue: nextProps.value\n      });\n    } else {\n      // clear only the date to remove the selected-date style in the calendar\n      this.setState({\n        dateValue: null\n      });\n    }\n  };\n\n  DateTimePicker.defaultProps = {\n    canClearSelection: true,\n    defaultValue: new Date()\n  };\n  DateTimePicker.displayName = DISPLAYNAME_PREFIX + \".DateTimePicker\";\n  return DateTimePicker;\n}(AbstractPureComponent);\n\nexport { DateTimePicker };","map":null,"metadata":{},"sourceType":"module"}