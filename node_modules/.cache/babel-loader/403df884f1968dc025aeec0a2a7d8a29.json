{"ast":null,"code":"var _jsxFileName = \"/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/SurveyForm.tsx\";\nimport React from \"react\";\nimport { QAQuestion } from \"../form/question\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { Row } from \"reactstrap\";\nimport { Toolbar } from \"./Toolbar\";\nimport { testQuestion, testQuestion2, testQuestion3 } from \"../testData/TestQuestions\";\nimport _ from \"lodash\";\nimport { SectionC, RootSection } from \"./section\";\nimport { FormTree } from \"./formtree\";\nexport class QASurveyForm {\n  constructor() {\n    this.content = void 0;\n    this.id = void 0;\n    this.name = void 0;\n    this.id = getRandomId(\"sf-\");\n  }\n\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  setContent(content) {\n    this.content = content;\n    return this;\n  }\n\n  addContent(content) {\n    this.content.push(content);\n    return this;\n  }\n\n}\nexport class QuestionSection {\n  constructor() {\n    this.name = void 0;\n    this.content = void 0;\n    this.id = void 0;\n    this.duplicatingSettings = void 0;\n    this.id = getRandomId(\"ss-\");\n    this.duplicatingSettings = {\n      condition: undefined,\n      enabled: false,\n      duplicateTimes: {\n        value: \"\",\n        type: \"number\"\n      }\n    };\n    this.content = [];\n  }\n\n  setID(id) {\n    this.id = id;\n    return this;\n  }\n\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  setContent(content) {\n    this.content = content;\n    return this;\n  }\n\n  addContent(content) {\n    this.content.push(content);\n    return this;\n  }\n\n  deleteContent(contentId) {\n    let found = this.content.findIndex(item => item.id === contentId);\n\n    if (found > -1) {\n      this.content.splice(found, 1);\n    }\n  }\n\n  setDuplicatingSettings(dupe) {\n    this.duplicatingSettings = dupe;\n    return this;\n  }\n\n}\nexport const rootSection = new RootSection().addSection([0]).addQuestion([0], [testQuestion]).addQuestion([0, 0], [testQuestion2, testQuestion3]);\nconsole.log(rootSection);\nexport class SurveyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedNodes: [],\n      expandedNodes: [this.props.root.id],\n      root: this.props.root,\n      activeSection: this.props.root,\n      activeSectionPath: [0]\n    };\n  }\n\n  handleAddSection() {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.root);\n\n      cloned.addSection(this.state.activeSectionPath);\n      return {\n        root: cloned\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.root);\n    });\n  }\n\n  handleAddQuestion() {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.root);\n\n      cloned.addQuestion(this.state.activeSectionPath);\n      return {\n        root: cloned\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.root);\n    });\n  }\n\n  handleDeleteQuestionOrSection(deleteid, path_) {\n    this.setState(prevState => {\n      let activeSection = prevState.activeSection;\n      let activeSectionPath = prevState.activeSectionPath;\n      let parent = path_.slice(0, path_.length - 1);\n\n      let cloned = _.clone(prevState.root);\n\n      let item = RootSection.getFromPath(path_, [this.state.root]);\n      if (deleteid !== item.id) throw new Error(\"cannot delete, id mismatch\");\n\n      if (item instanceof QAQuestion) {\n        cloned.removeQuestion(item.id, path_);\n      } else if (item instanceof QuestionSection) {\n        cloned.removeSection(item.id, path_);\n\n        if (item.id === prevState.activeSection.id) {\n          let parentSection = RootSection.getFromPath(parent, [this.state.root]);\n\n          if (!(parentSection instanceof QAQuestion)) {\n            activeSection = parentSection;\n            activeSectionPath = parent;\n          }\n        }\n      }\n\n      return {\n        root: cloned,\n        activeSection: activeSection,\n        activeSectionPath: activeSectionPath\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.root);\n    });\n  }\n\n  handleToolbarItemClick(name) {\n    switch (name) {\n      case \"add-section\":\n        this.handleAddSection();\n        break;\n\n      case \"add-question\":\n        this.handleAddQuestion();\n        break;\n    }\n  }\n\n  handleQuestionUpdate(question, path) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.root);\n\n      let parent = path.slice(0, path.length - 1);\n      let parentSection = RootSection.getFromPath(parent, [cloned]);\n\n      if (!(parentSection instanceof QAQuestion)) {\n        let q = this.state.root.questions[question.id];\n        q.updateFromQuestion(question);\n      }\n\n      return {\n        root: cloned\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange(this.state.root);\n    });\n  }\n\n  handleFormTreeNodeExpand(nodeData, _nodePath, e) {\n    nodeData.isExpanded = true;\n    this.setState(prevState => {\n      let item = RootSection.getFromPath(_nodePath, [this.state.root]);\n\n      let expandedNodes = _.union([item.id], prevState.expandedNodes);\n\n      return {\n        expandedNodes: expandedNodes\n      };\n    });\n  }\n\n  handleFormTreeNodeCollapse(nodeData) {\n    this.setState(prevState => {\n      let expandedNodes = prevState.expandedNodes.filter(item => nodeData.id !== item);\n      return {\n        expandedNodes: expandedNodes\n      };\n    });\n  }\n\n  handleFormTreeNodeClick(nodeData, _nodePath, e) {\n    let item = RootSection.getFromPath(_nodePath, [this.state.root]);\n\n    if (!(item instanceof QAQuestion)) {\n      this.setState(prevState => {\n        let expandedNodes = _.union([item.id], prevState.expandedNodes);\n\n        let selectedNodes = [item.id];\n        return {\n          selectedNodes: selectedNodes,\n          expandedNodes: expandedNodes,\n          activeSection: !(item instanceof QAQuestion) ? item : prevState.activeSection,\n          activeSectionPath: _nodePath\n        };\n      });\n    } else {\n      this.setState(prevState => {\n        let parent = _nodePath.length > 1 ? _nodePath.slice(0, _nodePath.length - 1) : _nodePath;\n        let parentSection = RootSection.getFromPath(parent, [prevState.root]);\n        let selectedQuestion = RootSection.getFromPath(_nodePath, [prevState.root]);\n        let expandedNodes = prevState.expandedNodes;\n        let selectedNodes = [selectedQuestion.id];\n\n        if (!(parentSection instanceof QAQuestion)) {\n          expandedNodes = _.union([parentSection.id], expandedNodes);\n          selectedNodes.push(parentSection.id);\n        }\n\n        return {\n          expandedNodes: expandedNodes,\n          selectedNodes: selectedNodes,\n          activeSection: !(parentSection instanceof QAQuestion) ? parentSection : prevState.activeSection,\n          activeSectionPath: parent\n        };\n      });\n    }\n  }\n\n  handleSectionChange(id, path) {\n    this.setState(prevState => {\n      let section = RootSection.getFromPath(path, [prevState.root]);\n      let expandedNodes = prevState.expandedNodes;\n      let selectedNodes = [];\n\n      if (section instanceof QuestionSection) {\n        expandedNodes = _.union([section.id], expandedNodes);\n        selectedNodes.push(section.id);\n      }\n\n      return {\n        expandedNodes: expandedNodes,\n        selectedNodes: selectedNodes,\n        activeSection: !(section instanceof QAQuestion) ? section : prevState.activeSection,\n        activeSectionPath: path\n      };\n    });\n  }\n\n  handleDuplicating(id, dupe) {\n    this.setState(prevState => {\n      let s = prevState.activeSection;\n      let sectionToChange = s.content.find(item => item.id === id);\n\n      if (sectionToChange instanceof QuestionSection) {\n        sectionToChange.setDuplicatingSettings(dupe);\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      handleItemClick: this.handleToolbarItemClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        background: \"transparent\"\n      },\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebar-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(FormTree, {\n      expandedNodes: this.state.expandedNodes,\n      selectedNodes: this.state.selectedNodes,\n      handleNodeExpand: this.handleFormTreeNodeExpand.bind(this),\n      handleNodeCollapse: this.handleFormTreeNodeCollapse.bind(this),\n      handleNodeClick: this.handleFormTreeNodeClick.bind(this),\n      root_: this.state.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(SectionC, {\n      definedQuestions: [],\n      handleSectionDuplicatingSettingsChange: this.handleDuplicatingSettingsChange.bind(this),\n      handleSectionClick: this.handleSectionChange.bind(this),\n      handleDeleteChildSectionOrQuestion: this.handleDeleteQuestionOrSection.bind(this),\n      parentPath: this.state.activeSectionPath,\n      handleQuestionChange: this.handleQuestionUpdate.bind(this),\n      section: this.state.activeSection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    })), React.createElement(Row, {\n      style: {\n        position: \"fixed\",\n        height: \"60px\",\n        bottom: 0,\n        width: \"100%\",\n        margin: \"0 auto\"\n      },\n      className: \"fixed-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    })));\n  }\n\n}\nSurveyForm.defaultProps = {\n  root: rootSection\n};","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/SurveyForm.tsx"],"names":["React","QAQuestion","getRandomId","Row","Toolbar","testQuestion","testQuestion2","testQuestion3","_","SectionC","RootSection","FormTree","QASurveyForm","constructor","content","id","name","setName","setContent","addContent","push","QuestionSection","duplicatingSettings","condition","undefined","enabled","duplicateTimes","value","type","setID","deleteContent","contentId","found","findIndex","item","splice","setDuplicatingSettings","dupe","rootSection","addSection","addQuestion","console","log","SurveyForm","Component","props","state","selectedNodes","expandedNodes","root","activeSection","activeSectionPath","handleAddSection","setState","prevState","cloned","clone","onChange","handleAddQuestion","handleDeleteQuestionOrSection","deleteid","path_","parent","slice","length","getFromPath","Error","removeQuestion","removeSection","parentSection","handleToolbarItemClick","handleQuestionUpdate","question","path","q","questions","updateFromQuestion","handleFormTreeNodeExpand","nodeData","_nodePath","e","isExpanded","union","handleFormTreeNodeCollapse","filter","handleFormTreeNodeClick","selectedQuestion","handleSectionChange","section","handleDuplicating","s","sectionToChange","find","render","bind","background","handleDuplicatingSettingsChange","position","height","bottom","width","margin","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { QAQuestion } from \"../form/question\";\nimport { ITreeNode } from \"@blueprintjs/core\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { Row } from \"reactstrap\";\nimport { Toolbar } from \"./Toolbar\";\n\nimport { testQuestion, testQuestion2, testQuestion3, testQuestion4, testQuestion5 } from \"../testData/TestQuestions\";\nimport _ from \"lodash\";\nimport { SectionC, RootSection } from \"./section\";\nimport { FormTree } from \"./formtree\";\nimport { QACondition } from \"../form/condition\";\nimport { DuplicateSettings, DupeSettings } from \"./duplicateSettings\";\n\nexport class QASurveyForm {\n    content!: (QuestionSection | QAQuestion)[];\n    id: string;\n    name!: string;\n    constructor() {\n        this.id = getRandomId(\"sf-\");\n    }\n    setName(name: string) {\n        this.name = name;\n        return this;\n    }\n\n    setContent(content: (QuestionSection | QAQuestion)[]) {\n        this.content = content;\n        return this;\n    }\n\n    addContent(content: QAQuestion | QuestionSection) {\n        this.content.push(content);\n        return this;\n    }\n\n}\n\nexport class QuestionSection {\n    name!: string;\n    content!: (QuestionSection | QAQuestion)[]\n    id: string\n    duplicatingSettings: DupeSettings;\n    constructor() {\n        this.id = getRandomId(\"ss-\");\n        this.duplicatingSettings ={condition: undefined, enabled: false, duplicateTimes: {value: \"\", type: \"number\"}}\n        this.content = []\n\n    }\n    setID(id: string) {\n        this.id = id;\n        return this;\n    }\n    setName(name: string) {\n        this.name = name;\n        return this;\n    }\n    setContent(content: (QuestionSection | QAQuestion)[]) {\n        this.content = content;\n        return this;\n    }\n\n    addContent(content: QuestionSection | QAQuestion) {\n        this.content.push(content);\n        return this;\n    }\n\n    deleteContent(contentId: string) {\n        let found = this.content.findIndex(item => item.id === contentId);\n        if (found > -1) {\n            this.content.splice(found, 1);\n        }\n    }\n    setDuplicatingSettings(dupe: DupeSettings){\n        this.duplicatingSettings = dupe;\n        return this;\n    }\n}\n\ninterface SurveyFormState {\n    activeSection: QuestionSection|RootSection,\n    activeSectionPath: number[]\n    selectedNodes: string[],\n    expandedNodes: string[],\n    root: RootSection\n\n}\ninterface SurveyFormProps {\n    root: RootSection,\n    onChange: (root: RootSection) => void\n}\nexport const rootSection = new RootSection().addSection([0]).addQuestion([0], [testQuestion]).addQuestion([0,0], [testQuestion2, testQuestion3]);\nconsole.log(rootSection);\n\n\nexport class SurveyForm extends React.Component<SurveyFormProps, SurveyFormState>{\n    static defaultProps = {\n        root: rootSection,\n    }\n \n    constructor(props: SurveyFormProps) {\n        super(props);\n        this.state = {\n            selectedNodes: [],\n            expandedNodes: [this.props.root.id],\n            root: this.props.root,\n            activeSection: this.props.root,\n            activeSectionPath: [0]\n        }\n    }\n\n\n\n    handleAddSection() {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            cloned.addSection(this.state.activeSectionPath);\n            return {\n                root: cloned\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.root);\n        })\n    }\n\n    handleAddQuestion() {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            cloned.addQuestion(this.state.activeSectionPath);\n            return {\n                root: cloned,\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.root);\n        })\n    }\n    handleDeleteQuestionOrSection(deleteid: string, path_: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let activeSection = prevState.activeSection;\n            let activeSectionPath = prevState.activeSectionPath;\n            let parent = path_.slice(0, path_.length - 1);\n            let cloned = _.clone(prevState.root);\n            let item = RootSection.getFromPath(path_,[this.state.root]);\n            if(deleteid !==item.id) throw new Error(\"cannot delete, id mismatch\");\n            if(item instanceof QAQuestion){\n                cloned.removeQuestion(item.id,path_);\n            }\n            else if(item instanceof QuestionSection){\n                cloned.removeSection(item.id, path_);\n                if(item.id===prevState.activeSection.id){\n                    let parentSection = RootSection.getFromPath(parent, [this.state.root]);\n                    if(!(parentSection instanceof QAQuestion)){\n                        activeSection = parentSection;\n                        activeSectionPath = parent;\n                    }\n                }\n            }\n        \n            return {\n                root: cloned,\n                activeSection: activeSection,\n                activeSectionPath: activeSectionPath\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.root);\n        })\n    }\n\n    handleToolbarItemClick(name: string) {\n        switch (name) {\n            case \"add-section\":\n                this.handleAddSection()\n                break;\n            case \"add-question\":\n                this.handleAddQuestion();\n                break;\n        }\n    }\n\n    handleQuestionUpdate(question: QAQuestion, path: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            let parent = path.slice(0, path.length - 1);\n            let parentSection = RootSection.getFromPath(parent, [cloned]);\n            if (!(parentSection instanceof QAQuestion)) {\n                let q = this.state.root.questions[question.id];\n                q.updateFromQuestion(question);\n\n            }\n\n            return {\n                root: cloned\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.root);\n        })\n    }\n\n\n    handleFormTreeNodeExpand(nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) {\n        nodeData.isExpanded = true;\n        this.setState((prevState: SurveyFormState) => {\n            let item = RootSection.getFromPath(_nodePath, [this.state.root]);\n            let expandedNodes = _.union([item.id], prevState.expandedNodes);\n            return {\n                expandedNodes: expandedNodes\n            }\n        })\n    }\n\n    handleFormTreeNodeCollapse(nodeData: ITreeNode) {\n        this.setState((prevState: SurveyFormState) => {\n            let expandedNodes = prevState.expandedNodes.filter((item => nodeData.id !== item));\n            return {\n                expandedNodes: expandedNodes\n            }\n        })\n    }\n\n\n    handleFormTreeNodeClick(nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) {\n        let item = RootSection.getFromPath(_nodePath, [this.state.root]);\n        if (!(item instanceof QAQuestion)) {\n            this.setState((prevState: SurveyFormState) => {\n                let expandedNodes = _.union([item.id], prevState.expandedNodes);\n                let selectedNodes = [item.id];\n                return {\n                    selectedNodes: selectedNodes,\n                    expandedNodes: expandedNodes,\n                    activeSection: !(item instanceof QAQuestion) ? item : prevState.activeSection,\n                    activeSectionPath: _nodePath\n                }\n\n            })\n        }\n        else {\n            this.setState((prevState: SurveyFormState) => {\n\n                let parent = _nodePath.length>1? _nodePath.slice(0, _nodePath.length - 1): _nodePath;\n                let parentSection =  RootSection.getFromPath(parent, [prevState.root]);\n                let selectedQuestion = RootSection.getFromPath(_nodePath, [prevState.root]);\n                let expandedNodes = prevState.expandedNodes;\n                let selectedNodes = [selectedQuestion.id];\n                if (!(parentSection instanceof QAQuestion)) {\n                    expandedNodes = _.union([parentSection.id], expandedNodes);\n                    selectedNodes.push(parentSection.id);\n                }\n\n                return {\n                    expandedNodes: expandedNodes,\n                    selectedNodes: selectedNodes,\n                    activeSection:!(parentSection instanceof QAQuestion) ? parentSection : prevState.activeSection,\n                    activeSectionPath: parent\n                }\n\n\n            })\n        }\n    }\n\n    handleSectionChange(id: string, path: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let section = RootSection.getFromPath(path, [prevState.root]);\n            let expandedNodes = prevState.expandedNodes;\n            let selectedNodes = []\n            if (section instanceof QuestionSection) {\n                expandedNodes = _.union([section.id], expandedNodes);\n                selectedNodes.push(section.id);\n            }\n            return {\n                expandedNodes: expandedNodes,\n                selectedNodes: selectedNodes,\n                activeSection: !(section instanceof QAQuestion)? section : prevState.activeSection,\n                activeSectionPath: path\n            }\n        })\n    }\n    handleDuplicating( id:string, dupe: DupeSettings){\n        this.setState((prevState: SurveyFormState)=>{\n            let s = prevState.activeSection;\n            let sectionToChange = s.content.find(item=>item.id===id);\n            if(sectionToChange instanceof QuestionSection){\n                sectionToChange.setDuplicatingSettings(dupe);\n            }\n\n        })\n    }\n\n    render() {\n\n        return (\n            <Row>\n                <Toolbar handleItemClick={this.handleToolbarItemClick.bind(this)}></Toolbar>\n                <div className=\"container\">\n\n                    <div style={{ background: \"transparent\" }} className=\"sidebar\">\n                        <div className=\"sidebar-wrapper\">\n                            <FormTree\n                                expandedNodes={this.state.expandedNodes}\n                                selectedNodes={this.state.selectedNodes}\n                                handleNodeExpand={this.handleFormTreeNodeExpand.bind(this)}\n                                handleNodeCollapse={this.handleFormTreeNodeCollapse.bind(this)}\n                                handleNodeClick={this.handleFormTreeNodeClick.bind(this)} \n                                root_={this.state.root}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"content\">\n                        <SectionC\n                            definedQuestions = {[]}\n                            handleSectionDuplicatingSettingsChange = {this.handleDuplicatingSettingsChange.bind(this)}\n                            handleSectionClick={this.handleSectionChange.bind(this)}\n                            handleDeleteChildSectionOrQuestion={this.handleDeleteQuestionOrSection.bind(this)}\n                            parentPath={this.state.activeSectionPath}\n                            handleQuestionChange={this.handleQuestionUpdate.bind(this)}\n                            section={this.state.activeSection} />\n                    </div>\n                    <Row style={{\n                        position: \"fixed\",\n                        height: \"60px\",\n                        bottom: 0,\n                        width: \"100%\",\n                        margin: \"0 auto\"\n                    }} className=\"fixed-footer\">\n\n\n\n                    </Row>\n                </div>\n            </Row>\n\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}