{"ast":null,"code":"var _jsxFileName = \"/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/AutofillCondition.tsx\";\nimport React from \"react\";\nimport { Table, Button } from \"reactstrap\";\nimport { QACondition } from \"../form/condition\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { openModal, destroyModal } from \"../utils/util\";\nimport { CreateConditionModal } from \"./CreateConditionModal\";\nimport _ from \"lodash\";\nimport { faKey, faPlusSquare, faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\nimport { ANSWER_TYPES } from \"./AnswerType\";\nimport { ValInput } from \"./ValInput\";\nimport { Switch } from \"@blueprintjs/core\";\nexport class AutofillCondition extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      aConditions: this.props.autoAnswer.answeringConditions || [],\n      isEnabled: this.props.autoAnswer.isEnabled\n    };\n  }\n\n  editIfTrueFalseValue(type, index, value) {\n    this.setState(prevState => {\n      let found = undefined;\n\n      let newConditions = _.clone(prevState.aConditions);\n\n      let selected = newConditions[index];\n\n      if (this.props.options && this.props.answerType.name === ANSWER_TYPES.SELECT) {\n        found = this.props.options.optionsMap[value];\n\n        if (type === \"true\") {\n          selected.ifTrue = found.id;\n        } else if (type === \"false\") {\n          selected.ifFalse = found.id;\n        }\n      } else {\n        if (type === 'true') selected.ifTrue = value;\n        if (type === 'false') selected.ifFalse = value;\n      }\n\n      return {\n        aConditions: newConditions\n      };\n    }, () => {\n      if (this.props.onChange) {\n        this.props.onChange({\n          isEnabled: this.state.isEnabled,\n          answeringConditions: this.state.aConditions\n        });\n      }\n    });\n  }\n\n  openConditionModal(index) {\n    let condition = this.state.aConditions[index];\n    let el = React.createElement(CreateConditionModal, {\n      definedQuestions: this.props.definedQuestions,\n      isOpen: true,\n      onSubmit: this.editCondition.bind(this, index),\n      onCancel: destroyModal.bind(this),\n      condition: condition.condition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    });\n    openModal(el);\n  }\n\n  changeEnabled() {\n    this.setState(prevState => {\n      return {\n        isEnabled: !prevState.isEnabled\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange({\n        isEnabled: this.state.isEnabled,\n        answeringConditions: this.state.aConditions\n      });\n    });\n  }\n\n  addAutoFillCondition() {\n    this.setState(prevState => {\n      let newConditions = _.clone(prevState.aConditions);\n\n      let answerCondition = {\n        condition: new QACondition(),\n        ifTrue: undefined,\n        ifFalse: undefined\n      };\n      newConditions.push(answerCondition);\n      return {\n        aConditions: newConditions\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange({\n        isEnabled: this.state.isEnabled,\n        answeringConditions: this.state.aConditions\n      });\n    });\n  }\n\n  editCondition(index, data) {\n    let cloned = _.clone(this.state.aConditions);\n\n    let condition = cloned[index].condition;\n\n    if (!condition) {\n      cloned[index].condition = new QACondition();\n    }\n\n    cloned[index].condition.setLiterals(data);\n    this.setState({\n      aConditions: cloned\n    }, () => {\n      destroyModal();\n      if (this.props.onChange) this.props.onChange({\n        isEnabled: this.state.isEnabled,\n        answeringConditions: this.state.aConditions\n      });\n    });\n  }\n\n  removeAutofillCondition(index) {\n    this.setState(prevState => {\n      let aConditions = _.clone(prevState.aConditions);\n\n      aConditions.splice(index, 1);\n      return {\n        aConditions: aConditions\n      };\n    }, () => {\n      if (this.props.onChange) this.props.onChange({\n        isEnabled: this.state.isEnabled,\n        answeringConditions: this.state.aConditions\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      checked: this.state.isEnabled,\n      onChange: this.changeEnabled.bind(this),\n      label: \"Enabled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Condition\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \" if True\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \" if False\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.state.aConditions.map((item, index) => {\n      let comparisonValueSelect = ifFalseOrTrue => React.createElement(ValInput, {\n        key: item.ifTrue,\n        onChange: data => this.editIfTrueFalseValue(ifFalseOrTrue, index, data.value),\n        options: this.props.options,\n        defaultValue: ifFalseOrTrue === \"true\" ? item.ifTrue : item.ifFalse && item.ifFalse,\n        type: this.props.answerType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      });\n\n      return React.createElement(\"tr\", {\n        key: \"af\".concat(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        onClick: () => this.openConditionModal(index),\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(FontAwesomeIcon, {\n        size: \"sm\",\n        icon: faKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, comparisonValueSelect(\"true\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, comparisonValueSelect(\"false\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(Button, {\n        size: \"sm\",\n        onClick: () => {\n          this.removeAutofillCondition(index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \" \", React.createElement(FontAwesomeIcon, {\n        icon: faWindowClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }))));\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"sm\",\n      onClick: () => this.addAutoFillCondition(),\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faPlusSquare,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/AutofillCondition.tsx"],"names":["React","Table","Button","QACondition","FontAwesomeIcon","openModal","destroyModal","CreateConditionModal","_","faKey","faPlusSquare","faWindowClose","ANSWER_TYPES","ValInput","Switch","AutofillCondition","Component","constructor","props","state","aConditions","autoAnswer","answeringConditions","isEnabled","editIfTrueFalseValue","type","index","value","setState","prevState","found","undefined","newConditions","clone","selected","options","answerType","name","SELECT","optionsMap","ifTrue","id","ifFalse","onChange","openConditionModal","condition","el","definedQuestions","editCondition","bind","changeEnabled","addAutoFillCondition","answerCondition","push","data","cloned","setLiterals","removeAutofillCondition","splice","render","map","item","comparisonValueSelect","ifFalseOrTrue"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Table, Button } from \"reactstrap\";\r\nimport { QACondition } from \"../form/condition\";\r\nimport { ILiteral } from \"../form/answer\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { openModal, destroyModal } from \"../utils/util\";\r\nimport { CreateConditionModal } from \"./CreateConditionModal\";\r\nimport { getRandomId } from \"../utils/getRandomId\";\r\nimport _ from \"lodash\";\r\nimport { faKey, faPlusSquare, faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { IAnswerCondition, QAQuestion, IAutoAnswer } from \"../form/question\";\r\nimport { IValueType, ANSWER_TYPES } from \"./AnswerType\";\r\nimport { ValInput } from \"./ValInput\";\r\nimport { AnswerOptions } from \"./AnswerOptions\";\r\nimport { Switch } from \"@blueprintjs/core\";\r\n\r\ninterface AutoAnswerProps {\r\n    definedQuestions: { [key: string]: QAQuestion },\r\n    onChange: (a: IAutoAnswer) => void,\r\n    options?: AnswerOptions,\r\n    answerType: IValueType,\r\n    autoAnswer: IAutoAnswer\r\n}\r\ninterface AutoAnswerState {\r\n    aConditions: IAnswerCondition[];\r\n    isEnabled: boolean,\r\n}\r\n\r\nexport class AutofillCondition extends React.Component<AutoAnswerProps, AutoAnswerState> {\r\n    constructor(props: AutoAnswerProps) {\r\n        super(props);\r\n        this.state = {\r\n            aConditions: this.props.autoAnswer.answeringConditions || [],\r\n            isEnabled: this.props.autoAnswer.isEnabled\r\n        }\r\n    }\r\n\r\n    editIfTrueFalseValue(type: string, index: number, value: string) {\r\n        this.setState((prevState: AutoAnswerState) => {\r\n            let found = undefined;\r\n            let newConditions = _.clone(prevState.aConditions);\r\n            let selected = newConditions[index];\r\n            if (this.props.options && this.props.answerType.name === ANSWER_TYPES.SELECT) {\r\n                found = this.props.options.optionsMap[value];\r\n                if (type === \"true\") {\r\n                    selected.ifTrue = found.id\r\n\r\n                }\r\n                else if (type === \"false\") {\r\n                    selected.ifFalse = found.id\r\n                }\r\n            }\r\n            else {\r\n                if (type === 'true') selected.ifTrue = value;\r\n                if (type === 'false') selected.ifFalse = value;\r\n            }\r\n\r\n\r\n\r\n            return {\r\n                aConditions: newConditions\r\n            }\r\n        }, () => {\r\n            if (this.props.onChange) {\r\n                this.props.onChange({ isEnabled: this.state.isEnabled, answeringConditions: this.state.aConditions })\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n    openConditionModal(index: number) {\r\n        let condition: IAnswerCondition = this.state.aConditions[index];\r\n\r\n        let el = <CreateConditionModal\r\n            definedQuestions={this.props.definedQuestions}\r\n            isOpen={true}\r\n            onSubmit={this.editCondition.bind(this, index)}\r\n            onCancel={destroyModal.bind(this)}\r\n            condition={condition.condition} />\r\n        openModal(el);\r\n    }\r\n    changeEnabled() {\r\n        this.setState((prevState: AutoAnswerState) => {\r\n            return {\r\n                isEnabled: !prevState.isEnabled\r\n            }\r\n        }, () => {\r\n            if (this.props.onChange)\r\n                this.props.onChange({ isEnabled: this.state.isEnabled, answeringConditions: this.state.aConditions })\r\n\r\n        })\r\n    }\r\n\r\n    addAutoFillCondition() {\r\n        this.setState((prevState: AutoAnswerState) => {\r\n            let newConditions = _.clone(prevState.aConditions);\r\n            let answerCondition: IAnswerCondition = {\r\n                condition: new QACondition(),\r\n                ifTrue: undefined,\r\n                ifFalse: undefined\r\n            }\r\n            newConditions.push(answerCondition);\r\n            return {\r\n                aConditions: newConditions\r\n            }\r\n        }, () => {\r\n            if (this.props.onChange)\r\n                this.props.onChange({ isEnabled: this.state.isEnabled, answeringConditions: this.state.aConditions })\r\n        })\r\n    }\r\n\r\n    editCondition(index: number, data: ILiteral[]) {\r\n        let cloned = _.clone(this.state.aConditions);\r\n        let condition = cloned[index].condition;\r\n        if (!condition) {\r\n            cloned[index].condition = new QACondition();\r\n        }\r\n        cloned[index].condition.setLiterals(data);\r\n        this.setState({\r\n            aConditions: cloned\r\n        }, () => {\r\n            destroyModal();\r\n            if (this.props.onChange) this.props.onChange({ isEnabled: this.state.isEnabled, answeringConditions: this.state.aConditions })\r\n\r\n        })\r\n    }\r\n\r\n    removeAutofillCondition(index: number) {\r\n        this.setState((prevState: AutoAnswerState) => {\r\n            let aConditions = _.clone(prevState.aConditions);\r\n            aConditions.splice(index, 1);\r\n            return {\r\n                aConditions: aConditions\r\n            }\r\n\r\n        }, () => {\r\n            if (this.props.onChange) this.props.onChange({ isEnabled: this.state.isEnabled, answeringConditions: this.state.aConditions })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Switch checked={this.state.isEnabled} onChange={this.changeEnabled.bind(this)} label=\"Enabled\"></Switch>\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th></th>\r\n                            <th>Condition</th>\r\n                            <th> if True</th>\r\n                            <th> if False</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.aConditions.map((item: IAnswerCondition, index: number) => {\r\n\r\n                            let comparisonValueSelect = (ifFalseOrTrue: string) => <ValInput\r\n                                key={item.ifTrue}\r\n                                onChange={(data: { value: string }) => this.editIfTrueFalseValue(ifFalseOrTrue, index, data.value)}\r\n                                options={this.props.options}\r\n                                defaultValue={ifFalseOrTrue === \"true\" ? item.ifTrue : (item.ifFalse && item.ifFalse)}\r\n                                type={this.props.answerType} />\r\n\r\n                            return (<tr key={`af${index}`}>\r\n                                <td></td>\r\n                                <td><Button type=\"button\" onClick={() => this.openConditionModal(index)}\r\n                                    size=\"sm\">\r\n                                    <FontAwesomeIcon size={\"sm\"} icon={faKey} /></Button>\r\n                                </td>\r\n                                <td>{comparisonValueSelect(\"true\")}</td>\r\n                                <td>{comparisonValueSelect(\"false\")}</td>\r\n                                <td><Button size=\"sm\" onClick={() => { this.removeAutofillCondition(index) }}> <FontAwesomeIcon icon={faWindowClose} /></Button></td>\r\n                            </tr>)\r\n                        })}\r\n                        <tr>\r\n                            <td ><Button size=\"sm\" onClick={() => this.addAutoFillCondition()} type=\"button\" >\r\n                                <FontAwesomeIcon icon={faPlusSquare} />\r\n                            </Button></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                        </tr>\r\n\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}