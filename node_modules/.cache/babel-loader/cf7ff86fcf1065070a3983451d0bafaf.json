{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport DayPicker from \"react-day-picker\";\nimport { AbstractPureComponent, Boundary, Classes, DISPLAYNAME_PREFIX, InputGroup, Intent, Keys, Popover, Position, Utils } from \"@blueprintjs/core\";\nimport { isDateValid, isDayInRange } from \"./common/dateUtils\";\nimport * as Errors from \"./common/errors\";\nimport { getFormattedDateString } from \"./dateFormat\";\nimport { getDefaultMaxDate, getDefaultMinDate } from \"./datePickerCore\";\nimport { DateRangePicker } from \"./dateRangePicker\";\n\nvar DateRangeInput =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DateRangeInput, _super);\n\n  function DateRangeInput(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.refHandlers = {\n      endInputRef: function (ref) {\n        _this.endInputRef = ref;\n        Utils.safeInvoke(_this.props.endInputProps.inputRef, ref);\n      },\n      startInputRef: function (ref) {\n        _this.startInputRef = ref;\n        Utils.safeInvoke(_this.props.startInputProps.inputRef, ref);\n      }\n    };\n\n    _this.renderInputGroup = function (boundary) {\n      var inputProps = _this.getInputProps(boundary);\n\n      var handleInputEvent = boundary === Boundary.START ? _this.handleStartInputEvent : _this.handleEndInputEvent;\n      return React.createElement(InputGroup, tslib_1.__assign({\n        autoComplete: \"off\"\n      }, inputProps, {\n        disabled: _this.props.disabled,\n        intent: _this.isInputInErrorState(boundary) ? Intent.DANGER : inputProps.intent,\n        inputRef: _this.getInputRef(boundary),\n        onBlur: handleInputEvent,\n        onChange: handleInputEvent,\n        onClick: handleInputEvent,\n        onFocus: handleInputEvent,\n        onKeyDown: handleInputEvent,\n        onMouseDown: handleInputEvent,\n        placeholder: _this.getInputPlaceholderString(boundary),\n        value: _this.getInputDisplayString(boundary)\n      }));\n    }; // Callbacks - DateRangePicker\n    // ===========================\n\n\n    _this.handleDateRangePickerChange = function (selectedRange, didSubmitWithEnter) {\n      if (didSubmitWithEnter === void 0) {\n        didSubmitWithEnter = false;\n      } // ignore mouse events in the date-range picker if the popover is animating closed.\n\n\n      if (!_this.state.isOpen) {\n        return;\n      }\n\n      var selectedStart = selectedRange[0],\n          selectedEnd = selectedRange[1];\n      var isOpen = true;\n      var isStartInputFocused;\n      var isEndInputFocused;\n      var startHoverString;\n      var endHoverString;\n\n      if (selectedStart == null) {\n        // focus the start field by default or if only an end date is specified\n        isStartInputFocused = true;\n        isEndInputFocused = false; // for clarity, hide the hover string until the mouse moves over a different date\n\n        startHoverString = null;\n      } else if (selectedEnd == null) {\n        // focus the end field if a start date is specified\n        isStartInputFocused = false;\n        isEndInputFocused = true;\n        endHoverString = null;\n      } else if (_this.props.closeOnSelection) {\n        isOpen = false;\n        isStartInputFocused = false; // if we submit via click or Tab, the focus will have moved already.\n        // it we submit with Enter, the focus won't have moved, and setting\n        // the flag to false won't have an effect anyway, so leave it true.\n\n        isEndInputFocused = didSubmitWithEnter ? true : false;\n      } else if (_this.state.lastFocusedField === Boundary.START) {\n        // keep the start field focused\n        isStartInputFocused = true;\n        isEndInputFocused = false;\n      } else {\n        // keep the end field focused\n        isStartInputFocused = false;\n        isEndInputFocused = true;\n      }\n\n      var baseStateChange = {\n        endHoverString: endHoverString,\n        endInputString: _this.formatDate(selectedEnd),\n        isEndInputFocused: isEndInputFocused,\n        isOpen: isOpen,\n        isStartInputFocused: isStartInputFocused,\n        startHoverString: startHoverString,\n        startInputString: _this.formatDate(selectedStart),\n        wasLastFocusChangeDueToHover: false\n      };\n\n      if (_this.isControlled()) {\n        _this.setState(baseStateChange);\n      } else {\n        _this.setState(tslib_1.__assign({}, baseStateChange, {\n          selectedEnd: selectedEnd,\n          selectedStart: selectedStart\n        }));\n      }\n\n      Utils.safeInvoke(_this.props.onChange, selectedRange);\n    };\n\n    _this.handleDateRangePickerHoverChange = function (hoveredRange, _hoveredDay, hoveredBoundary) {\n      // ignore mouse events in the date-range picker if the popover is animating closed.\n      if (!_this.state.isOpen) {\n        return;\n      }\n\n      if (hoveredRange == null) {\n        // undo whatever focus changes we made while hovering over various calendar dates\n        var isEndInputFocused = _this.state.boundaryToModify === Boundary.END;\n\n        _this.setState({\n          endHoverString: null,\n          isEndInputFocused: isEndInputFocused,\n          isStartInputFocused: !isEndInputFocused,\n          lastFocusedField: _this.state.boundaryToModify,\n          startHoverString: null\n        });\n      } else {\n        var hoveredStart = hoveredRange[0],\n            hoveredEnd = hoveredRange[1];\n        var isStartInputFocused = hoveredBoundary != null ? hoveredBoundary === Boundary.START : _this.state.isStartInputFocused;\n        var isEndInputFocused = hoveredBoundary != null ? hoveredBoundary === Boundary.END : _this.state.isEndInputFocused;\n\n        _this.setState({\n          endHoverString: _this.formatDate(hoveredEnd),\n          isEndInputFocused: isEndInputFocused,\n          isStartInputFocused: isStartInputFocused,\n          lastFocusedField: isStartInputFocused ? Boundary.START : Boundary.END,\n          shouldSelectAfterUpdate: _this.props.selectAllOnFocus,\n          startHoverString: _this.formatDate(hoveredStart),\n          wasLastFocusChangeDueToHover: true\n        });\n      }\n    }; // Callbacks - Input\n    // =================\n    // instantiate these two functions once so we don't have to for each callback on each render.\n\n\n    _this.handleStartInputEvent = function (e) {\n      _this.handleInputEvent(e, Boundary.START);\n    };\n\n    _this.handleEndInputEvent = function (e) {\n      _this.handleInputEvent(e, Boundary.END);\n    };\n\n    _this.handleInputEvent = function (e, boundary) {\n      switch (e.type) {\n        case \"blur\":\n          _this.handleInputBlur(e, boundary);\n\n          break;\n\n        case \"change\":\n          _this.handleInputChange(e, boundary);\n\n          break;\n\n        case \"click\":\n          _this.handleInputClick(e);\n\n          break;\n\n        case \"focus\":\n          _this.handleInputFocus(e, boundary);\n\n          break;\n\n        case \"keydown\":\n          _this.handleInputKeyDown(e);\n\n          break;\n\n        case \"mousedown\":\n          _this.handleInputMouseDown();\n\n          break;\n\n        default:\n          break;\n      }\n\n      var inputProps = _this.getInputProps(boundary);\n\n      var callbackFn = _this.getInputGroupCallbackForEvent(e, inputProps);\n\n      Utils.safeInvoke(callbackFn, e);\n    }; // add a keydown listener to persistently change focus when tabbing:\n    // - if focused in start field, Tab moves focus to end field\n    // - if focused in end field, Shift+Tab moves focus to start field\n\n\n    _this.handleInputKeyDown = function (e) {\n      var isTabPressed = e.which === Keys.TAB;\n      var isEnterPressed = e.which === Keys.ENTER;\n      var isShiftPressed = e.shiftKey;\n      var _a = _this.state,\n          selectedStart = _a.selectedStart,\n          selectedEnd = _a.selectedEnd; // order of JS events is our enemy here. when tabbing between fields,\n      // this handler will fire in the middle of a focus exchange when no\n      // field is currently focused. we work around this by referring to the\n      // most recently focused field, rather than the currently focused field.\n\n      var wasStartFieldFocused = _this.state.lastFocusedField === Boundary.START;\n      var wasEndFieldFocused = _this.state.lastFocusedField === Boundary.END; // move focus to the other field\n\n      if (isTabPressed) {\n        var isEndInputFocused = void 0;\n        var isStartInputFocused = void 0;\n        var isOpen = true;\n\n        if (wasStartFieldFocused && !isShiftPressed) {\n          isStartInputFocused = false;\n          isEndInputFocused = true; // prevent the default focus-change behavior to avoid race conditions;\n          // we'll handle the focus change ourselves in componentDidUpdate.\n\n          e.preventDefault();\n        } else if (wasEndFieldFocused && isShiftPressed) {\n          isStartInputFocused = true;\n          isEndInputFocused = false;\n          e.preventDefault();\n        } else {\n          // don't prevent default here, otherwise Tab won't do anything.\n          isStartInputFocused = false;\n          isEndInputFocused = false;\n          isOpen = false;\n        }\n\n        _this.setState({\n          isEndInputFocused: isEndInputFocused,\n          isOpen: isOpen,\n          isStartInputFocused: isStartInputFocused,\n          wasLastFocusChangeDueToHover: false\n        });\n      } else if (wasStartFieldFocused && isEnterPressed) {\n        var nextStartDate = _this.parseDate(_this.state.startInputString);\n\n        _this.handleDateRangePickerChange([nextStartDate, selectedEnd], true);\n      } else if (wasEndFieldFocused && isEnterPressed) {\n        var nextEndDate = _this.parseDate(_this.state.endInputString);\n\n        _this.handleDateRangePickerChange([selectedStart, nextEndDate], true);\n      } else {\n        // let the default keystroke happen without side effects\n        return;\n      }\n    };\n\n    _this.handleInputMouseDown = function () {\n      // clicking in the field constitutes an explicit focus change. we update\n      // the flag on \"mousedown\" instead of on \"click\", because it needs to be\n      // set before onFocus is called (\"click\" triggers after \"focus\").\n      _this.setState({\n        wasLastFocusChangeDueToHover: false\n      });\n    };\n\n    _this.handleInputClick = function (e) {\n      // unless we stop propagation on this event, a click within an input\n      // will close the popover almost as soon as it opens.\n      e.stopPropagation();\n    };\n\n    _this.handleInputFocus = function (_e, boundary) {\n      var _a = _this.getStateKeysAndValuesForBoundary(boundary),\n          keys = _a.keys,\n          values = _a.values;\n\n      var inputString = getFormattedDateString(values.selectedValue, _this.props, true); // change the boundary only if the user explicitly focused in the field.\n      // focus changes from hovering don't count; they're just temporary.\n\n      var boundaryToModify = _this.state.wasLastFocusChangeDueToHover ? _this.state.boundaryToModify : boundary;\n\n      _this.setState((_b = {}, _b[keys.inputString] = inputString, _b[keys.isInputFocused] = true, _b.boundaryToModify = boundaryToModify, _b.isOpen = true, _b.lastFocusedField = boundary, _b.shouldSelectAfterUpdate = _this.props.selectAllOnFocus, _b.wasLastFocusChangeDueToHover = false, _b));\n\n      var _b;\n    };\n\n    _this.handleInputBlur = function (_e, boundary) {\n      var _a = _this.getStateKeysAndValuesForBoundary(boundary),\n          keys = _a.keys,\n          values = _a.values;\n\n      var maybeNextDate = _this.parseDate(values.inputString);\n\n      var isValueControlled = _this.isControlled();\n\n      var nextState = (_b = {}, _b[keys.isInputFocused] = false, _b.shouldSelectAfterUpdate = false, _b);\n\n      if (_this.isInputEmpty(values.inputString)) {\n        if (isValueControlled) {\n          nextState = tslib_1.__assign({}, nextState, (_c = {}, _c[keys.inputString] = getFormattedDateString(values.controlledValue, _this.props), _c));\n        } else {\n          nextState = tslib_1.__assign({}, nextState, (_d = {}, _d[keys.inputString] = null, _d[keys.selectedValue] = null, _d));\n        }\n      } else if (!_this.isNextDateRangeValid(maybeNextDate, boundary)) {\n        if (!isValueControlled) {\n          nextState = tslib_1.__assign({}, nextState, (_f = {}, _f[keys.inputString] = null, _f[keys.selectedValue] = maybeNextDate, _f));\n        }\n\n        Utils.safeInvoke(_this.props.onError, _this.getDateRangeForCallback(maybeNextDate, boundary));\n      }\n\n      _this.setState(nextState);\n\n      var _b, _c, _d, _f;\n    };\n\n    _this.handleInputChange = function (e, boundary) {\n      var inputString = e.target.value;\n\n      var keys = _this.getStateKeysAndValuesForBoundary(boundary).keys;\n\n      var maybeNextDate = _this.parseDate(inputString);\n\n      var isValueControlled = _this.isControlled();\n\n      var nextState = {\n        shouldSelectAfterUpdate: false\n      };\n\n      if (inputString.length === 0) {\n        // this case will be relevant when we start showing the hovered range in the input\n        // fields. goal is to show an empty field for clarity until the mouse moves over a\n        // different date.\n        var baseState = tslib_1.__assign({}, nextState, (_a = {}, _a[keys.inputString] = \"\", _a));\n\n        if (isValueControlled) {\n          nextState = baseState;\n        } else {\n          nextState = tslib_1.__assign({}, baseState, (_b = {}, _b[keys.selectedValue] = null, _b));\n        }\n\n        Utils.safeInvoke(_this.props.onChange, _this.getDateRangeForCallback(null, boundary));\n      } else if (_this.isDateValidAndInRange(maybeNextDate)) {\n        // note that error cases that depend on both fields (e.g. overlapping dates) should fall\n        // through into this block so that the UI can update immediately, possibly with an error\n        // message on the other field.\n        // also, clear the hover string to ensure the most recent keystroke appears.\n        var baseState = tslib_1.__assign({}, nextState, (_c = {}, _c[keys.hoverString] = null, _c[keys.inputString] = inputString, _c));\n\n        if (isValueControlled) {\n          nextState = baseState;\n        } else {\n          nextState = tslib_1.__assign({}, baseState, (_d = {}, _d[keys.selectedValue] = maybeNextDate, _d));\n        }\n\n        if (_this.isNextDateRangeValid(maybeNextDate, boundary)) {\n          Utils.safeInvoke(_this.props.onChange, _this.getDateRangeForCallback(maybeNextDate, boundary));\n        }\n      } else {\n        // again, clear the hover string to ensure the most recent keystroke appears\n        nextState = tslib_1.__assign({}, nextState, (_f = {}, _f[keys.inputString] = inputString, _f[keys.hoverString] = null, _f));\n      }\n\n      _this.setState(nextState);\n\n      var _a, _b, _c, _d, _f;\n    }; // Callbacks - Popover\n    // ===================\n\n\n    _this.handlePopoverClose = function () {\n      _this.setState({\n        isOpen: false\n      });\n\n      Utils.safeInvoke(_this.props.popoverProps.onClose);\n    };\n\n    _this.getInitialRange = function (props) {\n      if (props === void 0) {\n        props = _this.props;\n      }\n\n      var defaultValue = props.defaultValue,\n          value = props.value;\n\n      if (value != null) {\n        return value;\n      } else if (defaultValue != null) {\n        return defaultValue;\n      } else {\n        return [null, null];\n      }\n    };\n\n    _this.getSelectedRange = function () {\n      var selectedStart;\n      var selectedEnd;\n\n      if (_this.isControlled()) {\n        _a = _this.props.value, selectedStart = _a[0], selectedEnd = _a[1];\n      } else {\n        selectedStart = _this.state.selectedStart;\n        selectedEnd = _this.state.selectedEnd;\n      } // this helper function checks if the provided boundary date *would* overlap the selected\n      // other boundary date. providing the already-selected start date simply tells us if we're\n      // currently in an overlapping state.\n\n\n      var doBoundaryDatesOverlap = _this.doBoundaryDatesOverlap(selectedStart, Boundary.START);\n\n      var dateRange = [selectedStart, doBoundaryDatesOverlap ? undefined : selectedEnd];\n      return dateRange.map(function (selectedBound) {\n        return _this.isDateValidAndInRange(selectedBound) ? selectedBound : undefined;\n      });\n\n      var _a;\n    };\n\n    _this.getInputGroupCallbackForEvent = function (e, inputProps) {\n      // use explicit switch cases to ensure callback function names remain grep-able in the codebase.\n      switch (e.type) {\n        case \"blur\":\n          return inputProps.onBlur;\n\n        case \"change\":\n          return inputProps.onChange;\n\n        case \"click\":\n          return inputProps.onClick;\n\n        case \"focus\":\n          return inputProps.onFocus;\n\n        case \"keydown\":\n          return inputProps.onKeyDown;\n\n        case \"mousedown\":\n          return inputProps.onMouseDown;\n\n        default:\n          return undefined;\n      }\n    };\n\n    _this.getInputDisplayString = function (boundary) {\n      var values = _this.getStateKeysAndValuesForBoundary(boundary).values;\n\n      var isInputFocused = values.isInputFocused,\n          inputString = values.inputString,\n          selectedValue = values.selectedValue,\n          hoverString = values.hoverString;\n\n      if (hoverString != null) {\n        return hoverString;\n      } else if (isInputFocused) {\n        return inputString == null ? \"\" : inputString;\n      } else if (selectedValue == null) {\n        return \"\";\n      } else if (_this.doesEndBoundaryOverlapStartBoundary(selectedValue, boundary)) {\n        return _this.props.overlappingDatesMessage;\n      } else {\n        return getFormattedDateString(selectedValue, _this.props);\n      }\n    };\n\n    _this.getInputPlaceholderString = function (boundary) {\n      var isStartBoundary = boundary === Boundary.START;\n      var isEndBoundary = boundary === Boundary.END;\n\n      var inputProps = _this.getInputProps(boundary);\n\n      var isInputFocused = _this.getStateKeysAndValuesForBoundary(boundary).values.isInputFocused; // use the custom placeholder text for the input, if providied\n\n\n      if (inputProps.placeholder != null) {\n        return inputProps.placeholder;\n      } else if (isStartBoundary) {\n        return isInputFocused ? _this.state.formattedMinDateString : \"Start date\";\n      } else if (isEndBoundary) {\n        return isInputFocused ? _this.state.formattedMaxDateString : \"End date\";\n      } else {\n        return \"\";\n      }\n    };\n\n    _this.getInputProps = function (boundary) {\n      return boundary === Boundary.START ? _this.props.startInputProps : _this.props.endInputProps;\n    };\n\n    _this.getInputRef = function (boundary) {\n      return boundary === Boundary.START ? _this.refHandlers.startInputRef : _this.refHandlers.endInputRef;\n    };\n\n    _this.getStateKeysAndValuesForBoundary = function (boundary) {\n      var controlledRange = _this.props.value;\n\n      if (boundary === Boundary.START) {\n        return {\n          keys: {\n            hoverString: \"startHoverString\",\n            inputString: \"startInputString\",\n            isInputFocused: \"isStartInputFocused\",\n            selectedValue: \"selectedStart\"\n          },\n          values: {\n            controlledValue: controlledRange != null ? controlledRange[0] : undefined,\n            hoverString: _this.state.startHoverString,\n            inputString: _this.state.startInputString,\n            isInputFocused: _this.state.isStartInputFocused,\n            selectedValue: _this.state.selectedStart\n          }\n        };\n      } else {\n        return {\n          keys: {\n            hoverString: \"endHoverString\",\n            inputString: \"endInputString\",\n            isInputFocused: \"isEndInputFocused\",\n            selectedValue: \"selectedEnd\"\n          },\n          values: {\n            controlledValue: controlledRange != null ? controlledRange[1] : undefined,\n            hoverString: _this.state.endHoverString,\n            inputString: _this.state.endInputString,\n            isInputFocused: _this.state.isEndInputFocused,\n            selectedValue: _this.state.selectedEnd\n          }\n        };\n      }\n    };\n\n    _this.getDateRangeForCallback = function (currDate, currBoundary) {\n      var otherBoundary = _this.getOtherBoundary(currBoundary);\n\n      var otherDate = _this.getStateKeysAndValuesForBoundary(otherBoundary).values.selectedValue;\n\n      return currBoundary === Boundary.START ? [currDate, otherDate] : [otherDate, currDate];\n    };\n\n    _this.getOtherBoundary = function (boundary) {\n      return boundary === Boundary.START ? Boundary.END : Boundary.START;\n    };\n\n    _this.doBoundaryDatesOverlap = function (date, boundary) {\n      var allowSingleDayRange = _this.props.allowSingleDayRange;\n\n      var otherBoundary = _this.getOtherBoundary(boundary);\n\n      var otherBoundaryDate = _this.getStateKeysAndValuesForBoundary(otherBoundary).values.selectedValue;\n\n      if (date == null || otherBoundaryDate == null) {\n        return false;\n      }\n\n      if (boundary === Boundary.START) {\n        var isAfter = DayPicker.DateUtils.isDayAfter(date, otherBoundaryDate);\n        return isAfter || !allowSingleDayRange && DayPicker.DateUtils.isSameDay(date, otherBoundaryDate);\n      } else {\n        var isBefore = DayPicker.DateUtils.isDayBefore(date, otherBoundaryDate);\n        return isBefore || !allowSingleDayRange && DayPicker.DateUtils.isSameDay(date, otherBoundaryDate);\n      }\n    };\n    /**\n     * Returns true if the provided boundary is an END boundary overlapping the\n     * selected start date. (If the boundaries overlap, we consider the END\n     * boundary to be erroneous.)\n     */\n\n\n    _this.doesEndBoundaryOverlapStartBoundary = function (boundaryDate, boundary) {\n      return boundary === Boundary.START ? false : _this.doBoundaryDatesOverlap(boundaryDate, boundary);\n    };\n\n    _this.isControlled = function () {\n      return _this.props.value !== undefined;\n    };\n\n    _this.isInputEmpty = function (inputString) {\n      return inputString == null || inputString.length === 0;\n    };\n\n    _this.isInputInErrorState = function (boundary) {\n      var values = _this.getStateKeysAndValuesForBoundary(boundary).values;\n\n      var isInputFocused = values.isInputFocused,\n          hoverString = values.hoverString,\n          inputString = values.inputString,\n          selectedValue = values.selectedValue;\n\n      if (hoverString != null || _this.isInputEmpty(inputString)) {\n        // don't show an error state while we're hovering over a valid date.\n        return false;\n      }\n\n      var boundaryValue = isInputFocused ? _this.parseDate(inputString) : selectedValue;\n      return boundaryValue != null && (!_this.isDateValidAndInRange(boundaryValue) || _this.doesEndBoundaryOverlapStartBoundary(boundaryValue, boundary));\n    };\n\n    _this.isDateValidAndInRange = function (date) {\n      return isDateValid(date) && isDayInRange(date, [_this.props.minDate, _this.props.maxDate]);\n    };\n\n    _this.reset(props);\n\n    return _this;\n  }\n  /**\n   * Public method intended for unit testing only. Do not use in feature work!\n   */\n\n\n  DateRangeInput.prototype.reset = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var _a = this.getInitialRange(),\n        selectedStart = _a[0],\n        selectedEnd = _a[1];\n\n    this.state = {\n      formattedMaxDateString: this.getFormattedMinMaxDateString(props, \"maxDate\"),\n      formattedMinDateString: this.getFormattedMinMaxDateString(props, \"minDate\"),\n      isOpen: false,\n      selectedEnd: selectedEnd,\n      selectedStart: selectedStart\n    };\n  };\n\n  DateRangeInput.prototype.componentDidUpdate = function () {\n    var _a = this.state,\n        isStartInputFocused = _a.isStartInputFocused,\n        isEndInputFocused = _a.isEndInputFocused,\n        shouldSelectAfterUpdate = _a.shouldSelectAfterUpdate;\n    var shouldFocusStartInput = this.shouldFocusInputRef(isStartInputFocused, this.startInputRef);\n    var shouldFocusEndInput = this.shouldFocusInputRef(isEndInputFocused, this.endInputRef);\n\n    if (shouldFocusStartInput) {\n      this.startInputRef.focus();\n    } else if (shouldFocusEndInput) {\n      this.endInputRef.focus();\n    }\n\n    if (isStartInputFocused && shouldSelectAfterUpdate) {\n      this.startInputRef.select();\n    } else if (isEndInputFocused && shouldSelectAfterUpdate) {\n      this.endInputRef.select();\n    }\n  };\n\n  DateRangeInput.prototype.render = function () {\n    var _a = this.props.popoverProps,\n        popoverProps = _a === void 0 ? {} : _a;\n    var popoverContent = React.createElement(DateRangePicker, tslib_1.__assign({}, this.props, {\n      boundaryToModify: this.state.boundaryToModify,\n      onChange: this.handleDateRangePickerChange,\n      onHoverChange: this.handleDateRangePickerHoverChange,\n      value: this.getSelectedRange()\n    }));\n    var popoverClassName = classNames(popoverProps.className, this.props.className); // allow custom props for the popover and each input group, but pass them in an order that\n    // guarantees only some props are overridable.\n\n    return React.createElement(Popover, tslib_1.__assign({\n      isOpen: this.state.isOpen,\n      position: Position.BOTTOM_LEFT\n    }, this.props.popoverProps, {\n      autoFocus: false,\n      className: popoverClassName,\n      content: popoverContent,\n      enforceFocus: false,\n      onClose: this.handlePopoverClose\n    }), React.createElement(\"div\", {\n      className: Classes.CONTROL_GROUP\n    }, this.renderInputGroup(Boundary.START), this.renderInputGroup(Boundary.END)));\n  };\n\n  DateRangeInput.prototype.componentWillReceiveProps = function (nextProps) {\n    _super.prototype.componentWillReceiveProps.call(this, nextProps);\n\n    var nextState = {};\n\n    if (nextProps.value !== this.props.value) {\n      var _a = this.getInitialRange(nextProps),\n          selectedStart = _a[0],\n          selectedEnd = _a[1];\n\n      nextState = tslib_1.__assign({}, nextState, {\n        selectedStart: selectedStart,\n        selectedEnd: selectedEnd\n      });\n    } // cache the formatted date strings to avoid computing on each render.\n\n\n    if (nextProps.minDate !== this.props.minDate) {\n      var formattedMinDateString = this.getFormattedMinMaxDateString(nextProps, \"minDate\");\n      nextState = tslib_1.__assign({}, nextState, {\n        formattedMinDateString: formattedMinDateString\n      });\n    }\n\n    if (nextProps.maxDate !== this.props.maxDate) {\n      var formattedMaxDateString = this.getFormattedMinMaxDateString(nextProps, \"maxDate\");\n      nextState = tslib_1.__assign({}, nextState, {\n        formattedMaxDateString: formattedMaxDateString\n      });\n    }\n\n    this.setState(nextState);\n  };\n\n  DateRangeInput.prototype.validateProps = function (props) {\n    if (props.value === null) {\n      throw new Error(Errors.DATERANGEINPUT_NULL_VALUE);\n    }\n  }; // Helpers\n  // =======\n\n\n  DateRangeInput.prototype.shouldFocusInputRef = function (isFocused, inputRef) {\n    return isFocused && inputRef !== undefined && document.activeElement !== inputRef;\n  };\n\n  DateRangeInput.prototype.isNextDateRangeValid = function (nextDate, boundary) {\n    return this.isDateValidAndInRange(nextDate) && !this.doBoundaryDatesOverlap(nextDate, boundary);\n  }; // this is a slightly kludgy function, but it saves us a good amount of repeated code between\n  // the constructor and componentWillReceiveProps.\n\n\n  DateRangeInput.prototype.getFormattedMinMaxDateString = function (props, propName) {\n    var date = props[propName];\n    var defaultDate = DateRangeInput.defaultProps[propName]; // default values are applied only if a prop is strictly `undefined`\n    // See: https://facebook.github.io/react/docs/react-component.html#defaultprops\n\n    return getFormattedDateString(date === undefined ? defaultDate : date, this.props);\n  };\n\n  DateRangeInput.prototype.parseDate = function (dateString) {\n    if (dateString === this.props.outOfRangeMessage || dateString === this.props.invalidDateMessage) {\n      return null;\n    }\n\n    var _a = this.props,\n        locale = _a.locale,\n        parseDate = _a.parseDate;\n    var newDate = parseDate(dateString, locale);\n    return newDate === false ? new Date(undefined) : newDate;\n  };\n\n  DateRangeInput.prototype.formatDate = function (date) {\n    if (!this.isDateValidAndInRange(date)) {\n      return \"\";\n    }\n\n    var _a = this.props,\n        locale = _a.locale,\n        formatDate = _a.formatDate;\n    return formatDate(date, locale);\n  };\n\n  DateRangeInput.defaultProps = {\n    allowSingleDayRange: false,\n    closeOnSelection: true,\n    contiguousCalendarMonths: true,\n    dayPickerProps: {},\n    disabled: false,\n    endInputProps: {},\n    invalidDateMessage: \"Invalid date\",\n    maxDate: getDefaultMaxDate(),\n    minDate: getDefaultMinDate(),\n    outOfRangeMessage: \"Out of range\",\n    overlappingDatesMessage: \"Overlapping dates\",\n    popoverProps: {},\n    selectAllOnFocus: false,\n    shortcuts: true,\n    singleMonthOnly: false,\n    startInputProps: {}\n  };\n  DateRangeInput.displayName = DISPLAYNAME_PREFIX + \".DateRangeInput\";\n  return DateRangeInput;\n}(AbstractPureComponent);\n\nexport { DateRangeInput };","map":null,"metadata":{},"sourceType":"module"}