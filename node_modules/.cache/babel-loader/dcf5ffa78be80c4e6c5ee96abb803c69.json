{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as Classes from \"./classes\";\nimport { get12HourFrom24Hour, get24HourFrom12Hour } from \"./dateUtils\";\n/** describes a component of time. `H:MM:SS.MS` */\n\nexport var TimeUnit;\n\n(function (TimeUnit) {\n  // NOTE: string enum so we can use it in Record<> type at the end of this file, which requires string keys\n  TimeUnit[\"HOUR_24\"] = \"hour24\";\n  TimeUnit[\"HOUR_12\"] = \"hour12\";\n  TimeUnit[\"MINUTE\"] = \"minute\";\n  TimeUnit[\"SECOND\"] = \"second\";\n  TimeUnit[\"MS\"] = \"ms\";\n})(TimeUnit || (TimeUnit = {}));\n/** Returns the given time unit component of the date. */\n\n\nexport function getTimeUnit(unit, date) {\n  switch (unit) {\n    case TimeUnit.HOUR_24:\n      return date.getHours();\n\n    case TimeUnit.HOUR_12:\n      return get12HourFrom24Hour(date.getHours());\n\n    case TimeUnit.MINUTE:\n      return date.getMinutes();\n\n    case TimeUnit.SECOND:\n      return date.getSeconds();\n\n    case TimeUnit.MS:\n      return date.getMilliseconds();\n\n    default:\n      throw Error(\"Invalid TimeUnit\");\n  }\n}\n/** Sets the given time unit to the given time in date object. Modifies given `date` object and returns it. */\n\nexport function setTimeUnit(unit, time, date, isPm) {\n  switch (unit) {\n    case TimeUnit.HOUR_24:\n      date.setHours(time);\n      break;\n\n    case TimeUnit.HOUR_12:\n      date.setHours(get24HourFrom12Hour(time, isPm));\n      break;\n\n    case TimeUnit.MINUTE:\n      date.setMinutes(time);\n      break;\n\n    case TimeUnit.SECOND:\n      date.setSeconds(time);\n      break;\n\n    case TimeUnit.MS:\n      date.setMilliseconds(time);\n      break;\n\n    default:\n      throw Error(\"Invalid TimeUnit\");\n  }\n\n  return date;\n}\n/** Returns true if `time` is a valid value */\n\nexport function isTimeUnitValid(unit, time) {\n  return time != null && !isNaN(time) && getTimeUnitMin(unit) <= time && time <= getTimeUnitMax(unit);\n}\n/** If unit of time is greater than max, returns min. If less than min, returns max. Otherwise, returns time. */\n\nexport function wrapTimeAtUnit(unit, time) {\n  var max = getTimeUnitMax(unit);\n  var min = getTimeUnitMin(unit);\n\n  if (time > max) {\n    return min;\n  } else if (time < min) {\n    return max;\n  }\n\n  return time;\n}\nexport function getTimeUnitClassName(unit) {\n  return TimeUnitMetadata[unit].className;\n}\nexport function getTimeUnitMax(unit) {\n  return TimeUnitMetadata[unit].max;\n}\nexport function getTimeUnitMin(unit) {\n  return TimeUnitMetadata[unit].min;\n}\nexport function getDefaultMinTime() {\n  return new Date(0, 0, 0, DEFAULT_MIN_HOUR, DEFAULT_MIN_MINUTE, DEFAULT_MIN_SECOND, DEFAULT_MIN_MILLISECOND);\n}\nexport function getDefaultMaxTime() {\n  return new Date(0, 0, 0, DEFAULT_MAX_HOUR, DEFAULT_MAX_MINUTE, DEFAULT_MAX_SECOND, DEFAULT_MAX_MILLISECOND);\n}\nvar DEFAULT_MIN_HOUR = 0;\nvar MERIDIEM_MIN_HOUR = 1;\nvar DEFAULT_MIN_MINUTE = 0;\nvar DEFAULT_MIN_SECOND = 0;\nvar DEFAULT_MIN_MILLISECOND = 0;\nvar DEFAULT_MAX_HOUR = 23;\nvar MERIDIEM_MAX_HOUR = 12;\nvar DEFAULT_MAX_MINUTE = 59;\nvar DEFAULT_MAX_SECOND = 59;\nvar DEFAULT_MAX_MILLISECOND = 999;\n/**\n * A datastore (internal to this file) mapping TimeUnits to useful information about them.\n * Use the `get*` methods above to access these fields.\n */\n\nvar TimeUnitMetadata = (_a = {}, _a[TimeUnit.HOUR_24] = {\n  className: Classes.TIMEPICKER_HOUR,\n  max: DEFAULT_MAX_HOUR,\n  min: DEFAULT_MIN_HOUR\n}, _a[TimeUnit.HOUR_12] = {\n  className: Classes.TIMEPICKER_HOUR,\n  max: MERIDIEM_MAX_HOUR,\n  min: MERIDIEM_MIN_HOUR\n}, _a[TimeUnit.MINUTE] = {\n  className: Classes.TIMEPICKER_MINUTE,\n  max: DEFAULT_MAX_MINUTE,\n  min: DEFAULT_MIN_MINUTE\n}, _a[TimeUnit.SECOND] = {\n  className: Classes.TIMEPICKER_SECOND,\n  max: DEFAULT_MAX_SECOND,\n  min: DEFAULT_MIN_SECOND\n}, _a[TimeUnit.MS] = {\n  className: Classes.TIMEPICKER_MILLISECOND,\n  max: DEFAULT_MAX_MILLISECOND,\n  min: DEFAULT_MIN_MILLISECOND\n}, _a);\n\nvar _a;","map":null,"metadata":{},"sourceType":"module"}