{"ast":null,"code":"var _jsxFileName = \"/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/AddOptions.tsx\";\nimport React from \"react\";\nimport { Table } from \"reactstrap\";\nimport { Button, Divider, ButtonGroup } from \"@blueprintjs/core\";\nimport { QACondition } from \"../form/condition\";\nimport Creatable from 'react-select/creatable';\nimport { AnswerTypeInput } from \"./AnswerType\";\nimport _ from \"lodash\";\nimport { ValInput } from \"./ValInput\";\nimport { customStyles } from \"./DPFormItem\";\nimport Select from \"react-select\";\nimport { openModal, destroyModal } from \"../utils/util\";\nimport { CreateConditionModal } from \"./CreateConditionModal\";\nvar OPTION_OR_GROUP;\n\n(function (OPTION_OR_GROUP) {\n  OPTION_OR_GROUP[OPTION_OR_GROUP[\"OPTION\"] = 1] = \"OPTION\";\n  OPTION_OR_GROUP[OPTION_OR_GROUP[\"GROUP\"] = 2] = \"GROUP\";\n})(OPTION_OR_GROUP || (OPTION_OR_GROUP = {}));\n\nexport class QAAddOptions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: this.props.options || []\n    };\n  }\n\n  handleChange() {\n    if (this.props.onChange) this.props.onChange(this.state.options);\n  }\n\n  handleAddNewOption() {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.options);\n\n      cloned.addOption();\n      return {\n        options: cloned\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleGroupNameChange(oldname, newname) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.options);\n\n      cloned.changeGroupName(oldname, newname);\n      return {\n        options: cloned\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleGroupDelete(name) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.options);\n\n      cloned.deleteGroup(name);\n      return {\n        options: cloned\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleOptionTypeChange(id, newType) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.options);\n\n      cloned.setOptionTypeFor(id, newType);\n      return {\n        options: cloned\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleGroupAssignment(ids, groupname) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.options);\n\n      cloned.assignOptionToGroup(ids, groupname);\n      return {\n        options: cloned\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleGroupUnassignment(ids) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.options);\n\n      cloned.unassignGroup(ids);\n      return {\n        options: cloned\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleOptionDelete(id) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.options);\n\n      cloned.deleteOption(id);\n      return {\n        options: cloned\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleOptionValueChange(id, newValue) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.options);\n\n      cloned.setValueForOption(id, newValue);\n      return {\n        options: cloned\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleAddGroup() {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.options);\n\n      cloned.addGroup();\n      return {\n        options: cloned\n      };\n    }, this.handleChange.bind(this));\n  }\n\n  handleConditionClick(type, name) {\n    // openModal()\n    let condition;\n\n    if (type === OPTION_OR_GROUP.GROUP) {\n      condition = this.state.options.optionGroupMap[name].appearingCondition;\n    } else {\n      condition = this.state.options.optionsMap[name].appearingCondition;\n    }\n\n    let el = React.createElement(CreateConditionModal, {\n      definedQuestions: this.props.definedQuestions,\n      isOpen: true,\n      onSubmit: this.setCondition.bind(this, name, type),\n      onCancel: destroyModal.bind(this),\n      condition: condition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    });\n    openModal(el);\n  }\n\n  setCondition(idOrname, type, literals) {\n    this.setState(prevState => {\n      let cloned = _.clone(prevState.options);\n\n      if (type === OPTION_OR_GROUP.GROUP) {\n        let group = cloned.optionGroupMap[idOrname];\n\n        if (!group.appearingCondition) {\n          group.appearingCondition = new QACondition();\n        }\n\n        group.appearingCondition.setLiterals(literals);\n      } else if (type === OPTION_OR_GROUP.OPTION) {\n        let option = cloned.optionsMap[idOrname];\n        if (!option.appearingCondition) option.appearingCondition = new QACondition();\n        option.appearingCondition.setLiterals(literals);\n      }\n\n      return {\n        options: cloned\n      };\n    }, () => {\n      destroyModal();\n      this.handleChange();\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(ButtonGroup, {\n      fill: true,\n      vertical: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(QAOptionSection, {\n      groups: Object.values(this.state.options.optionGroupMap),\n      handleGroupAssignment: this.handleGroupAssignment.bind(this),\n      handleOptionTypeChange: this.handleOptionTypeChange.bind(this),\n      handleAddNewOption: this.handleAddNewOption.bind(this),\n      handleOptionDelete: this.handleOptionDelete.bind(this),\n      handleConditionClick: this.handleConditionClick.bind(this, OPTION_OR_GROUP.OPTION),\n      handleOptionValueChange: this.handleOptionValueChange.bind(this),\n      options: Object.values(this.state.options.optionsMap),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(QAAddGroupSection, {\n      handleAddGroup: this.handleAddGroup.bind(this),\n      handleGroupUnassignment: this.handleGroupUnassignment.bind(this),\n      handleGroupAssignment: this.handleGroupAssignment.bind(this),\n      handleGroupNameChange: this.handleGroupNameChange.bind(this),\n      handleGroupDelete: this.handleGroupDelete.bind(this),\n      handleGroupConditionClick: this.handleConditionClick.bind(this, OPTION_OR_GROUP.GROUP),\n      options: Object.values(this.state.options.optionsMap),\n      groups: Object.values(this.state.options.optionGroupMap),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })));\n  }\n\n}\nexport class QAOptionSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: this.props.options\n    };\n  }\n\n  generateAddGroupInput(option) {\n    let creatableOptions = this.props.groups.map(item => ({\n      value: item.name,\n      label: item.name\n    }));\n    let value = creatableOptions.find(item => item.value === option.groupName);\n    return React.createElement(Creatable, {\n      value: value || null,\n      styles: customStyles,\n      options: creatableOptions,\n      onChange: e => {\n        if (this.props.handleGroupAssignment) this.props.handleGroupAssignment([option.id], e.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    });\n  }\n\n  handleAddNewOption() {\n    if (this.props.handleAddNewOption) this.props.handleAddNewOption();\n  }\n\n  handleConditionEdit(id) {\n    if (this.props.handleConditionClick) this.props.handleConditionClick(id);\n  }\n\n  handleAddGroupInput(index) {}\n\n  handleOptionDelete(id) {\n    if (this.props.handleOptionDelete) this.props.handleOptionDelete(id);\n  }\n\n  handleOptionTypeChange(option_id, newType) {\n    if (this.props.handleOptionTypeChange) this.props.handleOptionTypeChange(option_id, newType);\n  }\n\n  handleOptionValueChange(id, newValue) {\n    if (this.props.handleOptionValueChange) this.props.handleOptionValueChange(id, newValue.value);\n  }\n\n  render() {\n    return React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"Id\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"Type\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"Value\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"Condition\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Group\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, this.props.options.map((item, i) => {\n      return React.createElement(\"tr\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, item.id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(AnswerTypeInput, {\n        answerType: item.type,\n        onChange: e => this.handleOptionTypeChange(item.id, e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(ValInput, {\n        onChange: this.handleOptionValueChange.bind(this, item.id),\n        defaultValue: item.value,\n        type: item.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleConditionEdit.bind(this, item.id),\n        style: {\n          color: 'red',\n          width: 20\n        },\n        icon: \"key\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, this.generateAddGroupInput(item)), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(Button, {\n        style: {\n          width: 20\n        },\n        onClick: this.handleOptionDelete.bind(this, item.id),\n        icon: \"cross\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      })));\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(Button, {\n      style: {\n        width: 20\n      },\n      icon: \"add\",\n      onClick: this.handleAddNewOption.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }))));\n  }\n\n}\nQAOptionSection.defaultProps = {\n  options: [],\n  groups: []\n};\nexport class QAAddGroupSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleGroupAssignment(e, groupname) {\n    if (e) {\n      let ids = e.map(item => item.value);\n      console.log(ids);\n      if (this.props.handleGroupAssignment) this.props.handleGroupAssignment(ids, groupname);\n    }\n  }\n\n  render() {\n    return React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"Group Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"Group Items\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"Appearing Condition\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, this.props.groups.map((item, index) => {\n      let options = this.props.options.map(item => ({\n        value: item.id,\n        label: item.id\n      }));\n      let memberids = item.members.map(item => item.id);\n      let selected = options.filter(item => memberids.includes(item.value));\n      return React.createElement(\"tr\", {\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        key: item.id,\n        type: \"text\",\n        className: \"form-control\",\n        defaultValue: item.name,\n        onChange: e => {\n          if (this.props.handleGroupNameChange) this.props.handleGroupNameChange(item.name, e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(Select, {\n        styles: customStyles,\n        onChange: (e, action) => {\n          if (action.action === \"remove-value\") {\n            let removedid = action.removedValue.value;\n            if (this.props.handleGroupUnassignment) this.props.handleGroupUnassignment([removedid]);\n          }\n\n          this.handleGroupAssignment(e, item.name);\n        },\n        value: selected,\n        isMulti: true,\n        options: options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, React.createElement(Button, {\n        style: {\n          width: 20\n        },\n        icon: \"key\",\n        onClick: () => {\n          if (this.props.handleGroupConditionClick) this.props.handleGroupConditionClick(item.name);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, React.createElement(Button, {\n        style: {\n          width: 20\n        },\n        icon: \"cross\",\n        onClick: () => {\n          if (this.props.handleGroupDelete) this.props.handleGroupDelete(item.name);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      })));\n    }), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(Button, {\n      style: {\n        width: 20\n      },\n      icon: \"add\",\n      onClick: () => {\n        if (this.props.handleAddGroup) this.props.handleAddGroup();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/components/AddOptions.tsx"],"names":["React","Table","Button","Divider","ButtonGroup","QACondition","Creatable","AnswerTypeInput","_","ValInput","customStyles","Select","openModal","destroyModal","CreateConditionModal","OPTION_OR_GROUP","QAAddOptions","Component","constructor","props","state","options","handleChange","onChange","handleAddNewOption","setState","prevState","cloned","clone","addOption","bind","handleGroupNameChange","oldname","newname","changeGroupName","handleGroupDelete","name","deleteGroup","handleOptionTypeChange","id","newType","setOptionTypeFor","handleGroupAssignment","ids","groupname","assignOptionToGroup","handleGroupUnassignment","unassignGroup","handleOptionDelete","deleteOption","handleOptionValueChange","newValue","setValueForOption","handleAddGroup","addGroup","handleConditionClick","type","condition","GROUP","optionGroupMap","appearingCondition","optionsMap","el","definedQuestions","setCondition","idOrname","literals","group","setLiterals","OPTION","option","render","Object","values","QAOptionSection","generateAddGroupInput","creatableOptions","groups","map","item","value","label","find","groupName","e","handleConditionEdit","handleAddGroupInput","index","option_id","i","color","width","defaultProps","QAAddGroupSection","console","log","memberids","members","selected","filter","includes","target","action","removedid","removedValue","handleGroupConditionClick"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Table } from \"reactstrap\";\nimport { Button, Divider, ButtonGroup } from \"@blueprintjs/core\";\nimport { QACondition } from \"../form/condition\";\n\nimport { ILiteral } from \"../form/answer\";\nimport Creatable from 'react-select/creatable';\nimport { AnswerTypeInput, IValueType } from \"./AnswerType\";\nimport _ from \"lodash\";\nimport { ValInput } from \"./ValInput\";\nimport { customStyles } from \"./DPFormItem\";\nimport Select from \"react-select\";\nimport { openModal, destroyModal } from \"../utils/util\";\nimport { CreateConditionModal } from \"./CreateConditionModal\";\nimport { AnswerOptions, IOption, IOptionGroup } from \"./AnswerOptions\";\nimport { QAQuestion } from \"../form/question\";\ninterface QAAddOptionsState {\n    options: AnswerOptions,\n\n}\ninterface QAAddOptionsProps {\n    definedQuestions: {[key:string]: QAQuestion}\n    options: AnswerOptions,\n    defaultOptionType: IValueType,\n    onChange: (options:AnswerOptions)=>void,\n}\nenum OPTION_OR_GROUP {\n    OPTION = 1,\n    GROUP = 2\n}\nexport class QAAddOptions extends React.Component<QAAddOptionsProps, QAAddOptionsState>{\n    constructor(props: QAAddOptionsProps) {\n        super(props);\n        this.state = {\n            options: this.props.options || []\n        }\n    }\n    handleChange(){\n        if(this.props.onChange) this.props.onChange(this.state.options);\n    }\n    handleAddNewOption() {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.addOption();\n            return {\n                options: cloned\n            }\n        }, this.handleChange.bind(this))\n    }\n    handleGroupNameChange(oldname: string, newname: string) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.changeGroupName(oldname, newname);\n            return {\n                options: cloned\n            }\n        },this.handleChange.bind(this))\n    }\n    handleGroupDelete(name: string) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.deleteGroup(name);\n            return {\n                options: cloned\n            }\n        },this.handleChange.bind(this))\n    }\n    handleOptionTypeChange(id: string, newType: IValueType) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.setOptionTypeFor(id, newType);\n            return {\n                options: cloned\n            }\n        },this.handleChange.bind(this))\n    }\n\n    handleGroupAssignment(ids: string[], groupname: string) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.assignOptionToGroup(ids, groupname)\n            return {\n                options: cloned\n            }\n        },this.handleChange.bind(this));\n    }\n\n    handleGroupUnassignment(ids: string[]) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.unassignGroup(ids)\n            return {\n                options: cloned\n            }\n        },this.handleChange.bind(this));\n    }\n\n    handleOptionDelete(id: string) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.deleteOption(id);\n            return {\n                options: cloned\n            }\n        },this.handleChange.bind(this));\n    }\n    handleOptionValueChange(id: string, newValue: string) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.setValueForOption(id, newValue);\n            return {\n                options: cloned\n            }\n        },this.handleChange.bind(this));\n    }\n    handleAddGroup() {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.addGroup();\n            return {\n                options: cloned\n            }\n        },this.handleChange.bind(this));\n    }\n    handleConditionClick(type: OPTION_OR_GROUP, name: string) {\n        // openModal()\n        let condition;\n        if (type === OPTION_OR_GROUP.GROUP) {\n            condition = this.state.options.optionGroupMap[name].appearingCondition;\n        }\n        else {\n            condition = this.state.options.optionsMap[name].appearingCondition;\n        }\n        let el = <CreateConditionModal\n            definedQuestions = {this.props.definedQuestions}\n            isOpen={true}\n            onSubmit={this.setCondition.bind(this, name, type)}\n            onCancel={destroyModal.bind(this)}\n            condition={condition} />\n        openModal(el);\n    }\n\n    setCondition(idOrname: string, type: OPTION_OR_GROUP, literals: ILiteral[]) {\n\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            if (type === OPTION_OR_GROUP.GROUP) {\n\n                let group = cloned.optionGroupMap[idOrname];\n                if (!group.appearingCondition) {\n                    group.appearingCondition = new QACondition()\n                }\n                group.appearingCondition.setLiterals(literals)\n            }\n            else if (type === OPTION_OR_GROUP.OPTION) {\n                let option = cloned.optionsMap[idOrname];\n                if (!option.appearingCondition) option.appearingCondition = new QACondition();\n                option.appearingCondition.setLiterals(literals)\n            }\n            return {\n                options: cloned\n            }\n        }, () => {\n            destroyModal();\n            this.handleChange();\n        });\n\n    }\n\n    render() {\n        return (\n            <>\n                <ButtonGroup fill={true} vertical={true}>\n                    <QAOptionSection groups={Object.values(this.state.options.optionGroupMap)}\n                        handleGroupAssignment={this.handleGroupAssignment.bind(this)}\n                        handleOptionTypeChange={this.handleOptionTypeChange.bind(this)}\n                        handleAddNewOption={this.handleAddNewOption.bind(this)}\n                        handleOptionDelete={this.handleOptionDelete.bind(this)}\n                        handleConditionClick={this.handleConditionClick.bind(this, OPTION_OR_GROUP.OPTION)}\n                        handleOptionValueChange={this.handleOptionValueChange.bind(this)}\n                        options={Object.values(this.state.options.optionsMap)}></QAOptionSection>\n                    <Divider />\n                    <QAAddGroupSection\n                        handleAddGroup={this.handleAddGroup.bind(this)}\n                        handleGroupUnassignment={this.handleGroupUnassignment.bind(this)}\n                        handleGroupAssignment={this.handleGroupAssignment.bind(this)}\n                        handleGroupNameChange={this.handleGroupNameChange.bind(this)}\n                        handleGroupDelete={this.handleGroupDelete.bind(this)}\n                        handleGroupConditionClick={this.handleConditionClick.bind(this, OPTION_OR_GROUP.GROUP)}\n                        options={Object.values(this.state.options.optionsMap)}\n                        groups={Object.values(this.state.options.optionGroupMap)} />\n\n                </ButtonGroup>\n            </>\n        )\n    }\n}\n\ninterface QAAoptionSectionProps {\n    options: IOption[],\n    groups: IOptionGroup[],\n    handleAddNewOption?: () => void,\n    handleOptionTypeChange?: (id: string, newType: IValueType) => void\n    handleGroupAssignment?: (ids: string[], groupname: string) => void,\n    handleOptionDelete?: (id: string) => void,\n    handleConditionClick?: (id: string) => void,\n    handleOptionValueChange?: (id: string, newVal: string) => void,\n}\ninterface QAAddOptionsSectionState {\n    options: IOption[]\n}\n\nexport class QAOptionSection extends React.Component<QAAoptionSectionProps, QAAddOptionsSectionState>{\n    static defaultProps = {\n        options: [],\n        groups: []\n    }\n    constructor(props: QAAoptionSectionProps) {\n        super(props);\n        this.state = {\n            options: this.props.options\n        }\n    }\n\n    generateAddGroupInput(option: IOption) {\n        let creatableOptions = this.props.groups.map(item => ({ value: item.name, label: item.name }));\n        let value = creatableOptions.find(item => item.value === option.groupName);\n        return <Creatable value={value || null} styles={customStyles} options={creatableOptions} onChange={(e: any) => {\n            if (this.props.handleGroupAssignment) this.props.handleGroupAssignment([option.id], e.value);\n        }} />\n    }\n\n    handleAddNewOption() {\n        if (this.props.handleAddNewOption) this.props.handleAddNewOption();\n\n    }\n\n    handleConditionEdit(id: string) {\n        if (this.props.handleConditionClick) this.props.handleConditionClick(id)\n    }\n\n    handleAddGroupInput(index: number) {\n\n    }\n    handleOptionDelete(id: string) {\n        if (this.props.handleOptionDelete) this.props.handleOptionDelete(id);\n    }\n\n    handleOptionTypeChange(option_id: string, newType: IValueType) {\n        if (this.props.handleOptionTypeChange) this.props.handleOptionTypeChange(option_id, newType)\n    }\n    handleOptionValueChange(id:string, newValue: any) {\n        if (this.props.handleOptionValueChange) this.props.handleOptionValueChange(id,newValue.value);\n    }\n\n    render() {\n        return (\n            <Table>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Id</th>\n                        <th>Type</th>\n                        <th>Value</th>\n                        <th>Condition</th>\n                        <th>Group</th>\n                        <th></th>\n\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.options.map((item, i) => {\n                        return <tr key={item.id}>\n                            <td></td>\n                            <td>{item.id}</td>\n                            <td><AnswerTypeInput answerType = {item.type} onChange={e => this.handleOptionTypeChange(item.id, e)} /></td>\n                            <td><ValInput onChange={this.handleOptionValueChange.bind(this,item.id)} defaultValue={item.value} type={item.type} /></td>\n                            <td><Button  onClick={this.handleConditionEdit.bind(this, item.id)} style={{ color: 'red', width: 20 }} icon=\"key\" /></td>\n                            <td>{this.generateAddGroupInput(item)}</td>\n                            <td><Button style={{width:20}} onClick={this.handleOptionDelete.bind(this, item.id)} icon=\"cross\" /></td>\n\n                        </tr>\n                    })}\n                    <tr>\n                        <td><Button style={{width:20}} icon={\"add\"} onClick={this.handleAddNewOption.bind(this)}></Button></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                </tbody>\n            </Table>\n        )\n    }\n}\n\n\n\ninterface QAAoptionGroupSectionProps {\n    groups: IOptionGroup[],\n    options: IOption[],\n    handleGroupAssignment?: (id: string[], groupname: string) => void,\n    handleGroupUnassignment?: (id: string[]) => void,\n    handleGroupNameChange?: (oldname: string, newname: string) => void,\n    handleGroupDelete?: (name: string) => void,\n    handleGroupConditionClick?: (name: string) => void,\n    handleAddGroup?: () => void,\n\n}\ninterface QAAddOptionSectionState {\n\n}\nexport class QAAddGroupSection extends React.Component<QAAoptionGroupSectionProps, QAAddOptionSectionState>{\n    constructor(props: QAAoptionGroupSectionProps) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    handleGroupAssignment(e: { value: string, label: string }[], groupname: string) {\n        if (e) {\n            let ids = e.map(item => item.value)\n            console.log(ids);\n            if (this.props.handleGroupAssignment) this.props.handleGroupAssignment(ids, groupname)\n        }\n\n    }\n\n    render() {\n        return (\n\n            <Table>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Group Name</th>\n                        <th>Group Items</th>\n                        <th>Appearing Condition</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.groups.map((item, index) => {\n                        let options = this.props.options.map(item => ({ value: item.id, label: item.id }));\n                        let memberids = item.members.map(item => item.id);\n                        let selected = options.filter(item => memberids.includes(item.value))\n                        return <tr key={item.id}>\n                            <td></td>\n                            <td><input key={item.id} type=\"text\" className=\"form-control\" defaultValue={item.name} onChange={e => {\n                                if (this.props.handleGroupNameChange) this.props.handleGroupNameChange(item.name, e.target.value);\n                            }} /></td>\n                            <td><Select styles={customStyles}\n                                onChange={(e: any, action: any) => {\n                                    if (action.action === \"remove-value\") {\n                                        let removedid = action.removedValue.value;\n                                        if (this.props.handleGroupUnassignment) this.props.handleGroupUnassignment([removedid])\n                                    }\n                                    this.handleGroupAssignment(e, item.name)\n                                }}\n                                value={selected}\n\n                                isMulti={true} options={options} /></td>\n                            <td><Button style={{width:20}} icon=\"key\" onClick={() => {\n                                if (this.props.handleGroupConditionClick) this.props.handleGroupConditionClick(item.name)\n                            }} /></td>\n                            <td><Button style={{width:20}} icon=\"cross\" onClick={() => {\n                                if (this.props.handleGroupDelete) this.props.handleGroupDelete(item.name)\n                            }} /></td>\n\n                        </tr>\n\n\n\n                    })}\n                    <tr>\n                        <td><Button style={{width:20}} icon=\"add\" onClick={() => {\n                            if (this.props.handleAddGroup) this.props.handleAddGroup()\n                        }} /></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n\n                    </tr>\n                </tbody>\n            </Table>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}