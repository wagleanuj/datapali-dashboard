{"ast":null,"code":"import { QACondition } from \"./condition\";\nimport { QAType } from \"./answer\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { AnswerOptions } from \"../components/AnswerOptions\";\nimport { autoAnswerToJSON, answerTypeToJSON, answerTypeFromJSON, autoAnswerFromJSON } from \"../utils/util\";\nexport class QAQuestion {\n  constructor() {\n    this.id = void 0;\n    this.isRequired = void 0;\n    this.validate = void 0;\n    this.referenceId = void 0;\n    this.appearingCondition = void 0;\n    this.questionContent = void 0;\n    this.creationDate = void 0;\n    this.autoAnswer = void 0;\n    this.options = void 0;\n    this.answerType = void 0;\n    this.content = [];\n    this.autoAnswer = {\n      isEnabled: false,\n      answeringConditions: []\n    };\n    this.id = getRandomId(\"q-\");\n    this.questionContent = {\n      content: \"\",\n      type: QAType.String\n    };\n  }\n\n  static toJSON(a) {\n    let r = {\n      id: a.id,\n      isRequired: a.isRequired,\n      appearingCondition: QACondition.toJSON(a.appearingCondition),\n      questionContent: {\n        content: a.questionContent.content,\n        type: a.questionContent.type\n      },\n      autoAnswer: autoAnswerToJSON(a.autoAnswer),\n      options: AnswerOptions.toJSON(a.options),\n      answerType: a.answerType ? answerTypeToJSON(a.answerType) : undefined\n    };\n    return r;\n  }\n\n  static fromJSON(a) {\n    let q = new QAQuestion();\n    q.id = a.id;\n    q.isRequired = a.isRequired;\n    q.appearingCondition = QACondition.fromJSON(a.appearingCondition);\n    q.questionContent = a.questionContent;\n    q.options = AnswerOptions.fromJSON(a.options);\n    if (a.answerType) q.answerType = answerTypeFromJSON(a.answerType);\n    if (a.autoAnswer) q.autoAnswer = autoAnswerFromJSON(a.autoAnswer);\n    return q;\n  }\n\n  updateFromQuestion(q) {\n    this.isRequired = q.isRequired;\n    this.validate = q.validate;\n    this.appearingCondition = q.appearingCondition;\n    this.questionContent = q.questionContent;\n    this.autoAnswer = q.autoAnswer;\n    this.options = q.options;\n    this.answerType = q.answerType;\n    return this;\n  }\n\n  setIsRequired(bool) {\n    this.isRequired = bool;\n    return this;\n  }\n\n  setValidationFunction(func) {\n    this.validate = func;\n    return this;\n  }\n\n  setAppearingCondition(cond) {\n    this.appearingCondition = cond;\n    return this;\n  }\n\n  setAutoAnswer(a) {\n    this.autoAnswer = a;\n    return this;\n  }\n\n  setReferenceId(id) {\n    this.referenceId = id;\n    return this;\n  }\n\n  setQuestionContent(content) {\n    this.questionContent = content;\n    return this;\n  }\n\n  setCreationDate(creationDate) {\n    if (!creationDate) this.creationDate = new Date().getTime();else this.creationDate = creationDate;\n    return this;\n  }\n\n  setAutoAnswerEnabled(bool) {\n    if (!bool) this.autoAnswer.isEnabled = true;else this.autoAnswer.isEnabled = bool;\n    return this;\n  }\n\n  addAutoAnswerCondition(aaCond) {\n    this.autoAnswer.answeringConditions.push(aaCond);\n    return this;\n  }\n\n  setAnswerType(type) {\n    this.answerType = type;\n    return this;\n  }\n\n  setOptions(opt) {\n    this.options = opt;\n    return this;\n  }\n\n} // export class DPValueType implements IValueType {\n//     name!: ANSWER_TYPES\n//     ofType?: IValueType | undefined;\n//     static toJSON(valType?: DPValueType): { [key: string]: any } {\n//         if (!valType) return {}\n//         return {\n//             name: valType.name,\n//             ofType: DPValueType.toJSON(valType.ofType)\n//         }\n//     }\n//     static fromJSON(val?: { [key: string]: any }) {\n//         if (!val) return undefined;\n//         let r = new DPValueType();\n//         r.name = val.name;\n//         r.ofType = DPValueType.fromJSON(val.ofType);\n//         return r;\n//     }\n// }","map":{"version":3,"sources":["/Users/anujwagle/Desktop/temp/datapali-dashboard/src/form/question.ts"],"names":["QACondition","QAType","getRandomId","AnswerOptions","autoAnswerToJSON","answerTypeToJSON","answerTypeFromJSON","autoAnswerFromJSON","QAQuestion","constructor","id","isRequired","validate","referenceId","appearingCondition","questionContent","creationDate","autoAnswer","options","answerType","content","isEnabled","answeringConditions","type","String","toJSON","a","r","undefined","fromJSON","q","updateFromQuestion","setIsRequired","bool","setValidationFunction","func","setAppearingCondition","cond","setAutoAnswer","setReferenceId","setQuestionContent","setCreationDate","Date","getTime","setAutoAnswerEnabled","addAutoAnswerCondition","aaCond","push","setAnswerType","setOptions","opt"],"mappings":"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","sourcesContent":["import { QACondition } from \"./condition\";\r\nimport { IContent, QAType,  } from \"./answer\";\r\nimport { getRandomId } from \"../utils/getRandomId\";\r\nimport { IValueType } from \"../components/AnswerType\";\r\nimport { AnswerOptions } from \"../components/AnswerOptions\";\r\nimport { autoAnswerToJSON, answerTypeToJSON, answerTypeFromJSON, autoAnswerFromJSON } from \"../utils/util\";\r\n\r\nexport class QAQuestion {\r\n    id!: string;\r\n    isRequired!: boolean;\r\n    validate!: Function;\r\n    referenceId!: string;\r\n    appearingCondition!: QACondition;\r\n    questionContent!: IContent;\r\n    creationDate!: number;\r\n    autoAnswer!: IAutoAnswer\r\n    options!: AnswerOptions;\r\n    answerType!: IValueType;\r\n    content = []\r\n\r\n    constructor() {\r\n        this.autoAnswer = {\r\n            isEnabled: false,\r\n            answeringConditions: []\r\n        }\r\n        this.id = getRandomId(\"q-\");\r\n        this.questionContent = { content: \"\", type: QAType.String }\r\n    }\r\n\r\n    static toJSON(a: QAQuestion) {\r\n        let r = {\r\n            id: a.id,\r\n            isRequired: a.isRequired,\r\n            appearingCondition: QACondition.toJSON(a.appearingCondition),\r\n            questionContent: { content: a.questionContent.content, type: a.questionContent.type },\r\n            autoAnswer: autoAnswerToJSON(a.autoAnswer),\r\n            options: AnswerOptions.toJSON(a.options),\r\n            answerType: a.answerType ? answerTypeToJSON(a.answerType) : undefined,\r\n        }\r\n        return r;\r\n    }\r\n    static fromJSON(a: any): QAQuestion {\r\n        let q = new QAQuestion();\r\n        q.id = a.id;\r\n        q.isRequired = a.isRequired;\r\n        q.appearingCondition = QACondition.fromJSON(a.appearingCondition);\r\n        q.questionContent = a.questionContent as IContent;\r\n        q.options = AnswerOptions.fromJSON(a.options);\r\n        if (a.answerType) q.answerType = answerTypeFromJSON(a.answerType);\r\n        if(a.autoAnswer) q.autoAnswer = autoAnswerFromJSON(a.autoAnswer)\r\n        return q;\r\n    }\r\n\r\n    updateFromQuestion(q: QAQuestion) {\r\n        this.isRequired = q.isRequired;\r\n        this.validate = q.validate;\r\n        this.appearingCondition = q.appearingCondition;\r\n        this.questionContent = q.questionContent;\r\n        this.autoAnswer = q.autoAnswer;\r\n        this.options = q.options;\r\n        this.answerType = q.answerType;\r\n        return this;\r\n    }\r\n\r\n    setIsRequired(bool: boolean) {\r\n        this.isRequired = bool;\r\n        return this;\r\n    }\r\n\r\n    setValidationFunction(func: Function) {\r\n        this.validate = func;\r\n        return this;\r\n    }\r\n\r\n    setAppearingCondition(cond: QACondition) {\r\n        this.appearingCondition = cond;\r\n        return this;\r\n    }\r\n    setAutoAnswer(a: IAutoAnswer) {\r\n        this.autoAnswer = a;\r\n        return this;\r\n    }\r\n\r\n    setReferenceId(id: string) {\r\n        this.referenceId = id;\r\n        return this;\r\n    }\r\n\r\n    setQuestionContent(content: IContent) {\r\n        this.questionContent = content;\r\n        return this;\r\n    }\r\n\r\n    setCreationDate(creationDate?: number) {\r\n        if (!creationDate) this.creationDate = new Date().getTime();\r\n        else this.creationDate = creationDate\r\n        return this;\r\n    }\r\n\r\n    setAutoAnswerEnabled(bool?: boolean) {\r\n        if (!bool) this.autoAnswer.isEnabled = true\r\n        else this.autoAnswer.isEnabled = bool;\r\n        return this;\r\n    }\r\n\r\n    addAutoAnswerCondition(aaCond: IAnswerCondition) {\r\n        this.autoAnswer.answeringConditions.push(aaCond);\r\n        return this;\r\n    }\r\n\r\n    setAnswerType(type: IValueType) {\r\n        this.answerType = type;\r\n        return this;\r\n    }\r\n\r\n    setOptions(opt: AnswerOptions) {\r\n        this.options = opt;\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\nexport interface IAutoAnswer {\r\n    isEnabled: boolean,\r\n    answeringConditions: Array<IAnswerCondition>\r\n}\r\n\r\nexport interface IAnswerCondition {\r\n    condition: QACondition,\r\n    ifTrue: string|undefined,\r\n    ifFalse: string|undefined// or could make a task class\r\n}\r\n\r\n\r\nexport interface IAnswerOption {\r\n    value: string,\r\n}\r\n\r\n\r\n\r\n// export class DPValueType implements IValueType {\r\n//     name!: ANSWER_TYPES\r\n//     ofType?: IValueType | undefined;\r\n\r\n//     static toJSON(valType?: DPValueType): { [key: string]: any } {\r\n//         if (!valType) return {}\r\n//         return {\r\n//             name: valType.name,\r\n//             ofType: DPValueType.toJSON(valType.ofType)\r\n//         }\r\n//     }\r\n\r\n//     static fromJSON(val?: { [key: string]: any }) {\r\n//         if (!val) return undefined;\r\n//         let r = new DPValueType();\r\n//         r.name = val.name;\r\n//         r.ofType = DPValueType.fromJSON(val.ofType);\r\n//         return r;\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}