{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Months } from \"./months\";\nexport function isDateValid(date) {\n  return date instanceof Date && !isNaN(date.valueOf());\n}\nexport function areEqual(date1, date2) {\n  if (date1 == null && date2 == null) {\n    return true;\n  } else if (date1 == null || date2 == null) {\n    return false;\n  } else {\n    return date1.getTime() === date2.getTime();\n  }\n}\nexport function areRangesEqual(dateRange1, dateRange2) {\n  if (dateRange1 == null && dateRange2 == null) {\n    return true;\n  } else if (dateRange1 == null || dateRange2 == null) {\n    return false;\n  } else {\n    var start1 = dateRange1[0],\n        end1 = dateRange1[1];\n    var start2 = dateRange2[0],\n        end2 = dateRange2[1];\n    var areStartsEqual = start1 == null && start2 == null || areSameDay(start1, start2);\n    var areEndsEqual = end1 == null && end2 == null || areSameDay(end1, end2);\n    return areStartsEqual && areEndsEqual;\n  }\n}\nexport function areSameDay(date1, date2) {\n  return areSameMonth(date1, date2) && date1.getDate() === date2.getDate();\n}\nexport function areSameMonth(date1, date2) {\n  return date1 != null && date2 != null && date1.getMonth() === date2.getMonth() && date1.getFullYear() === date2.getFullYear();\n}\nexport function areSameTime(date1, date2) {\n  return date1 != null && date2 != null && date1.getHours() === date2.getHours() && date1.getMinutes() === date2.getMinutes() && date1.getSeconds() === date2.getSeconds() && date1.getMilliseconds() === date2.getMilliseconds();\n}\nexport function clone(d) {\n  return new Date(d.getTime());\n}\nexport function isDayInRange(date, dateRange, exclusive) {\n  if (exclusive === void 0) {\n    exclusive = false;\n  }\n\n  if (date == null) {\n    return false;\n  }\n\n  var day = clone(date);\n  var start = clone(dateRange[0]);\n  var end = clone(dateRange[1]);\n  day.setHours(0, 0, 0, 0);\n  start.setHours(0, 0, 0, 0);\n  end.setHours(0, 0, 0, 0);\n  return start <= day && day <= end && (!exclusive || !areSameDay(start, day) && !areSameDay(day, end));\n}\nexport function isDayRangeInRange(innerRange, outerRange) {\n  return (innerRange[0] == null || isDayInRange(innerRange[0], outerRange)) && (innerRange[1] == null || isDayInRange(innerRange[1], outerRange));\n}\nexport function isMonthInRange(date, dateRange) {\n  if (date == null) {\n    return false;\n  }\n\n  var day = clone(date);\n  var start = clone(dateRange[0]);\n  var end = clone(dateRange[1]);\n  day.setDate(1);\n  start.setDate(1);\n  end.setDate(1);\n  day.setHours(0, 0, 0, 0);\n  start.setHours(0, 0, 0, 0);\n  end.setHours(0, 0, 0, 0);\n  return start <= day && day <= end;\n}\nexport var isTimeEqualOrGreaterThan = function (time, timeToCompare) {\n  return time.getTime() >= timeToCompare.getTime();\n};\nexport var isTimeEqualOrSmallerThan = function (time, timeToCompare) {\n  return time.getTime() <= timeToCompare.getTime();\n};\nexport function isTimeInRange(date, minDate, maxDate) {\n  var time = getDateOnlyWithTime(date);\n  var minTime = getDateOnlyWithTime(minDate);\n  var maxTime = getDateOnlyWithTime(maxDate);\n  var isTimeGreaterThanMinTime = isTimeEqualOrGreaterThan(time, minTime);\n  var isTimeSmallerThanMaxTime = isTimeEqualOrSmallerThan(time, maxTime);\n\n  if (isTimeEqualOrSmallerThan(maxTime, minTime)) {\n    return isTimeGreaterThanMinTime || isTimeSmallerThanMaxTime;\n  }\n\n  return isTimeGreaterThanMinTime && isTimeSmallerThanMaxTime;\n}\nexport function getTimeInRange(time, minTime, maxTime) {\n  if (areSameTime(minTime, maxTime)) {\n    return maxTime;\n  } else if (isTimeInRange(time, minTime, maxTime)) {\n    return time;\n  } else if (isTimeSameOrAfter(time, maxTime)) {\n    return maxTime;\n  }\n\n  return minTime;\n}\n/**\n * Returns true if the time part of `date` is later than or equal to the time\n * part of `dateToCompare`. The day, month, and year parts will not be compared.\n */\n\nexport function isTimeSameOrAfter(date, dateToCompare) {\n  var time = getDateOnlyWithTime(date);\n  var timeToCompare = getDateOnlyWithTime(dateToCompare);\n  return isTimeEqualOrGreaterThan(time, timeToCompare);\n}\n/**\n * @returns a Date at the exact time-wise midpoint between startDate and endDate\n */\n\nexport function getDateBetween(dateRange) {\n  var start = dateRange[0].getTime();\n  var end = dateRange[1].getTime();\n  var middle = start + (end - start) * 0.5;\n  return new Date(middle);\n}\nexport function getDateTime(date, time) {\n  if (date == null) {\n    return null;\n  } else if (time == null) {\n    // cannot use default argument because `null` is a common value in this package.\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0);\n  } else {\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());\n  }\n}\nexport function getDateOnlyWithTime(date) {\n  return new Date(0, 0, 0, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n}\nexport function getDatePreviousMonth(date) {\n  if (date.getMonth() === Months.JANUARY) {\n    return new Date(date.getFullYear() - 1, Months.DECEMBER);\n  } else {\n    return new Date(date.getFullYear(), date.getMonth() - 1);\n  }\n}\nexport function getDateNextMonth(date) {\n  if (date.getMonth() === Months.DECEMBER) {\n    return new Date(date.getFullYear() + 1, Months.JANUARY);\n  } else {\n    return new Date(date.getFullYear(), date.getMonth() + 1);\n  }\n}\nexport function convert24HourMeridiem(hour, toPm) {\n  if (hour < 0 || hour > 23) {\n    throw new Error(\"hour must be between [0,23] inclusive: got \" + hour);\n  }\n\n  return toPm ? hour % 12 + 12 : hour % 12;\n}\nexport function getIsPmFrom24Hour(hour) {\n  if (hour < 0 || hour > 23) {\n    throw new Error(\"hour must be between [0,23] inclusive: got \" + hour);\n  }\n\n  return hour >= 12;\n}\nexport function get12HourFrom24Hour(hour) {\n  if (hour < 0 || hour > 23) {\n    throw new Error(\"hour must be between [0,23] inclusive: got \" + hour);\n  }\n\n  var newHour = hour % 12;\n  return newHour === 0 ? 12 : newHour;\n}\nexport function get24HourFrom12Hour(hour, isPm) {\n  if (hour < 1 || hour > 12) {\n    throw new Error(\"hour must be between [1,12] inclusive: got \" + hour);\n  }\n\n  var newHour = hour === 12 ? 0 : hour;\n  return isPm ? newHour + 12 : newHour;\n}","map":null,"metadata":{},"sourceType":"module"}