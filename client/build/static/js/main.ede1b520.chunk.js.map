{"version":3,"sources":["../../dpform/dist/question.js","../../dpform/dist/AnswerOptions.js","../../dpform/dist/answer.js","../../dpform/dist/questionSection.js","../../dpform/dist/answerTypes.js","../../dpform/dist/constants.js","../../dpform/dist/rootSection.js","components/constants.tsx","components/formtree.tsx","utils/index.tsx","utils/getRandomId.tsx","components/ValInput.tsx","components/AutofillCondition.tsx","components/AnswerType.tsx","components/AddOptions.tsx","components/DPFormItem.tsx","components/CreateCondition.tsx","components/CreateConditionModal.tsx","components/duplicateSettings.tsx","components/questionButton.tsx","components/sectionButton.tsx","components/section.tsx","components/Toolbar.tsx","APPCONFIG.ts","components/SurveyForm.tsx","ui/login.tsx","App.tsx","serviceWorker.ts","index.tsx","../../dpform/dist/index.js","../../dpform/dist/condition.js","../../dpform/dist/util.js","../../dpform/dist/valueType.js","../../dpform/dist/duplicateSettings.js"],"names":["Object","defineProperty","exports","value","answer_1","AnswerOptions_1","condition_1","util_1","valueType_1","QAQuestion","this","content","customId","autoAnswer","isEnabled","answeringConditions","options","AnswerOptions","id","getRandomId","questionContent","type","QAType","String","toJSON","a","isRequired","appearingCondition","QACondition","autoAnswerToJSON","answerType","answerTypeToJSON","undefined","fromJSON","q","answerTypeFromJSON","autoAnswerFromJSON","prototype","updateFromQuestion","setIsRequired","bool","setAppearingCondition","cond","setAutoAnswer","setQuestionContent","setCreationDate","creationDate","Date","getTime","setAutoAnswerEnabled","addAutoAnswerCondition","aaCond","push","setAnswerType","setOptions","opt","answerConditionToJSON","condition","ifTrue","ifFalse","answerConditionFromJSON","map","item","__importDefault","mod","__esModule","lodash_1","optionsMap","optionGroupMap","opt_count","group_count","default","mapValues","v","optionToJSON","optionGroupToJSON","d","r","optionFromJSON","name","members","get","grouplessOptions","values","filter","groupName","groups","rootOptions","enumerable","configurable","addOption","option","groupname","group","optionExistInGroup","find","addGroup","setValueForOption","newValue","deleteOption","ind","findIndex","splice","assignOptionToGroup","optionIds","existingGroup","_loop_1","i","optionId","this_1","option_group","length","setConditionForOption","setConditionForGroup","unassignGroup","ids","_this","forEach","opt_groupname","optgroup","changeGroupName","oldname","newname","members_ids","newGroup","clone","deleteGroup","setOptionTypeFor","newType","Answer","setContent","setCondition","QAComparisonOperator","AnswerType","question_1","duplicateSettings_1","QuestionSection","duplicatingSettings","duplicateTimes","dupeSettingsToJSON","setID","setName","addContent","deleteContent","contentId","found","setDuplicatingSettings","dupe","ANSWER_TYPES","Constants","consts","count","getConstant","constname","cloneDeep","addConstant","constant","removeConstant","__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","Symbol","iterator","n","op","TypeError","call","done","pop","e","step","QORS","questionSection_1","RootSection","questions","sections","getFromPath","path","root","el","slice","descendants","callback","iterate","node","current","cont","concat","isNil","Entries","sectionPath","startIndex","fetchType","stack","rt","cloned","p","shift","section","QUESTION","data","SECTION","addQuestion","parentPath","Error","addSection","removeQuestion","questionId","parentSection","foundIndex","removeSection","sectionId","moveItem","prevPath","newPath","itemAtPath","newParentPath","oldParentPath","newParent","oldParent","removed","pos","index","handleSectionAdd","hasOwnProperty","dupeSettingsFromJSON","question","Iterator2","_i","_a","_b","_c","_d","ConstantDefinitions","props","state","isOpen","React","Component","FormTree","handleNodeClick","nodeData","_nodePath","handleNodeCollapse","handleNodeExpand","sectionNumber","selectedNodes","expandedNodes","def","icon","isSelected","includes","isExpanded","childNodes","it","getNodeFromQuestionOrSection","form","hasCaret","toString","console","log","root_","contents","generateITNodeTree","onNodeClick","onNodeCollapse","onNodeExpand","className","Classes","ELEVATION_0","openModal","com","document","getElementById","createElement","setAttribute","appendChild","ReactDOM","render","destroyModal","unmountComponentAtNode","startingText","S4","Math","random","substring","RangeInput","range","split","min","max","transformed","TIME","DATE","NUMBER","onChange","comp","parsed","parseRangeValue","handleInputChange","dateMin","dateMax","shortcuts","defaultValue","selectedDates","defaultNumberRangeProps","NumberRange","useState","minValue","setMin","maxValue","setMax","target","placeholder","defaultTimeRangeProps","TimeRange","precision","TimePrecision","MINUTE","useAmPm","newTime","toLocaleDateString","ValInput","STRING","SELECT","ofType","newVal","BOOLEAN","styles","customStyles","defaultDate","formatDate","date","parseDate","str","closeOnSelection","RANGE","defaulttime","SelInput","allOptions","rootOptions_","SortedOptions","groupOptions_","defaultvalue","options_","findValue","findOption","handleChange","bind","AutofillCondition","aConditions","setState","prevState","newConditions","selected","definedQuestions","onSubmit","editCondition","onCancel","answerCondition","setLiterals","checked","changeEnabled","Table","comparisonValueSelect","ifFalseOrTrue","key","editIfTrueFalseValue","Button","onClick","openConditionModal","size","faKey","removeAutofillCondition","faWindowClose","addAutoFillCondition","faPlusSquare","ValueSelectOptions","GEOLOCATION","OptionsForSelect","includedInRange","OptionsForRange","AnswerTypeInput","newAnswerType","shouldDisplaySecondSelect","shouldDisplayThirdSelect","optionsForSecondSelect","OptionsForThirdSelect","Row","Col","handleAnswerTypeChange","handleSecondSelectChange","handleThirdSelectChange","defaultProps","OPTION_OR_GROUP","QAAddOptions","constantNameInputRef","makeFromTextInputRef","constants","optionsText","keys","defaultOptionType","newOption","GROUP","idOrname","literals","OPTION","constantsOptions","ConstantsArray","fill","vertical","handleImportFromConstant","ref","makeConstant","makeOptionsFromText","defaultType","handleGroupAssignment","handleOptionTypeChange","handleAddNewOption","handleOptionDelete","handleConditionClick","handleOptionValueChange","handleAddGroup","handleGroupUnassignment","handleGroupNameChange","handleGroupDelete","handleGroupConditionClick","QAOptionSection","nextProps","nextState","creatableOptions","option_id","handleConditionEdit","style","color","width","generateAddGroupInput","QAAddGroupSection","memberids","action","removedid","removedValue","isMulti","Modal","setAppElement","TableFieldType","container","base","border","isFocused","background","transition","boxShadow","control","borderColor","brandColor","valueContainer","menu","zIndex","menuList","singleValue","input","DPFormItem","editAppearingCondition","newLiterals","autoanswer","newId","Card","CardHeader","CardBody","FormGroup","htmlFor","handleCustomIdChange","handleQuestionChange","defaultChecked","handleRequiredChange","handleOptionsChange","openAppearingConditionModal","handleAutoFillChange","CreateCondition","columns","dataField","text","setLiteralsSetter","literal","literalId","questionRef","comparisonOperator","comparisonValue","followingOperator","newIndex","get_new_index","forceUpdate","literalIndex","valueField","QuestionRef","ComparisonOperator","prop","accessProp","ComparisonValue","newComparisonValue","FollowingOperator","QAFollowingOperator","AND","OR","isEmpty","questions_","questionselect","selecteOption","handleDataChange","comparisionOPOptions_","valueType","allOperators","Equal","getOperatorForType","val","comparisonOpSelect","question_","getQuestion","qAnswerType","qOptions","followingOperatorOptions_","followingOperatorSelect","moveLiteralUp","faArrowUp","removeLiteral","addLiteral","CreateConditionModal","createCondition_","errors","primaryButtonHandler","newCondition","checkIfValid","message","secondaryButtonHandler","createRef","top","left","right","bottom","marginRight","transform","minHeight","backgroundColor","overlay","ModalBody","ModalFooter","DuplicateSettings","handleQuestionRefChange","handleNumberTimesChange","every","handleSave","typeOptions","classNames","ELEVATION_2","DARK","handleEnabledChange","menuContainerStyle","handleTypeChange","generateValueComponent","handleCancel","QuestionButton","setIsExpanded","paddingBottom","handleMoveUp","height","alignText","rightIcon","Badge","readablePath","questionTitle","handleDeletion","keepChildrenMounted","children","SectionButton","Group","align","Alignment","LEFT","handleSectionNameChange","sectionName","RIGHT","handleOpenConditionSettings","SectionC","handleSectionDuplicatingSettingsChange","l","handleSectionConditionChange","getReadablePath","childPath","handleDeleteChildSectionOrQuestion","handleSectionCustomIdChange","openConditionSettings","handleSectionClick","handleDuplicatingSettingsSave","handleDuplicatingSettingsCancel","toolbarItems","Toolbar","handleItemClick","fixedToTop","handleClick","CONFIG","SurveyForm","toasterRef","activeSection","activeSectionPath","loadForm","token","request","query","variables","formId","then","file","JSON","parse","iterated","getAllEntries","startSectionPath","first","returnbag","deleteid","path_","parent","newSectionPath","newSection","stringify","requestBody","saveFile","re","handleAddSection","handleAddQuestion","handleUpOneLevel","copy","toast","intent","Intent","SUCCESS","show","union","selectedQuestion","newName","handleToolbarItemClick","handleRootNameChange","handleFormTreeNodeExpand","handleFormTreeNodeCollapse","handleFormTreeNodeClick","handleDuplicatingSettingsChange","handleSectionChange","handleDeleteQuestionOrSection","handleQuestionUpdate","position","margin","Login","usernameRef","passwordRef","email","password","res","onLoggedIn","Container","alignContent","handleLogin","window","App","isLoggedIn","Boolean","location","hostname","match","hist","createBrowserHistory","whyDidYouUpdate","groupByComment","collapseComponentGroups","history","from","to","navigator","serviceWorker","ready","registration","unregister","__export","m","Array","c","isValid","x","Clone","getClause","clause","deleteLiteral","API_URL","queryName","onErrorMessage","headers","Authorization","fetch","method","status","json","resData","catch","err","nu","join","ofTypeToJSON","ofTypeFromJSON"],"mappings":"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","file":"static/js/main.ede1b520.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar answer_1 = require(\"./answer\");\n\nvar AnswerOptions_1 = require(\"./AnswerOptions\");\n\nvar condition_1 = require(\"./condition\");\n\nvar util_1 = require(\"./util\");\n\nvar valueType_1 = require(\"./valueType\");\n\nvar QAQuestion =\n/** @class */\nfunction () {\n  function QAQuestion() {\n    this.content = [];\n    this.customId = '';\n    this.autoAnswer = {\n      isEnabled: false,\n      answeringConditions: []\n    };\n    this.options = new AnswerOptions_1.AnswerOptions();\n    this.id = util_1.getRandomId('q-');\n    this.questionContent = {\n      content: '',\n      type: answer_1.QAType.String\n    };\n  }\n\n  QAQuestion.toJSON = function (a) {\n    var r = {\n      id: a.id,\n      isRequired: a.isRequired,\n      appearingCondition: condition_1.QACondition.toJSON(a.appearingCondition),\n      questionContent: {\n        content: a.questionContent.content,\n        type: a.questionContent.type\n      },\n      autoAnswer: autoAnswerToJSON(a.autoAnswer),\n      options: AnswerOptions_1.AnswerOptions.toJSON(a.options),\n      answerType: a.answerType ? valueType_1.answerTypeToJSON(a.answerType) : undefined,\n      customId: a.customId\n    };\n    return r;\n  };\n\n  QAQuestion.fromJSON = function (a) {\n    var q = new QAQuestion();\n    q.id = a.id;\n    q.isRequired = a.isRequired;\n    q.appearingCondition = condition_1.QACondition.fromJSON(a.appearingCondition);\n    q.questionContent = a.questionContent;\n\n    if (a.options) {\n      q.options = AnswerOptions_1.AnswerOptions.fromJSON(a.options);\n    }\n\n    if (a.answerType) {\n      q.answerType = valueType_1.answerTypeFromJSON(a.answerType);\n    }\n\n    if (a.autoAnswer) {\n      q.autoAnswer = autoAnswerFromJSON(a.autoAnswer);\n    }\n\n    a.customId = q.customId || \"\";\n    return q;\n  };\n\n  QAQuestion.prototype.updateFromQuestion = function (q) {\n    this.isRequired = q.isRequired;\n    this.appearingCondition = q.appearingCondition;\n    this.questionContent = q.questionContent;\n    this.autoAnswer = q.autoAnswer;\n    this.options = q.options;\n    this.answerType = q.answerType;\n    return this;\n  };\n\n  QAQuestion.prototype.setIsRequired = function (bool) {\n    this.isRequired = bool;\n    return this;\n  };\n\n  QAQuestion.prototype.setAppearingCondition = function (cond) {\n    this.appearingCondition = cond;\n    return this;\n  };\n\n  QAQuestion.prototype.setAutoAnswer = function (a) {\n    this.autoAnswer = a;\n    return this;\n  };\n\n  QAQuestion.prototype.setQuestionContent = function (content) {\n    this.questionContent = content;\n    return this;\n  };\n\n  QAQuestion.prototype.setCreationDate = function (creationDate) {\n    if (!creationDate) {\n      this.creationDate = new Date().getTime();\n    } else {\n      this.creationDate = creationDate;\n    }\n\n    return this;\n  };\n\n  QAQuestion.prototype.setAutoAnswerEnabled = function (bool) {\n    if (!bool) {\n      this.autoAnswer.isEnabled = true;\n    } else {\n      this.autoAnswer.isEnabled = bool;\n    }\n\n    return this;\n  };\n\n  QAQuestion.prototype.addAutoAnswerCondition = function (aaCond) {\n    this.autoAnswer.answeringConditions.push(aaCond);\n    return this;\n  };\n\n  QAQuestion.prototype.setAnswerType = function (type) {\n    this.answerType = type;\n    return this;\n  };\n\n  QAQuestion.prototype.setOptions = function (opt) {\n    this.options = opt;\n    return this;\n  };\n\n  return QAQuestion;\n}();\n\nexports.QAQuestion = QAQuestion;\n\nfunction answerConditionToJSON(a) {\n  return {\n    condition: condition_1.QACondition.toJSON(a.condition),\n    ifTrue: a.ifTrue,\n    ifFalse: a.ifFalse\n  };\n}\n\nexports.answerConditionToJSON = answerConditionToJSON;\n\nfunction answerConditionFromJSON(a) {\n  var r = {\n    condition: condition_1.QACondition.fromJSON(a.condition),\n    ifFalse: a.ifFalse,\n    ifTrue: a.ifTrue\n  };\n  return r;\n}\n\nexports.answerConditionFromJSON = answerConditionFromJSON;\n\nfunction autoAnswerToJSON(a) {\n  if (!a) {\n    return undefined;\n  }\n\n  return {\n    isEnabled: a.isEnabled,\n    answeringConditions: a.answeringConditions.map(function (item) {\n      return answerConditionToJSON(item);\n    })\n  };\n}\n\nexports.autoAnswerToJSON = autoAnswerToJSON;\n\nfunction autoAnswerFromJSON(a) {\n  var r = {\n    isEnabled: a.isEnabled,\n    answeringConditions: a.answeringConditions.map(function (item) {\n      return answerConditionFromJSON(item);\n    })\n  };\n  return r;\n}\n\nexports.autoAnswerFromJSON = autoAnswerFromJSON;","\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = __importDefault(require(\"lodash\"));\n\nvar condition_1 = require(\"./condition\");\n\nvar valueType_1 = require(\"./valueType\");\n\nvar AnswerOptions =\n/** @class */\nfunction () {\n  function AnswerOptions() {\n    this.optionsMap = {};\n    this.optionGroupMap = {};\n    this.options = [];\n    this.opt_count = 0;\n    this.group_count = 0;\n  }\n\n  AnswerOptions.toJSON = function (a) {\n    return {\n      optionsMap: a && a.optionsMap ? lodash_1.default.mapValues(a.optionsMap, function (v) {\n        return optionToJSON(v);\n      }) : {},\n      optionGroupMap: a && a.optionGroupMap ? lodash_1.default.mapValues(a.optionGroupMap, function (v) {\n        return optionGroupToJSON(v);\n      }) : {}\n    };\n  };\n\n  AnswerOptions.fromJSON = function (d) {\n    var r = new AnswerOptions();\n    r.optionsMap = d.optionsMap ? lodash_1.default.mapValues(d.optionsMap, function (v) {\n      return optionFromJSON(v);\n    }) : {};\n    r.optionGroupMap = d.optionGroupMap ? lodash_1.default.mapValues(d.optionGroupMap, function (v) {\n      var rr = {\n        id: v.id,\n        name: v.name,\n        appearingCondition: condition_1.QACondition.fromJSON(v.appearingCondition),\n        members: v.members.map(function (item) {\n          return r.optionsMap[item.id];\n        })\n      };\n      return rr;\n    }) : {};\n    return r;\n  };\n\n  Object.defineProperty(AnswerOptions.prototype, \"SortedOptions\", {\n    get: function get() {\n      var grouplessOptions = Object.values(this.optionsMap).filter(function (item) {\n        return !item.groupName;\n      });\n      var groups = Object.values(this.optionGroupMap);\n      return {\n        groups: groups,\n        rootOptions: grouplessOptions\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AnswerOptions.prototype.addOption = function (option) {\n    if (!option) {\n      option = {\n        id: 'opt-' + this.opt_count,\n        value: undefined,\n        groupName: undefined\n      };\n    }\n\n    this.optionsMap[option.id] = option;\n    var groupname = option.groupName;\n\n    if (groupname) {\n      var group = this.optionGroupMap[groupname];\n\n      if (!group) {\n        group = {\n          id: 'opt-grp-' + this.group_count,\n          name: groupname,\n          appearingCondition: undefined,\n          members: [option]\n        };\n        this.optionGroupMap[groupname] = group;\n        this.group_count++;\n      }\n\n      var optionExistInGroup = null;\n\n      if (option && option.id) {\n        optionExistInGroup = group.members.find(function (item) {\n          if (option) {\n            return item.id === option.id;\n          }\n\n          return false;\n        });\n      }\n\n      if (!optionExistInGroup) {\n        group.members.push(option);\n      }\n    }\n\n    this.opt_count++;\n    return this;\n  };\n\n  AnswerOptions.prototype.addGroup = function (groupname) {\n    var group = {\n      id: 'opt-grp' + this.group_count,\n      name: groupname || \"group-\" + this.group_count,\n      appearingCondition: undefined,\n      members: []\n    };\n    this.optionGroupMap[group.name] = group;\n    this.group_count++;\n    return group;\n  };\n\n  AnswerOptions.prototype.setValueForOption = function (id, newValue) {\n    var option = this.optionsMap[id];\n\n    if (option) {\n      option.value = newValue;\n    }\n\n    return this;\n  };\n\n  AnswerOptions.prototype.deleteOption = function (id) {\n    var opt = this.optionsMap[id];\n\n    if (opt) {\n      delete this.optionsMap[id];\n      var groupname = opt.groupName;\n\n      if (groupname) {\n        var group = this.optionGroupMap[groupname];\n\n        if (group) {\n          var ind = group.members.findIndex(function (item) {\n            return item.id === id;\n          });\n\n          if (ind > -1) {\n            group.members.splice(ind, 1);\n          }\n        }\n      }\n    }\n\n    return this;\n  };\n\n  AnswerOptions.prototype.assignOptionToGroup = function (optionIds, groupName) {\n    var existingGroup = this.optionGroupMap[groupName];\n\n    if (!existingGroup) {\n      existingGroup = this.addGroup(groupName);\n      this.optionGroupMap[existingGroup.name] = existingGroup;\n    }\n\n    var _loop_1 = function _loop_1(i) {\n      var optionId = optionIds[i];\n      var option = this_1.optionsMap[optionId];\n      var option_group = option.groupName && this_1.optionGroupMap[option.groupName];\n\n      if (existingGroup.members.find(function (item) {\n        return item.id === optionId;\n      })) {\n        return \"continue\";\n      } // unassign from the group the option is in\n\n\n      if (option_group) {\n        var find = option_group.members.findIndex(function (item) {\n          return item.id === option.id;\n        });\n\n        if (find > -1) {\n          option_group.members.splice(find, 1);\n        }\n      }\n\n      option.groupName = existingGroup.name;\n      existingGroup.members.push(option);\n    };\n\n    var this_1 = this;\n\n    for (var i = 0; i < optionIds.length; i++) {\n      _loop_1(i);\n    }\n\n    return this;\n  };\n\n  AnswerOptions.prototype.setConditionForOption = function (optionId, condition) {\n    var option = this.optionsMap[optionId];\n\n    if (option) {\n      option.appearingCondition = condition;\n    }\n\n    return this;\n  };\n\n  AnswerOptions.prototype.setConditionForGroup = function (groupname, condition) {\n    var group = this.optionGroupMap[groupname];\n\n    if (group) {\n      group.appearingCondition = condition;\n    }\n\n    return this;\n  };\n\n  AnswerOptions.prototype.unassignGroup = function (ids) {\n    var _this = this;\n\n    ids.forEach(function (id) {\n      var option = _this.optionsMap[id];\n      var opt_groupname = option.groupName;\n\n      if (option && opt_groupname) {\n        var optgroup = _this.optionGroupMap[opt_groupname];\n\n        if (optgroup) {\n          var ind = optgroup.members.findIndex(function (item) {\n            return item.id === id;\n          });\n          optgroup.members.splice(ind, 1);\n        }\n      }\n\n      if (option) {\n        option.groupName = undefined;\n      }\n    });\n  };\n\n  AnswerOptions.prototype.changeGroupName = function (oldname, newname) {\n    var _this = this;\n\n    var group = this.optionGroupMap[oldname];\n    var members_ids = group.members.map(function (item) {\n      return item.id;\n    });\n\n    if (members_ids) {\n      members_ids.forEach(function (id) {\n        var option = _this.optionsMap[id];\n\n        if (option) {\n          option.groupName = newname;\n        }\n      });\n    }\n\n    if (group) {\n      group.name = newname;\n      var newGroup = lodash_1.default.clone(group);\n      delete this.optionGroupMap[oldname];\n      this.optionGroupMap[newname] = newGroup;\n    }\n  };\n\n  AnswerOptions.prototype.deleteGroup = function (name) {\n    var _this = this;\n\n    var group = this.optionGroupMap[name];\n\n    if (!group) {\n      return this;\n    }\n\n    var members_ids = group.members.map(function (item) {\n      return item.id;\n    });\n\n    if (members_ids) {\n      members_ids.forEach(function (id) {\n        var option = _this.optionsMap[id];\n\n        if (option) {\n          option.groupName = undefined;\n        }\n      });\n    }\n\n    delete this.optionGroupMap[name];\n  };\n\n  AnswerOptions.prototype.setOptionTypeFor = function (optionId, newType) {\n    var opt = this.optionsMap[optionId];\n\n    if (opt) {\n      opt.type = newType;\n      opt.value = undefined;\n    }\n  };\n\n  return AnswerOptions;\n}();\n\nexports.AnswerOptions = AnswerOptions;\n\nfunction optionGroupToJSON(a) {\n  return {\n    id: a.id,\n    name: a.name,\n    appearingCondition: condition_1.QACondition.toJSON(a.appearingCondition),\n    members: a.members.map(function (item) {\n      return optionToJSON(item);\n    })\n  };\n}\n\nexports.optionGroupToJSON = optionGroupToJSON;\n\nfunction optionFromJSON(a) {\n  var option = {\n    groupName: a.groupName,\n    appearingCondition: condition_1.QACondition.fromJSON(a.appearingCondition),\n    id: a.id,\n    value: a.value\n  };\n  if (a.type) option.type = valueType_1.answerTypeFromJSON(a.type);\n  return option;\n}\n\nexports.optionFromJSON = optionFromJSON;\n\nfunction optionToJSON(a) {\n  return {\n    appearingCondition: condition_1.QACondition.toJSON(a.appearingCondition),\n    type: a.type ? valueType_1.answerTypeToJSON(a.type) : undefined,\n    id: a.id,\n    value: a.value,\n    groupName: a.groupName\n  };\n}\n\nexports.optionToJSON = optionToJSON;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Answer =\n/** @class */\nfunction () {\n  function Answer(content) {\n    this.content = content;\n  }\n\n  Object.defineProperty(Answer.prototype, \"Condition\", {\n    get: function get() {\n      return this.condition;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Answer.prototype, \"Content\", {\n    get: function get() {\n      return this.content;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Answer.prototype.setContent = function (content) {\n    this.content = content;\n    return this;\n  };\n\n  Answer.prototype.setCondition = function (condition) {\n    this.condition = condition;\n    return this;\n  };\n\n  return Answer;\n}();\n\nexports.Answer = Answer;\nvar QAComparisonOperator;\n\n(function (QAComparisonOperator) {\n  QAComparisonOperator[\"Less_Than_Or_Equal\"] = \"<=\";\n  QAComparisonOperator[\"Greater_Than_Or_Equal\"] = \">=\";\n  QAComparisonOperator[\"Less_Than\"] = \"<\";\n  QAComparisonOperator[\"Greater_Than\"] = \">\";\n  QAComparisonOperator[\"Equal\"] = \"==\";\n})(QAComparisonOperator = exports.QAComparisonOperator || (exports.QAComparisonOperator = {}));\n\nvar AnswerType;\n\n(function (AnswerType) {\n  AnswerType[\"String\"] = \"String\";\n  AnswerType[\"Boolean\"] = \"Boolean\";\n  AnswerType[\"Date\"] = \"Date\";\n  AnswerType[\"Time\"] = \"Time\";\n  AnswerType[\"Number\"] = \"Number\";\n  AnswerType[\"Select\"] = \"Select\";\n})(AnswerType = exports.AnswerType || (exports.AnswerType = {}));\n\nvar QAType;\n\n(function (QAType) {\n  QAType[\"String\"] = \"string\";\n  QAType[\"html\"] = \"html\";\n})(QAType = exports.QAType || (exports.QAType = {}));","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar question_1 = require(\"./question\");\n\nvar condition_1 = require(\"./condition\");\n\nvar util_1 = require(\"./util\");\n\nvar duplicateSettings_1 = require(\"./duplicateSettings\");\n\nvar QuestionSection =\n/** @class */\nfunction () {\n  function QuestionSection() {\n    this.customId = '';\n    this.id = util_1.getRandomId('ss-');\n    this.duplicatingSettings = {\n      condition: undefined,\n      isEnabled: false,\n      duplicateTimes: {\n        value: '',\n        type: 'number'\n      }\n    };\n    this.content = [];\n    this.appearingCondition = new condition_1.QACondition();\n  }\n\n  QuestionSection.toJSON = function (a) {\n    return {\n      name: a.name,\n      id: a.id,\n      appearingCondition: condition_1.QACondition.toJSON(a.appearingCondition),\n      customId: a.customId,\n      content: a.content.map(function (item) {\n        if (item instanceof QuestionSection) {\n          return QuestionSection.toJSON(item);\n        } else if (item instanceof question_1.QAQuestion) {\n          return question_1.QAQuestion.toJSON(item);\n        }\n      }),\n      duplicatingSettings: duplicateSettings_1.dupeSettingsToJSON(a.duplicatingSettings)\n    };\n  };\n\n  QuestionSection.prototype.setID = function (id) {\n    this.id = id;\n    return this;\n  };\n\n  QuestionSection.prototype.setName = function (name) {\n    this.name = name;\n    return this;\n  };\n\n  QuestionSection.prototype.setContent = function (content) {\n    this.content = content;\n    return this;\n  };\n\n  QuestionSection.prototype.addContent = function (content) {\n    this.content.push(content);\n    return this;\n  };\n\n  QuestionSection.prototype.deleteContent = function (contentId) {\n    var found = this.content.findIndex(function (item) {\n      return item.id === contentId;\n    });\n\n    if (found > -1) {\n      this.content.splice(found, 1);\n    }\n  };\n\n  QuestionSection.prototype.setDuplicatingSettings = function (dupe) {\n    this.duplicatingSettings = dupe;\n    return this;\n  };\n\n  return QuestionSection;\n}();\n\nexports.QuestionSection = QuestionSection;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ANSWER_TYPES;\n\n(function (ANSWER_TYPES) {\n  ANSWER_TYPES[\"BOOLEAN\"] = \"boolean\";\n  ANSWER_TYPES[\"STRING\"] = \"string\";\n  ANSWER_TYPES[\"DATE\"] = \"date\";\n  ANSWER_TYPES[\"TIME\"] = \"time\";\n  ANSWER_TYPES[\"NUMBER\"] = \"number\";\n  ANSWER_TYPES[\"RANGE\"] = \"range\";\n  ANSWER_TYPES[\"SELECT\"] = \"select\";\n  ANSWER_TYPES[\"GEOLOCATION\"] = \"geolocation\";\n})(ANSWER_TYPES = exports.ANSWER_TYPES || (exports.ANSWER_TYPES = {}));","\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = __importDefault(require(\"lodash\"));\n\nvar Constants =\n/** @class */\nfunction () {\n  function Constants() {\n    this.consts = {};\n    this.count = 0;\n  }\n\n  Constants.fromJSON = function (a) {};\n\n  Constants.toJSON = function (a) {};\n\n  Object.defineProperty(Constants.prototype, \"ConstantsArray\", {\n    get: function get() {\n      return Object.values(this.consts);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Constants.prototype.getConstant = function (constname) {\n    return lodash_1.default.cloneDeep(this.consts[constname]);\n  };\n\n  Constants.prototype.addConstant = function (constant) {\n    if (!constant) {\n      constant = {\n        name: '',\n        id: 'constant-' + this.count,\n        type: undefined,\n        value: ''\n      };\n    }\n\n    this.consts[constant.id] = constant;\n    return this;\n  };\n\n  Constants.prototype.removeConstant = function (id) {\n    if (this.consts[id]) {\n      delete this.consts[id];\n    }\n\n    return this;\n  };\n\n  return Constants;\n}();\n\nexports.Constants = Constants;","\"use strict\";\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = require(\"lodash\");\n\nvar condition_1 = require(\"./condition\");\n\nvar duplicateSettings_1 = require(\"./duplicateSettings\");\n\nvar question_1 = require(\"./question\");\n\nvar questionSection_1 = require(\"./questionSection\");\n\nvar util_1 = require(\"./util\");\n\nvar RootSection =\n/** @class */\nfunction () {\n  function RootSection() {\n    this.questions = {};\n    this.sections = {};\n    this.content = [];\n    this.name = '';\n    this.id = util_1.getRandomId('root-');\n  }\n\n  RootSection.getFromPath = function (path, root) {\n    var el = root[path[0]];\n\n    if (path.length === 1) {\n      return el;\n    }\n\n    if (el.content) {\n      return RootSection.getFromPath(path.slice(1), el.content);\n    }\n  };\n\n  RootSection.prototype.descendants = function (callback) {\n    var iterate = function iterate(node, path) {\n      for (var i = 0; i < node.content.length; i++) {\n        var current = node.content[i];\n\n        if (current) {\n          var cont = callback(current, path.concat(i), node);\n\n          if (current instanceof questionSection_1.QuestionSection && (lodash_1.isNil(cont) || cont === true)) {\n            iterate(current, path.concat(i));\n          }\n        }\n      }\n    };\n\n    iterate(this, [0]);\n  };\n\n  RootSection.Entries = function (root, sectionPath, startIndex, fetchType) {\n    var stack = [];\n    var rt = [];\n    var cloned = sectionPath.slice(0);\n    stack.push({\n      path: sectionPath,\n      startIndex: startIndex\n    });\n\n    for (var i = 0; i < sectionPath.length - 1; i++) {\n      stack.push({\n        path: cloned.slice(0, cloned.length - 1),\n        startIndex: cloned[cloned.length - 1] + 1\n      });\n      cloned.pop();\n    }\n\n    while (stack.length > 0) {\n      var p = stack.shift();\n\n      if (p) {\n        var section = RootSection.getFromPath(p.path, [root]);\n\n        if (section) {\n          for (var i = p.startIndex; i < section.content.length; i++) {\n            var item = section.content[i];\n\n            if (item instanceof question_1.QAQuestion) {\n              if (!fetchType || fetchType === QORS.QUESTION) {\n                rt.push({\n                  path: p.path.concat(i),\n                  data: item\n                });\n              }\n            } else {\n              if (!fetchType || fetchType === QORS.SECTION) {\n                rt.push({\n                  path: p.path.concat(i),\n                  data: item\n                });\n              }\n\n              stack.push({\n                path: p.path.concat(i),\n                startIndex: 0\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return rt;\n  };\n\n  RootSection.prototype.addQuestion = function (parentPath, q) {\n    if (!q) {\n      q = [new question_1.QAQuestion()];\n    }\n\n    var section = RootSection.getFromPath(parentPath, [this]);\n\n    for (var i = 0; i < q.length; i++) {\n      var current = q[i];\n\n      if (this.questions[current.id]) {\n        throw new Error('Question id conflict');\n      }\n\n      this.questions[current.id] = current;\n\n      if (section && !(section instanceof question_1.QAQuestion)) {\n        section.content.push(current);\n      }\n    }\n\n    return this;\n  };\n\n  RootSection.prototype.addSection = function (parentPath, q) {\n    if (!q) {\n      q = [new questionSection_1.QuestionSection()];\n    }\n\n    var section = RootSection.getFromPath(parentPath, [this]);\n\n    for (var i = 0; i < q.length; i++) {\n      var current = q[i];\n\n      if (this.questions[current.id]) {\n        throw new Error('Section id conflict');\n      }\n\n      this.sections[current.id] = current;\n\n      if (section && !(section instanceof question_1.QAQuestion)) {\n        section.content.push(current);\n      }\n    }\n\n    return this;\n  };\n\n  RootSection.prototype.removeQuestion = function (questionId, path) {\n    var parentSection = RootSection.getFromPath(path.slice(0, path.length - 1), [this]);\n\n    if (parentSection && !(parentSection instanceof question_1.QAQuestion)) {\n      var foundIndex = parentSection.content.findIndex(function (item) {\n        return item.id === questionId;\n      });\n\n      if (foundIndex > -1) {\n        parentSection.content.splice(foundIndex, 1);\n        delete this.questions[questionId];\n      }\n    }\n\n    return this;\n  };\n\n  RootSection.prototype.removeSection = function (sectionId, path) {\n    var parentSection = RootSection.getFromPath(path.slice(0, path.length - 1), [this]);\n\n    if (parentSection && !(parentSection instanceof question_1.QAQuestion)) {\n      var foundIndex = parentSection.content.findIndex(function (item) {\n        return item.id === sectionId;\n      });\n\n      if (foundIndex > -1) {\n        parentSection.content.splice(foundIndex, 1);\n        delete this.sections[sectionId];\n      }\n    }\n\n    return this;\n  };\n\n  RootSection.prototype.moveItem = function (prevPath, newPath) {\n    var itemAtPath = RootSection.getFromPath(prevPath, [this]);\n    var newParentPath = newPath.slice(0, newPath.length - 1);\n    var oldParentPath = prevPath.slice(0, prevPath.length - 1);\n    var newParent = RootSection.getFromPath(newParentPath, [this]);\n    var oldParent = RootSection.getFromPath(oldParentPath, [this]);\n\n    if (oldParent && newParent && itemAtPath) {\n      var foundIndex = oldParent.content.findIndex(function (item) {\n        return item.id === itemAtPath.id;\n      });\n\n      if (foundIndex > -1 && !(oldParent instanceof question_1.QAQuestion)) {\n        var removed = oldParent.content.splice(foundIndex, 1);\n\n        if (!(newParent instanceof question_1.QAQuestion)) {\n          var pos = newPath[newPath.length - 1];\n\n          if (removed[0] instanceof questionSection_1.QuestionSection) {\n            newParent.content.splice(pos, 0, this.sections[removed[0].id]);\n          } else if (removed[0] instanceof question_1.QAQuestion) {\n            newParent.content.splice(pos, 0, this.questions[removed[0].id]);\n          }\n        }\n\n        return this;\n      }\n    }\n  };\n\n  RootSection.toJSON = function (a) {\n    var r = {\n      id: a.id,\n      name: a.name,\n      content: a.content.map(function (item) {\n        if (item instanceof questionSection_1.QuestionSection) {\n          return questionSection_1.QuestionSection.toJSON(item);\n        } else if (item instanceof question_1.QAQuestion) {\n          return question_1.QAQuestion.toJSON(item);\n        }\n      })\n    };\n    return r;\n  };\n\n  RootSection.fromJSON = function (a) {\n    var r = new RootSection();\n    r.id = a.id;\n    r.name = a.name;\n    var path = [0];\n\n    var handleSectionAdd = function handleSectionAdd(a, parentPath, index) {\n      if (a.hasOwnProperty('content')) {\n        var section = new questionSection_1.QuestionSection();\n        section.id = a.id;\n        section.name = a.name;\n        section.customId = a.customId || '';\n        if (a.customId) section.customId = a.customId;\n\n        if (a.appearingCondition) {\n          section.appearingCondition = condition_1.QACondition.fromJSON(a.appearingCondition);\n        }\n\n        section.duplicatingSettings = duplicateSettings_1.dupeSettingsFromJSON(a.duplicatingSettings);\n        r.addSection(parentPath, [section]);\n        a.content.forEach(function (item, i) {\n          return handleSectionAdd(item, parentPath.concat(index), i);\n        });\n      } else {\n        var question = question_1.QAQuestion.fromJSON(a);\n        r.addQuestion(parentPath, [question]);\n      }\n    };\n\n    a.content.forEach(function (item, index) {\n      return handleSectionAdd(item, path, index);\n    });\n    return r;\n  };\n\n  RootSection.prototype.Iterator2 = function (sectionPath, index, fetchType) {\n    var section, current, _i, _a, q, _b, _c, q;\n\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          if (sectionPath.length === 0) {\n            return [2\n            /*return*/\n            , true];\n          }\n\n          section = RootSection.getFromPath(sectionPath, [this]);\n          if (!(section && !(section instanceof question_1.QAQuestion))) return [3\n          /*break*/\n          , 16];\n          _d.label = 1;\n\n        case 1:\n          if (!(index < section.content.length)) return [3\n          /*break*/\n          , 11];\n          current = section.content[index];\n          if (!(current instanceof question_1.QAQuestion)) return [3\n          /*break*/\n          , 4];\n          if (!(fetchType === QORS.QUESTION || !fetchType)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , {\n            path: sectionPath.concat(index),\n            data: current\n          }];\n\n        case 2:\n          _d.sent();\n\n          _d.label = 3;\n\n        case 3:\n          index++;\n          return [3\n          /*break*/\n          , 10];\n\n        case 4:\n          if (!(current instanceof questionSection_1.QuestionSection)) return [3\n          /*break*/\n          , 10];\n          if (!(fetchType === QORS.SECTION || !fetchType)) return [3\n          /*break*/\n          , 6];\n          return [4\n          /*yield*/\n          , {\n            path: sectionPath.concat(index),\n            data: current\n          }];\n\n        case 5:\n          _d.sent();\n\n          _d.label = 6;\n\n        case 6:\n          index++;\n          _i = 0, _a = this.Iterator2(sectionPath.concat(index), 0, fetchType);\n          _d.label = 7;\n\n        case 7:\n          if (!(_i < _a.length)) return [3\n          /*break*/\n          , 10];\n          q = _a[_i];\n          return [4\n          /*yield*/\n          , q];\n\n        case 8:\n          _d.sent();\n\n          _d.label = 9;\n\n        case 9:\n          _i++;\n          return [3\n          /*break*/\n          , 7];\n\n        case 10:\n          return [3\n          /*break*/\n          , 1];\n\n        case 11:\n          if (!(sectionPath && sectionPath.length > 0)) return [3\n          /*break*/\n          , 15];\n          index = sectionPath[sectionPath.length - 1] + 1;\n          _b = 0, _c = this.Iterator2(sectionPath, index, fetchType);\n          _d.label = 12;\n\n        case 12:\n          if (!(_b < _c.length)) return [3\n          /*break*/\n          , 15];\n          q = _c[_b];\n          return [4\n          /*yield*/\n          , q];\n\n        case 13:\n          _d.sent();\n\n          _d.label = 14;\n\n        case 14:\n          _b++;\n          return [3\n          /*break*/\n          , 12];\n\n        case 15:\n          return [2\n          /*return*/\n          , true];\n\n        case 16:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n\n  return RootSection;\n}();\n\nexports.RootSection = RootSection;\nvar QORS;\n\n(function (QORS) {\n  QORS[QORS[\"QUESTION\"] = 1] = \"QUESTION\";\n  QORS[QORS[\"SECTION\"] = 2] = \"SECTION\";\n})(QORS = exports.QORS || (exports.QORS = {}));","import { Drawer } from \"@blueprintjs/core\";\nimport React from \"react\";\n\n\n\n\ninterface ConstantDefinitionsState {\n\n}\ninterface ConstantDefinitionsProps {\n    isOpen: boolean,\n}\nexport class ConstantDefinitions extends React.Component<ConstantDefinitionsProps, ConstantDefinitionsState>{\n\n    constructor(props: ConstantDefinitionsProps) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    render() {\n         return (\n            <Drawer isOpen={this.props.isOpen}>\n\n            </Drawer>\n        )\n    }\n}","\nimport { ITreeNode, Tree, Classes } from \"@blueprintjs/core\";\n\nimport React from \"react\";\nimport { RootSection, QuestionSection, QAQuestion } from \"dpform\";\n\n\n\n\ninterface FormTreeState {\n}\ninterface FormTreeProps {\n    root_: RootSection,\n    selectedNodes: string[],\n    expandedNodes: string[],\n    handleNodeClick?: (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => void,\n    handleNodeCollapse?: (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => void,\n    handleNodeExpand?: (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => void,\n\n}\nexport class FormTree extends React.Component<FormTreeProps, FormTreeState>{\n    constructor(props: FormTreeProps) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    private handleNodeClick = (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\n        if (this.props.handleNodeClick) this.props.handleNodeClick(nodeData, _nodePath, e);\n    };\n\n    private handleNodeCollapse = (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\n        if (this.props.handleNodeCollapse) this.props.handleNodeCollapse(nodeData, _nodePath, e);\n    };\n\n    private handleNodeExpand = (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {\n        if (this.props.handleNodeExpand) this.props.handleNodeExpand(nodeData, _nodePath, e);\n    };\n    getNodeFromQuestionOrSection(item: QuestionSection | QAQuestion, sectionNumber: string, selectedNodes: string[], expandedNodes: string[]) {\n        let def: ITreeNode = {\n            id: item.id,\n            icon: undefined,\n            label: \"\",\n            isSelected: selectedNodes.includes(item.id),\n            isExpanded: expandedNodes.includes(item.id)\n        };\n        if (item instanceof QAQuestion) {\n            def.icon = \"document\"\n            def.label = `${sectionNumber} ${item.questionContent.content||\"Question\"}`;\n        }\n        else if (item instanceof QuestionSection) {\n            def.icon = \"folder-close\"\n            def.label = `${sectionNumber} ${item.name || \"Section\"}`;\n            def.childNodes = item.content.map((it, ind) => this.getNodeFromQuestionOrSection(it, sectionNumber + \".\" + (ind + 1), selectedNodes, expandedNodes))\n\n        }\n        return def;\n    }\n\n    generateITNodeTree(form: RootSection, selectedNodes: string[], expandedNodes: string[]): ITreeNode[] {\n        let root: ITreeNode = {\n            id: form.id,\n            hasCaret: true,\n            icon: \"folder-close\",\n            label: \"Root\",\n            isExpanded: expandedNodes.includes(form.id),\n            isSelected: selectedNodes.includes(form.id),\n            childNodes: form.content.map((it: QAQuestion | QuestionSection, ind: number) => this.getNodeFromQuestionOrSection(it, (ind + 1).toString(), selectedNodes, expandedNodes))\n        }\n        return [root];\n    }\n\n\n\n    render() {\n        console.log(this.props.root_);\n        return <Tree contents={this.generateITNodeTree(this.props.root_, this.props.selectedNodes, this.props.expandedNodes)}\n            onNodeClick={this.handleNodeClick}\n            onNodeCollapse={this.handleNodeCollapse}\n            onNodeExpand={this.handleNodeExpand}\n            className={Classes.ELEVATION_0} />\n\n    }\n}\n","import { ReactElement } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nexport function openModal(com: ReactElement) {\n    let el = document.getElementById(\"dp-modal\");\n    if (!el) {\n        el = document.createElement(\"div\");\n        el.setAttribute(\"id\", \"dp-modal\")\n        document.body.appendChild(el)\n    }\n    ReactDOM.render(com, el);\n}\n\nexport function destroyModal() {\n    let el = document.getElementById(\"dp-modal\");\n    if (el) ReactDOM.unmountComponentAtNode(el);\n\n}","export function getRandomId(startingText?: string) {\n    if (!startingText)\n        startingText = \"\";\n    var S4 = function () {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    };\n    return startingText + (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n}\n","import React, { useState } from \"react\";\nimport { TimePicker, TimePrecision, DateRangePicker, DateInput } from \"@blueprintjs/datetime\"\nimport { ButtonGroup, Divider } from \"@blueprintjs/core\";\nimport Select from \"react-select\"\nimport { customStyles } from \"./DPFormItem\";\nimport {IValueType, ANSWER_TYPES, AnswerOptions, IOptionGroup, IOption} from \"dpform\";\n\ninterface RangeValue {\n    min: string | undefined\n    max: string | undefined\n}\n\n\ninterface RangeInputProps {\n    type: IValueType,\n    value: string,\n    onChange: (newRange: string) => void\n}\n\ninterface RangeInputState {\n\n}\nexport class RangeInput extends React.Component<RangeInputProps, RangeInputState>{\n    constructor(props: RangeInputProps) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    parseRangeValue(range: string): RangeValue {\n        let d = range.split(\"-\")\n        return { min: d[0], max: d[1] }\n    }\n\n    handleInputChange(data: RangeValue) {\n        let transformed = data.min + \"-\" + data.max;\n        switch (this.props.type && this.props.type.name) {\n            //necessary transforms to be done here\n            case ANSWER_TYPES.TIME:\n                if (this.props.onChange) this.props.onChange(transformed);\n                break;\n            case ANSWER_TYPES.DATE:\n                if (this.props.onChange) this.props.onChange(transformed);\n                break;\n            case ANSWER_TYPES.NUMBER:\n                if (this.props.onChange) this.props.onChange(transformed);\n                break;\n            default:\n                if (this.props.onChange) this.props.onChange(transformed);\n\n                break;\n\n        }\n    }\n    render() {\n        let comp = null;\n        let type = this.props.type ? this.props.type.name : undefined;\n        let parsed = this.parseRangeValue(this.props.value);\n        switch (type) {\n            case ANSWER_TYPES.TIME:\n                comp = <TimeRange range={parsed} onChange={this.handleInputChange} />\n                break;\n            case ANSWER_TYPES.DATE:\n                let dateMin = parsed.min ? new Date(parsed.min) : undefined;\n                let dateMax = parsed.max ? new Date(parsed.max) : undefined;\n                comp = <DateRangePicker shortcuts={false} defaultValue={[dateMin, dateMax]} onChange={(selectedDates) => this.handleInputChange({ min: selectedDates[0] ? selectedDates[0].toString() : \"\", max: selectedDates[1] ? selectedDates[1].toString() : \"\" })} />\n                break;\n            case ANSWER_TYPES.NUMBER:\n                comp = <NumberRange range={parsed} onChange={d => this.handleInputChange} />\n                break;\n        }\n        return comp;\n    }\n}\n\n\n\ninterface NumberRangeProps {\n    range: RangeValue,\n    onChange: (range: RangeValue) => void,\n}\nconst defaultNumberRangeProps: NumberRangeProps = {\n    range: { min: \"\", max: \"\" },\n    onChange: () => { }\n}\n\nconst NumberRange = (props: NumberRangeProps = defaultNumberRangeProps) => {\n    const [minValue, setMin] = useState(props ? props.range.min : \"\");\n    const [maxValue, setMax] = useState(props ? props.range.max : \"\");\n    return (\n        <ButtonGroup>\n            <input className=\"form-control\" defaultValue={props && props.range.min && props.range.min.toString()}\n                onChange={e => {\n                    setMin(e.target.value);\n                    if (props && props.onChange) props.onChange({ min: minValue, max: maxValue })\n                }} placeholder=\"Minimum\" id=\"numberRange-min\" type=\"number\"></input>\n            <Divider></Divider>\n            <input className=\"form-control\" defaultValue={props && props.range.max && props.range.max.toString()} onChange={e => {\n                setMax(e.target.value);\n                if (props && props.onChange) props.onChange({ min: minValue, max: maxValue })\n            }} placeholder=\"Maximum\" id=\"numberRange-max\" type=\"number\"></input>\n        </ButtonGroup>\n    )\n}\n\ninterface TimeRangeProps {\n    range: RangeValue,\n    onChange: (range: RangeValue) => void\n}\nconst defaultTimeRangeProps = {\n    range: {\n        min: \"Sat Aug 31 2019 13:35:27 GMT-0230 (Newfoundland Daylight Time\",\n        max: \"Sat Aug 31 2019 13:35:27 GMT-0230 (Newfoundland Daylight Time\"\n    },\n    onChange: () => { }\n}\nconst TimeRange = (props: TimeRangeProps = defaultTimeRangeProps) => {\n    const [minValue, setMin] = useState(props ? props.range.min : undefined);\n    const [maxValue, setMax] = useState(props ? props.range.max : undefined);\n    console.log(maxValue);\n    console.log(minValue);\n    return (\n        <ButtonGroup className=\"bp3-dark\">\n            <TimePicker precision={TimePrecision.MINUTE} useAmPm={true} defaultValue={minValue ? new Date(minValue) : undefined} onChange={newTime => {\n                setMin(newTime.toLocaleDateString());\n                if (props.onChange) props.onChange({ min: minValue, max: maxValue })\n            }}></TimePicker>\n            <Divider />\n\n            <TimePicker precision={TimePrecision.MINUTE} useAmPm={true} defaultValue={maxValue ? new Date(maxValue) : undefined} onChange={newTime => {\n                setMax(newTime.toLocaleDateString());\n                props.onChange({ min: minValue, max: maxValue })\n            }}></TimePicker>\n        </ButtonGroup>\n    )\n}\n\ninterface ValInputProps {\n    type: IValueType,\n    defaultValue?: any,\n    options?: AnswerOptions | undefined,\n    onChange: (newValue: any) => void\n}\ninterface ValInputState {\n\n}\nexport class ValInput extends React.Component<ValInputProps, ValInputState> {\n    static get defaultProps(): ValInputProps {\n        return {\n            defaultValue: \"\",\n            onChange: (e) => { console.log(e) },\n            type: { name: ANSWER_TYPES.STRING }\n        }\n    }\n    constructor(props: ValInputProps) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    render() {\n        let comp = null;\n        switch (this.props.type.name) {\n            case ANSWER_TYPES.NUMBER:\n                comp = <input\n                    defaultValue={this.props.defaultValue}\n                    className=\"form-control\"\n                    type=\"number\"\n                    onChange={e => {\n                        if (this.props.onChange) this.props.onChange({ value: e.target.value })\n                    }}\n                />\n                break;\n            case ANSWER_TYPES.SELECT:\n                comp = <SelInput\n                    type={this.props.type.ofType}\n                    defaultValue={this.props.defaultValue}\n                    options={this.props.options}\n                    onChange={(newVal: any) => {\n                        if (this.props.onChange) this.props.onChange(newVal)\n                    }} />\n\n                //TODO::\n                break;\n            case ANSWER_TYPES.BOOLEAN:\n                let opt = [{ value: \"true\", label: \"YES\" }, { value: \"false\", label: \"No\" }];\n                let def = opt.find(item => item.value === this.props.defaultValue);\n                comp = <Select\n                    styles={customStyles}\n                    defaultValue={def}\n                    options={opt}\n                    onChange={(newVal: any) => {\n                        if (this.props.onChange) this.props.onChange({ value: newVal.value })\n                    }} />\n                break;\n            case ANSWER_TYPES.DATE:\n                let defaultDate = this.props.defaultValue ? new Date(this.props.defaultValue) : undefined;\n                comp = <DateInput\n                    formatDate={date => date.toLocaleDateString()}\n                    parseDate={str => new Date(str)}\n                    closeOnSelection={true}\n                    defaultValue={defaultDate}\n                    onChange={e => {\n                        if (this.props.onChange) this.props.onChange({ value: e.toLocaleDateString() })\n                    }\n                    } />\n                break;\n            case ANSWER_TYPES.RANGE:\n                if (this.props.type.ofType) {\n                    comp = <RangeInput\n                        value={this.props.defaultValue}\n                        type={this.props.type.ofType}\n                        onChange={e => {\n                            if (this.props.onChange) this.props.onChange({ value: e })\n                        }}\n                    />\n                }\n                break;\n            case ANSWER_TYPES.STRING:\n                comp = <input\n                    className=\"form-control\"\n                    type=\"text\"\n                    defaultValue={this.props.defaultValue}\n                    onChange={e => {\n                        if (this.props.onChange) this.props.onChange({ value: e.target.value })\n                    }} />\n                break;\n            case ANSWER_TYPES.TIME:\n                let defaulttime = this.props.defaultValue ? new Date(this.props.defaultValue) : undefined;\n                comp = <TimePicker precision={TimePrecision.MINUTE} useAmPm={true} defaultValue={defaulttime} onChange={newTime => {\n                    if (this.props.onChange) this.props.onChange({ value: newTime.toString() })\n                }}></TimePicker>\n\n        }\n        return (\n            comp\n        )\n    }\n}\ninterface SelInputProps {\n    options?: AnswerOptions,\n    type?: IValueType,\n    defaultValue?: string,\n    onChange: (data: any) => void\n}\ninterface SelInputState {\n\n}\nexport class SelInput extends React.Component<SelInputProps, SelInputState>{\n    constructor(props: SelInputProps) {\n        super(props);\n        this.state = {}\n    }\n    handleChange(d: any) {\n        console.log(d);\n        if (this.props.onChange) this.props.onChange(d);\n    }\n    render() {\n        let allOptions: any = [];\n        if (this.props.options) {\n            let { rootOptions, groups } = this.props.options.SortedOptions;\n            let groupOptions_: any = [];\n            let rootOptions_: any = []\n            if (groups && groups.length > 0) {\n                groupOptions_ = groups.map((item:IOptionGroup )=> {\n                    return ({\n                        label: item.name,\n                        options: item.members.map(i => ({ label: i.value, value: i.id }))\n                    })\n                })\n            }\n            rootOptions_ = rootOptions.map((i: IOption) => ({ label: i.value, value: i.id }));\n            allOptions = [...groupOptions_, ...rootOptions_];\n        }\n        let findOption = (options_: any, findValue: string | undefined): any => {\n            let found = null;\n            for (let i = 0; i < options_.length; i++) {\n                let options = options_[i];\n                if (options.options && options.options.length > 0) {\n                    found = options.options.find((item: any) => item.value === findValue);\n                    if (found) break;\n                }\n                else {\n                    found = options && options.value === findValue ? options : undefined;\n                    if (found) break;\n                }\n            }\n            return found;\n\n        }\n        let defaultvalue = findOption(allOptions, this.props.defaultValue)\n        return (<Select styles={customStyles} options={allOptions} onChange={this.handleChange.bind(this)} defaultValue={defaultvalue} />)\n    }\n}","import React from \"react\";\nimport { Table, Button } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { openModal, destroyModal } from \"../utils\";\nimport { CreateConditionModal } from \"./CreateConditionModal\";\nimport _ from \"lodash\";\nimport { faKey, faPlusSquare, faWindowClose } from \"@fortawesome/free-solid-svg-icons\";\nimport { ValInput } from \"./ValInput\";\nimport { Switch } from \"@blueprintjs/core\";\nimport { QAQuestion, IAutoAnswer, AnswerOptions, IValueType, IAnswerCondition, ANSWER_TYPES, QACondition, ILiteral } from \"dpform\";\n\ninterface AutoAnswerProps {\n    definedQuestions: { [key: string]: QAQuestion },\n    onChange: (a: IAutoAnswer) => void,\n    options?: AnswerOptions,\n    answerType: IValueType,\n    autoAnswer: IAutoAnswer\n}\ninterface AutoAnswerState {\n    aConditions: IAnswerCondition[];\n    isEnabled: boolean,\n}\n\nexport class AutofillCondition extends React.Component<AutoAnswerProps, AutoAnswerState> {\n    constructor(props: AutoAnswerProps) {\n        super(props);\n        this.state = {\n            aConditions: this.props.autoAnswer.answeringConditions || [],\n            isEnabled: this.props.autoAnswer.isEnabled\n        }\n    }\n\n    editIfTrueFalseValue(type: string, index: number, value: string) {\n        this.setState((prevState: AutoAnswerState) => {\n            let found = undefined;\n            let newConditions = _.clone(prevState.aConditions);\n            let selected = newConditions[index];\n            if (this.props.options && this.props.answerType.name === ANSWER_TYPES.SELECT) {\n                found = this.props.options.optionsMap[value];\n                if (type === \"true\") {\n                    selected.ifTrue = found.id\n\n                }\n                else if (type === \"false\") {\n                    selected.ifFalse = found.id\n                }\n            }\n            else {\n                if (type === 'true') selected.ifTrue = value;\n                if (type === 'false') selected.ifFalse = value;\n            }\n\n\n\n            return {\n                aConditions: newConditions\n            }\n        }, () => {\n            if (this.props.onChange) {\n                this.props.onChange({ isEnabled: this.state.isEnabled, answeringConditions: this.state.aConditions })\n            }\n        });\n\n    }\n\n\n    openConditionModal(index: number) {\n        let condition: IAnswerCondition = this.state.aConditions[index];\n\n        let el = <CreateConditionModal\n            definedQuestions={this.props.definedQuestions}\n            isOpen={true}\n            onSubmit={this.editCondition.bind(this, index)}\n            onCancel={destroyModal.bind(this)}\n            condition={condition.condition} />\n        openModal(el);\n    }\n    changeEnabled() {\n        this.setState((prevState: AutoAnswerState) => {\n            return {\n                isEnabled: !prevState.isEnabled\n            }\n        }, () => {\n            if (this.props.onChange)\n                this.props.onChange({ isEnabled: this.state.isEnabled, answeringConditions: this.state.aConditions })\n\n        })\n    }\n\n    addAutoFillCondition() {\n        this.setState((prevState: AutoAnswerState) => {\n            let newConditions = _.clone(prevState.aConditions);\n            let answerCondition: IAnswerCondition = {\n                condition: new QACondition(),\n                ifTrue: undefined,\n                ifFalse: undefined\n            }\n            newConditions.push(answerCondition);\n            return {\n                aConditions: newConditions\n            }\n        }, () => {\n            if (this.props.onChange)\n                this.props.onChange({ isEnabled: this.state.isEnabled, answeringConditions: this.state.aConditions })\n        })\n    }\n\n    editCondition(index: number, data: ILiteral[]) {\n        let cloned = _.clone(this.state.aConditions);\n        let condition = cloned[index].condition;\n        if (!condition) {\n            cloned[index].condition = new QACondition();\n        }\n        cloned[index].condition.setLiterals(data);\n        this.setState({\n            aConditions: cloned\n        }, () => {\n            destroyModal();\n            if (this.props.onChange) this.props.onChange({ isEnabled: this.state.isEnabled, answeringConditions: this.state.aConditions })\n\n        })\n    }\n\n    removeAutofillCondition(index: number) {\n        this.setState((prevState: AutoAnswerState) => {\n            let aConditions = _.clone(prevState.aConditions);\n            aConditions.splice(index, 1);\n            return {\n                aConditions: aConditions\n            }\n\n        }, () => {\n            if (this.props.onChange) this.props.onChange({ isEnabled: this.state.isEnabled, answeringConditions: this.state.aConditions })\n\n        })\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                <Switch checked={this.state.isEnabled} onChange={this.changeEnabled.bind(this)} label=\"Enabled\"></Switch>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th>Condition</th>\n                            <th> if True</th>\n                            <th> if False</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.aConditions.map((item: IAnswerCondition, index: number) => {\n\n                            let comparisonValueSelect = (ifFalseOrTrue: string) => <ValInput\n                                key={ifFalseOrTrue}\n                                onChange={(data: { value: string }) => this.editIfTrueFalseValue(ifFalseOrTrue, index, data.value)}\n                                options={this.props.options}\n                                defaultValue={ifFalseOrTrue === \"true\" ? item.ifTrue : (item.ifFalse && item.ifFalse)}\n                                type={this.props.answerType} />\n\n                            return (<tr key={`af${index}`}>\n                                <td></td>\n                                <td><Button type=\"button\" onClick={() => this.openConditionModal(index)}\n                                    size=\"sm\">\n                                    <FontAwesomeIcon size={\"sm\"} icon={faKey} /></Button>\n                                </td>\n                                <td>{comparisonValueSelect(\"true\")}</td>\n                                <td>{comparisonValueSelect(\"false\")}</td>\n                                <td><Button size=\"sm\" onClick={() => { this.removeAutofillCondition(index) }}> <FontAwesomeIcon icon={faWindowClose} /></Button></td>\n                            </tr>)\n                        })}\n                        <tr>\n                            <td ><Button size=\"sm\" onClick={() => this.addAutoFillCondition()} type=\"button\" >\n                                <FontAwesomeIcon icon={faPlusSquare} />\n                            </Button></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport { customStyles } from \"./DPFormItem\";\nimport Select from \"react-select\";\nimport { Row, Col } from \"reactstrap\";\nimport _ from \"lodash\";\nimport { ANSWER_TYPES, IValueType } from \"dpform\";\n\ntype QAAnswerTypeOption = { label: string, value: ANSWER_TYPES };\n\n\nconst ValueSelectOptions: QAAnswerTypeOption[] = [\n    { value: ANSWER_TYPES.BOOLEAN, label: \"YES/NO\" },\n    { value: ANSWER_TYPES.STRING, label: \"Text\" },\n    { value: ANSWER_TYPES.TIME, label: \"Time\" },\n    { value: ANSWER_TYPES.DATE, label: \"Date\" },\n    { value: ANSWER_TYPES.NUMBER, label: \"Number\" },\n    { value: ANSWER_TYPES.RANGE, label: \"Range\" },\n    { value: ANSWER_TYPES.SELECT, label: \"Multiple Choice\" },\n    {value: ANSWER_TYPES.GEOLOCATION, label:\"Geo location\"}\n]\n\nconst OptionsForSelect: QAAnswerTypeOption[] = ValueSelectOptions.filter((item) => item.value && item.value !== ANSWER_TYPES.SELECT);\nlet includedInRange = [ANSWER_TYPES.TIME, ANSWER_TYPES.NUMBER, ANSWER_TYPES.DATE, ANSWER_TYPES.TIME];\nconst OptionsForRange: QAAnswerTypeOption[] = ValueSelectOptions.filter(item => includedInRange.includes(item.value))\n\n\ninterface AnswerTypeInputProps {\n    answerType: IValueType,\n    onChange: (val: IValueType) => void,\n}\n\ninterface AnswerTypeInputState {\n    answerType: IValueType,\n}\n\nexport class AnswerTypeInput extends React.Component<AnswerTypeInputProps, AnswerTypeInputState>{\n    static defaultProps = {\n        answerType: { name: undefined, ofType: undefined }\n    }\n    constructor(props: AnswerTypeInputProps) {\n        super(props);\n        this.state = {\n            answerType: this.props.answerType\n        }\n    }\n    /**\n     * \n     * @param data \n     */\n    handleAnswerTypeChange(data: any): void {\n        this.setState((prevState) => {\n            let newAnswerType = _.clone(prevState.answerType);\n            newAnswerType.name = data.value as ANSWER_TYPES;\n            newAnswerType.ofType = undefined;\n            return {\n                answerType: newAnswerType\n            }\n\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.answerType)\n        })\n\n    }\n\n    /**\n     * second select is for selecting types select and range\n     * @param data \n     */\n    handleSecondSelectChange(data: any): void {\n        this.setState((prevState) => {\n            let newAnswerType = _.clone(prevState.answerType);\n            newAnswerType.ofType = { name: data.value as ANSWER_TYPES, ofType: undefined };\n            if (newAnswerType.ofType.ofType) newAnswerType.ofType.ofType = undefined;\n            return {\n                answerType: newAnswerType\n            }\n\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.answerType)\n        })\n    }\n\n    /**\n     * third select pops up only for range, to select the value types of range\n     * @param data \n     */\n\n    handleThirdSelectChange(data: any): void {\n        this.setState((prevState) => {\n            let newAnswerType = _.clone(prevState.answerType);\n            if (newAnswerType.ofType) {\n                newAnswerType.ofType.ofType = data.value;\n            }\n            return {\n                answerType: newAnswerType\n            }\n\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.answerType)\n        })\n\n    }\n\n    render() {\n        let shouldDisplaySecondSelect = this.state.answerType.name === ANSWER_TYPES.SELECT || this.state.answerType.name === ANSWER_TYPES.RANGE;\n        let shouldDisplayThirdSelect = this.state.answerType.ofType && this.state.answerType.ofType.name === ANSWER_TYPES.RANGE;\n\n        let optionsForSecondSelect = this.state.answerType.name === ANSWER_TYPES.SELECT ? OptionsForSelect : this.state.answerType.name === ANSWER_TYPES.RANGE ? OptionsForRange : []\n        let OptionsForThirdSelect = this.state.answerType.ofType && this.state.answerType.ofType.name === ANSWER_TYPES.RANGE ? OptionsForRange : []\n        return (\n            <Row>\n                <Col>\n                    <label>Value Type</label>\n                    <Select onChange={this.handleAnswerTypeChange.bind(this)} styles={customStyles}\n                        options={ValueSelectOptions}\n                        value={ValueSelectOptions.find((item: QAAnswerTypeOption) => item.value === this.state.answerType.name)}\n                    />\n                </Col>\n                {shouldDisplaySecondSelect && <Col>\n                    <label>of type</label>\n                    <Select onChange={this.handleSecondSelectChange.bind(this)} styles={customStyles}\n                        options={optionsForSecondSelect}\n                        value={optionsForSecondSelect.find(item => this.state.answerType.ofType && item.value === this.state.answerType.ofType.name)}\n                    />\n\n                </Col>}\n                {shouldDisplayThirdSelect && <Col>\n                    <label>of type</label>\n                    <Select onChange={this.handleThirdSelectChange.bind(this)} styles={customStyles}\n                        options={OptionsForThirdSelect}\n                        value={OptionsForThirdSelect.find(item => this.state.answerType.ofType && this.state.answerType.ofType.ofType && item.value === this.state.answerType.ofType.ofType.name)}\n                    />\n\n                </Col>\n                }\n            </Row>\n\n        )\n    }\n\n}\n\n\n","import { AnswerOptions, Constants, QAQuestion, IValueType, ILiteral, QACondition, IOption, IOptionGroup, IConstant, getRandomId, ANSWER_TYPES } from \"dpform\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { CreateConditionModal } from \"./CreateConditionModal\";\nimport { Table } from \"reactstrap\";\nimport { H5, Divider, Button, ButtonGroup } from \"@blueprintjs/core\";\nimport Select from \"react-select/\";\nimport { customStyles } from \"./DPFormItem\";\nimport { AnswerTypeInput } from \"./AnswerType\";\nimport { ValInput } from \"./ValInput\";\nimport Creatable from \"react-select/creatable\"\nimport { openModal, destroyModal } from \"../utils\"\n\ninterface QAAddOptionsState {\n    options: AnswerOptions,\n}\ninterface QAAddOptionsProps {\n    constants: Constants,\n    definedQuestions: { [key: string]: QAQuestion }\n    options: AnswerOptions,\n    defaultOptionType: IValueType,\n    onChange: (options: AnswerOptions) => void,\n}\nenum OPTION_OR_GROUP {\n    OPTION = 1,\n    GROUP = 2\n}\nexport class QAAddOptions extends React.Component<QAAddOptionsProps, QAAddOptionsState>{\n    constantNameInputRef: HTMLInputElement | null = null;\n    makeFromTextInputRef: HTMLTextAreaElement | null = null;\n    constructor(props: QAAddOptionsProps) {\n        super(props);\n        this.state = {\n            options: this.props.options || []\n        }\n    }\n    makeConstant() {\n        let name = 'const';\n        if (this.constantNameInputRef) {\n            name = this.constantNameInputRef.value;\n        }\n        this.props.constants.addConstant({\n            id: getRandomId('const-'),\n            name: name,\n            type: { name: ANSWER_TYPES.SELECT, ofType: { name: ANSWER_TYPES.STRING } },\n            value: AnswerOptions.fromJSON(AnswerOptions.toJSON((this.state.options)))\n        });\n    }\n    makeOptionsFromText() {\n        if (this.makeFromTextInputRef) {\n            let text = this.makeFromTextInputRef.value;\n            let optionsText = text.split(\"\\n\");\n            this.setState(prevState => {\n                let options = _.clone(prevState.options);\n                optionsText.forEach(item=>{\n                    options.addOption({\n                        id: \"opt-\" + Object.keys(options.optionsMap).length,\n                        appearingCondition: undefined,\n                        groupName: undefined,\n                        type: this.props.defaultOptionType.ofType,\n                        value: item,\n                    })\n                })\n                \n                return {\n                    options: options\n                }\n            })\n\n        }\n    }\n    handleChange() {\n        if (this.props.onChange) this.props.onChange(this.state.options);\n    }\n    handleAddNewOption() {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            let newOption: IOption = {\n                id: \"opt-\" + Object.keys(prevState.options.optionsMap).length,\n                appearingCondition: undefined,\n                groupName: undefined,\n                type: this.props.defaultOptionType.ofType,\n                value: undefined\n            }\n            cloned.addOption(newOption);\n            return {\n                options: cloned\n            }\n        }, this.handleChange.bind(this))\n    }\n    handleGroupNameChange(oldname: string, newname: string) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.changeGroupName(oldname, newname);\n            return {\n                options: cloned\n            }\n        }, this.handleChange.bind(this))\n    }\n    handleGroupDelete(name: string) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.deleteGroup(name);\n            return {\n                options: cloned\n            }\n        }, this.handleChange.bind(this))\n    }\n    handleOptionTypeChange(id: string, newType: IValueType) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.setOptionTypeFor(id, newType);\n            return {\n                options: cloned\n            }\n        }, this.handleChange.bind(this))\n    }\n\n    handleGroupAssignment(ids: string[], groupname: string) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.assignOptionToGroup(ids, groupname)\n            return {\n                options: cloned\n            }\n        }, this.handleChange.bind(this));\n    }\n\n    handleGroupUnassignment(ids: string[]) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.unassignGroup(ids)\n            return {\n                options: cloned\n            }\n        }, this.handleChange.bind(this));\n    }\n\n    handleOptionDelete(id: string) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.deleteOption(id);\n            return {\n                options: cloned\n            }\n        }, this.handleChange.bind(this));\n    }\n    handleOptionValueChange(id: string, newValue: string) {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.setValueForOption(id, newValue);\n            return {\n                options: cloned\n            }\n        }, this.handleChange.bind(this));\n    }\n    handleAddGroup() {\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            cloned.addGroup();\n            return {\n                options: cloned\n            }\n        }, this.handleChange.bind(this));\n    }\n    handleConditionClick(type: OPTION_OR_GROUP, name: string) {\n        // openModal()\n        let condition;\n        if (type === OPTION_OR_GROUP.GROUP) {\n            condition = this.state.options.optionGroupMap[name].appearingCondition;\n        }\n        else {\n            condition = this.state.options.optionsMap[name].appearingCondition;\n        }\n        let el = <CreateConditionModal\n            definedQuestions={this.props.definedQuestions}\n            isOpen={true}\n            onSubmit={this.setCondition.bind(this, name, type)}\n            onCancel={destroyModal.bind(this)}\n            condition={condition} />\n        openModal(el);\n    }\n\n    setCondition(idOrname: string, type: OPTION_OR_GROUP, literals: ILiteral[]) {\n\n        this.setState((prevState: QAAddOptionsState) => {\n            let cloned = _.clone(prevState.options);\n            if (type === OPTION_OR_GROUP.GROUP) {\n\n                let group = cloned.optionGroupMap[idOrname];\n                if (!group.appearingCondition) {\n                    group.appearingCondition = new QACondition()\n                }\n                group.appearingCondition.setLiterals(literals)\n            }\n            else if (type === OPTION_OR_GROUP.OPTION) {\n                let option = cloned.optionsMap[idOrname];\n                if (!option.appearingCondition) option.appearingCondition = new QACondition();\n                option.appearingCondition.setLiterals(literals)\n            }\n            return {\n                options: cloned\n            }\n        }, () => {\n            destroyModal();\n            this.handleChange();\n        });\n\n    }\n    handleImportFromConstant(a: any) {\n        let constant = this.props.constants.getConstant(a.value);\n        console.log(a);\n        console.log(constant);\n        if (constant && constant.value instanceof AnswerOptions) {\n            this.setState({\n                options: AnswerOptions.fromJSON(AnswerOptions.toJSON(constant.value))\n            }, this.handleChange.bind(this))\n        }\n    }\n\n    render() {\n        let constantsOptions = this.props.constants.ConstantsArray.map((item: IConstant) => ({ label: item.name, value: item.id }));\n        return (\n            <ButtonGroup fill={true} vertical={true}>\n                <H5>Import From Constant </H5>\n\n                <Select styles={customStyles} options={constantsOptions} onChange={this.handleImportFromConstant.bind(this)}></Select>\n                <Divider />\n                <H5>Export To Constant</H5>\n                <input type=\"text\" ref={r => this.constantNameInputRef = r} /><Button onClick={this.makeConstant.bind(this)}>Export</Button>\n                <Divider />\n                <H5>Make From Text</H5>\n                <textarea ref={r => this.makeFromTextInputRef = r}></textarea>\n                <Button onClick={this.makeOptionsFromText.bind(this)}>Make From Text</Button>\n                <QAOptionSection\n                    defaultType={this.props.defaultOptionType}\n                    groups={this.state.options.optionGroupMap ? Object.values(this.state.options.optionGroupMap) : []}\n                    handleGroupAssignment={this.handleGroupAssignment.bind(this)}\n                    handleOptionTypeChange={this.handleOptionTypeChange.bind(this)}\n                    handleAddNewOption={this.handleAddNewOption.bind(this)}\n                    handleOptionDelete={this.handleOptionDelete.bind(this)}\n                    handleConditionClick={this.handleConditionClick.bind(this, OPTION_OR_GROUP.OPTION)}\n                    handleOptionValueChange={this.handleOptionValueChange.bind(this)}\n                    options={this.state.options.optionsMap ? Object.values(this.state.options.optionsMap) : []}\n                />\n\n                <Divider />\n                <QAAddGroupSection\n                    handleAddGroup={this.handleAddGroup.bind(this)}\n                    handleGroupUnassignment={this.handleGroupUnassignment.bind(this)}\n                    handleGroupAssignment={this.handleGroupAssignment.bind(this)}\n                    handleGroupNameChange={this.handleGroupNameChange.bind(this)}\n                    handleGroupDelete={this.handleGroupDelete.bind(this)}\n                    handleGroupConditionClick={this.handleConditionClick.bind(this, OPTION_OR_GROUP.GROUP)}\n                    options={this.state.options.optionsMap ? Object.values(this.state.options.optionsMap) : []}\n                    groups={this.state.options.optionGroupMap ? Object.values(this.state.options.optionGroupMap) : []}\n                />\n\n            </ButtonGroup>\n        )\n    }\n}\n\ninterface QAAoptionSectionProps {\n    defaultType: IValueType,\n    options: IOption[],\n    groups: IOptionGroup[],\n    handleAddNewOption?: () => void,\n    handleOptionTypeChange?: (id: string, newType: IValueType) => void\n    handleGroupAssignment?: (ids: string[], groupname: string) => void,\n    handleOptionDelete?: (id: string) => void,\n    handleConditionClick?: (id: string) => void,\n    handleOptionValueChange?: (id: string, newVal: string) => void,\n}\ninterface QAAddOptionsSectionState {\n    options: IOption[]\n}\n\nexport class QAOptionSection extends React.Component<QAAoptionSectionProps, QAAddOptionsSectionState>{\n    static defaultProps = {\n        options: [],\n        groups: []\n    }\n    constructor(props: QAAoptionSectionProps) {\n        super(props);\n        this.state = {\n            options: this.props.options\n        }\n    }\n    shouldComponentUpdate(nextProps: QAAoptionSectionProps, nextState: QAAddOptionsSectionState) {\n        if (nextProps.options.length !== this.props.options.length || nextProps.groups.length !== this.props.groups.length) {\n            return true;\n        }\n        return false;\n    }\n\n    generateAddGroupInput(option: IOption) {\n        let creatableOptions = this.props.groups.map(item => ({ value: item.name, label: item.name }));\n        let value = creatableOptions.find(item => item.value === option.groupName);\n        return <Creatable value={value || null} styles={customStyles} options={creatableOptions} onChange={(e: any) => {\n            if (this.props.handleGroupAssignment) this.props.handleGroupAssignment([option.id], e.value);\n        }} />\n    }\n\n    handleAddNewOption() {\n        if (this.props.handleAddNewOption) this.props.handleAddNewOption();\n\n    }\n\n    handleConditionEdit(id: string) {\n        if (this.props.handleConditionClick) this.props.handleConditionClick(id)\n    }\n\n    handleAddGroupInput(index: number) {\n\n    }\n    handleOptionDelete(id: string) {\n        if (this.props.handleOptionDelete) this.props.handleOptionDelete(id);\n    }\n\n    handleOptionTypeChange(option_id: string, newType: IValueType) {\n        if (this.props.handleOptionTypeChange) this.props.handleOptionTypeChange(option_id, newType)\n    }\n    handleOptionValueChange(id: string, newValue: any) {\n        if (this.props.handleOptionValueChange) this.props.handleOptionValueChange(id, newValue.value);\n    }\n\n    render() {\n        return (\n            <Table>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Id</th>\n                        <th>Type</th>\n                        <th>Value</th>\n                        <th>Condition</th>\n                        <th>Group</th>\n                        <th></th>\n\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.options.map((item, i) => {\n                        return <tr key={item.id}>\n                            <td></td>\n                            <td>{item.id}</td>\n                            <td><AnswerTypeInput answerType={item.type} onChange={e => this.handleOptionTypeChange(item.id, e)} /></td>\n                            <td><ValInput onChange={this.handleOptionValueChange.bind(this, item.id)} defaultValue={item.value} type={item.type} /></td>\n                            <td><Button onClick={this.handleConditionEdit.bind(this, item.id)} style={{ color: 'red', width: 20 }} icon=\"key\" /></td>\n                            <td>{this.generateAddGroupInput(item)}</td>\n                            <td><Button style={{ width: 20 }} onClick={this.handleOptionDelete.bind(this, item.id)} icon=\"cross\" /></td>\n\n                        </tr>\n                    })}\n                    <tr>\n                        <td><Button style={{ width: 20 }} icon={\"add\"} onClick={this.handleAddNewOption.bind(this)}></Button></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                </tbody>\n            </Table>\n        )\n    }\n}\n\n\n\ninterface QAAoptionGroupSectionProps {\n    groups: IOptionGroup[],\n    options: IOption[],\n    handleGroupAssignment?: (id: string[], groupname: string) => void,\n    handleGroupUnassignment?: (id: string[]) => void,\n    handleGroupNameChange?: (oldname: string, newname: string) => void,\n    handleGroupDelete?: (name: string) => void,\n    handleGroupConditionClick?: (name: string) => void,\n    handleAddGroup?: () => void,\n\n}\ninterface QAAddOptionSectionState {\n\n}\nexport class QAAddGroupSection extends React.Component<QAAoptionGroupSectionProps, QAAddOptionSectionState>{\n    constructor(props: QAAoptionGroupSectionProps) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    handleGroupAssignment(e: { value: string, label: string }[], groupname: string) {\n        if (e) {\n            let ids = e.map(item => item.value)\n            console.log(ids);\n            if (this.props.handleGroupAssignment) this.props.handleGroupAssignment(ids, groupname)\n        }\n\n    }\n\n    render() {\n        return (\n\n            <Table>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>Group Name</th>\n                        <th>Group Items</th>\n                        <th>Appearing Condition</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.groups.map((item, index) => {\n                        let options = this.props.options.map(item => ({ value: item.id, label: item.id }));\n                        let memberids = item.members.map(item => item.id);\n                        let selected = options.filter(item => memberids.includes(item.value))\n                        return <tr key={item.id}>\n                            <td></td>\n                            <td><input key={item.id} type=\"text\" className=\"form-control\" defaultValue={item.name} onChange={e => {\n                                if (this.props.handleGroupNameChange) this.props.handleGroupNameChange(item.name, e.target.value);\n                            }} /></td>\n                            <td><Select styles={customStyles}\n                                onChange={(e: any, action: any) => {\n                                    if (action.action === \"remove-value\") {\n                                        let removedid = action.removedValue.value;\n                                        if (this.props.handleGroupUnassignment) this.props.handleGroupUnassignment([removedid])\n                                    }\n                                    this.handleGroupAssignment(e, item.name)\n                                }}\n                                value={selected}\n\n                                isMulti={true} options={options} /></td>\n                            <td><Button style={{ width: 20 }} icon=\"key\" onClick={() => {\n                                if (this.props.handleGroupConditionClick) this.props.handleGroupConditionClick(item.name)\n                            }} /></td>\n                            <td><Button style={{ width: 20 }} icon=\"cross\" onClick={() => {\n                                if (this.props.handleGroupDelete) this.props.handleGroupDelete(item.name)\n                            }} /></td>\n\n                        </tr>\n\n\n\n                    })}\n                    <tr>\n                        <td><Button style={{ width: 20 }} icon=\"add\" onClick={() => {\n                            if (this.props.handleAddGroup) this.props.handleAddGroup()\n                        }} /></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n\n                    </tr>\n                </tbody>\n            </Table>\n        )\n    }\n}\n\n","import React from \"react\";\nimport { Form } from 'formik';\nimport { faKey } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as _ from \"lodash\";\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    FormGroup,\n} from \"reactstrap\";\nimport Modal from \"react-modal\";\nimport { openModal, destroyModal } from \"../utils\"\nimport { AutofillCondition } from \"./AutofillCondition\";\nimport { CreateConditionModal } from \"./CreateConditionModal\";\nimport { Switch } from \"@blueprintjs/core\";\nimport {\n    IValueType,\n    QAComparisonOperator,\n    ANSWER_TYPES,\n    Constants,\n    QAQuestion,\n    ILiteral,\n    QACondition,\n    QAType,\n    AnswerOptions,\n    IAutoAnswer,\n    AnswerType\n} from \"dpform\";\nimport { AnswerTypeInput } from \"./AnswerType\";\nimport { QAAddOptions } from \"./AddOptions\";\nlet root: HTMLElement = document.getElementById(\"root\") || document.body;\nModal.setAppElement(root);\n\nexport function getOperatorForType(valueType?: IValueType) {\n    let allOperators = Object.values(QAComparisonOperator);\n    let type = valueType && valueType.name;\n\n    switch (type) {\n        case ANSWER_TYPES.BOOLEAN:\n        case ANSWER_TYPES.DATE:\n        case ANSWER_TYPES.STRING:\n        case ANSWER_TYPES.TIME:\n\n\n            return allOperators.filter(item => item === QAComparisonOperator.Equal);\n        case ANSWER_TYPES.NUMBER:\n        default:\n            return allOperators;\n    }\n}\n\nexport const customStyles = {\n    container: (base: any, state: any) => ({\n        ...base,\n        border: state.isFocused ? null : null,\n        background: \"transparent\",\n        transition:\n            \"border-color 0.2s ease, box-shadow 0.2s ease, padding 0.2s ease\",\n        \"&:hover\": {\n            boxShadow: \"0 2px 4px 0 rgba(41, 56, 78, 0.1)\",\n        }\n    }),\n\n    control: (base: any, state: any) => ({\n        ...base,\n        background: \"transparent\",\n        borderColor: state.isFocused ? brandColor : base.borderColor,\n        '&:hover': {\n            borderColor: state.isFocused\n                ? brandColor\n                : base.borderColor\n        }\n    }),\n    valueContainer: (base: any, state: any) => ({\n        ...base,\n        background: \"transparent\",\n        color: \"white\"\n    }),\n\n    menu: (base: any, state: any) => ({\n        ...base,\n        background: \"black\",\n        borderColor: \"#e14eca\",\n        zIndex: \"999999999999999999 !important\"\n\n    }),\n    menuList: (base: any, state: any) => {\n        console.log(state)\n        return {\n            ...base,\n            background: \"#525f7f\",\n            color: \"white\",\n\n        }\n    },\n    singleValue: (base: any, state: any) => ({\n        ...base,\n        color: \"white\"\n    }),\n\n    input: (base: any, state: any) => ({\n        ...base,\n        color: \"white\"\n    }),\n    option: (base: any, state: any) => ({\n        ...base,\n        background: state.isSelected ? \"lightblue\" : state.isFocused ? \"hotpink\" : \"#525f7f\"\n    }),\n};\n\nconst brandColor = '#46beed';\n\n\ninterface FormItemProps {\n    constants: Constants,\n    definedQuestions: { [key: string]: QAQuestion }\n    question: QAQuestion,\n    onChange: (question: QAQuestion) => void\n}\ninterface FormItemState {\n    question: QAQuestion\n}\n\nexport class DPFormItem extends React.Component<FormItemProps, FormItemState>{\n    static defaultProps = {\n        question: new QAQuestion()\n    }\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            question: this.props.question\n        }\n    }\n    // shouldComponentUpdate(nextProps: FormItemProps, nextState: FormItemState) {\n    //     // return false;\n    // }\n    handleChange() {\n        if (this.props.onChange) this.props.onChange(this.state.question)\n    }\n    \n    handleRequiredChange(e: any) {\n        this.setState((prevState: FormItemState) => {\n            let question = _.clone(prevState.question);\n            question.setIsRequired(!question.isRequired);\n            return {\n                question: question\n            }\n        }, this.handleChange.bind(this))\n    }\n    openAppearingConditionModal() {\n        let el = <CreateConditionModal\n            definedQuestions={this.props.definedQuestions}\n            isOpen={true}\n            onSubmit={this.editAppearingCondition.bind(this)}\n            onCancel={destroyModal.bind(this)}\n            condition={this.state.question.appearingCondition} />\n        openModal(el);\n    }\n\n    editAppearingCondition(newLiterals: ILiteral[]) {\n        this.setState((prevState: any) => {\n            let question: QAQuestion = _.clone(prevState.question)\n            if (!question.appearingCondition) question.setAppearingCondition(new QACondition())\n            question.appearingCondition.setLiterals(newLiterals);\n            console.log(QACondition.toJSON(question.appearingCondition));\n            return {\n                question: question\n            }\n        }, () => {\n            destroyModal();\n            this.handleChange();\n        })\n    }\n    handleQuestionChange(e: string) {\n        this.setState((prevState: FormItemState) => {\n            let question = _.clone(prevState.question);\n            question.setQuestionContent({ type: QAType.String, content: e });\n            return {\n                question: question\n            }\n        }, this.handleChange.bind(this))\n    }\n    handleAnswerTypeChange(type: IValueType) {\n        this.setState((prevState: FormItemState) => {\n            let question = _.clone(prevState.question);\n            question.setAnswerType(type);\n            return {\n                question: question\n            }\n        }, this.handleChange.bind(this))\n    }\n    handleOptionsChange(options: AnswerOptions) {\n        this.setState((prevState: FormItemState) => {\n            let question = _.clone(prevState.question);\n            question.setOptions(options);\n            return {\n                question: question\n            }\n        }, this.handleChange.bind(this))\n    }\n    handleAutoFillChange(autoanswer: IAutoAnswer) {\n        this.setState((prevState: any) => {\n            let cloned: QAQuestion = _.clone(prevState.question);\n            cloned.setAutoAnswer(autoanswer)\n            return {\n                question: cloned\n            }\n        }, this.handleChange.bind(this))\n    }\n\n    handleCustomIdChange(newId: string) {\n        this.setState((prevState: any) => {\n            let cloned: QAQuestion = _.clone(prevState.question);\n            cloned.customId = newId;\n            return {\n                question: cloned\n            }\n        }, this.handleChange.bind(this))\n    }\n\n    render() {\n        return (\n\n            <Form>\n                <div>\n                    <Card>\n                        <CardHeader>\n                            <h5 className=\"title\">Add Question</h5>\n                        </CardHeader>\n                        <CardBody>\n                            <FormGroup>\n                                <label htmlFor=\"customid\">Custom ID</label>\n                                <input defaultValue={this.state.question.customId} className=\"form-control\" onChange={e => this.handleCustomIdChange(e.target.value)} id=\"custom_id\" name=\"custom_id\" placeholder=\"Custom id\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <label htmlFor=\"question\">Question</label>\n                                <textarea defaultValue={this.state.question.questionContent.content} className=\"form-control\" onChange={e => this.handleQuestionChange(e.target.value)} id=\"question\" name=\"question\" placeholder=\"\" />\n                            </FormGroup>\n\n\n                            <FormGroup>\n                                <Switch defaultChecked={this.state.question.isRequired} label=\"Required\" onChange={this.handleRequiredChange.bind(this)} />\n                            </FormGroup>\n                            <FormGroup>\n                                <AnswerTypeInput answerType={this.state.question.answerType} onChange={this.handleAnswerTypeChange.bind(this)} />\n                            </FormGroup>\n\n                            {this.state.question.answerType && this.state.question.answerType.name === ANSWER_TYPES.SELECT && this.state.question.answerType.ofType && <FormGroup >\n                                <label >Add Options</label>\n                                <Card>\n                                    <QAAddOptions\n                                        constants={this.props.constants}\n                                        definedQuestions={this.props.definedQuestions}\n                                        onChange={this.handleOptionsChange.bind(this)}\n                                        defaultOptionType={this.state.question.answerType}\n                                        options={this.state.question.options} />\n                                </Card>\n                            </FormGroup>}\n\n                            <FormGroup>\n                                <label htmlFor=\"type\">Appearing Condition</label>\n                                <div>\n                                    <Button type=\"button\" onClick={this.openAppearingConditionModal.bind(this)}\n                                        size=\"sm\">\n                                        <FontAwesomeIcon size={\"sm\"} icon={faKey} /></Button>\n\n                                </div>\n\n                            </FormGroup>\n\n                            <FormGroup>\n                                <FormGroup>\n                                    <label htmlFor=\"type\">Add Autofill Conditions</label>\n\n                                    <AutofillCondition\n                                        autoAnswer={this.state.question.autoAnswer}\n                                        definedQuestions={this.props.definedQuestions}\n                                        onChange={this.handleAutoFillChange.bind(this)}\n                                        answerType={this.state.question.answerType}\n                                        options={this.state.question.options} />\n\n                                </FormGroup>\n                            </FormGroup>\n\n\n                        </CardBody>\n\n                    </Card>\n                </div>\n            </Form>)\n\n\n\n\n\n    }\n}\n\nexport interface ISelectOption {\n    value: string | keyof typeof AnswerType,\n    label: string\n}\n\n\n\n","import React from \"react\";\nimport { faPlusSquare, faWindowClose, faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Select from 'react-select';\nimport { Button, Table, Card, CardHeader, CardBody, Row } from \"reactstrap\";\nimport { ValueType } from \"react-select/src/types\";\nimport { getRandomId } from \"../utils/getRandomId\";\nimport { customStyles, ISelectOption, getOperatorForType } from \"./DPFormItem\";\nimport _ from \"lodash\";\nimport { ValInput } from \"./ValInput\";\nimport { ILiteral, QAQuestion, QACondition, QAComparisonOperator, IContent, QAType, QAFollowingOperator, IAnswerOption } from \"dpform\";\n\nenum TableFieldType {\n    QuestionRef = 1,\n    ComparisonOperator,\n    ComparisonValue,\n    FollowingOperator,\n}\n\n\ntype CreateConditionState = {\n    literals: ILiteral[]\n};\n\ntype CreateConditionProps = {\n    definedQuestions?: { [key: string]: QAQuestion }\n    onChange?: (data: ILiteral[]) => void\n    literals?: Array<ILiteral>\n    setLiteralsSetter?: Function\n    condition?: QACondition\n}\n\nexport class CreateCondition extends React.Component<CreateConditionProps, CreateConditionState> {\n    columns: {\n        dataField: string;\n        text: string;\n    }[];\n    static get defaultProps(): CreateConditionProps {\n        return {\n            onChange: () => { },\n        }\n    };\n    constructor(props: CreateConditionProps) {\n        super(props);\n        this.state = {\n            literals: this.props.condition ? this.props.condition.literals : [],\n        };\n        this.columns = [\n            {\n                dataField: \"id\",\n                text: \"Literal ID\"\n            },\n            {\n                dataField: \"questionRef\",\n                text: \"Question Reference\"\n            },\n            {\n                dataField: \"comparisonOperator\",\n                text: \"Comparison Operator\"\n            },\n            {\n                dataField: \"comparisonValue\",\n                text: \"Comparison Value\"\n            },\n            {\n                dataField: \"followingOperator\",\n                text: \"Following Operator\"\n            }\n        ];\n    }\n    componentDidMount() {\n        if (this.props.setLiteralsSetter) {\n            this.props.setLiteralsSetter(this.setLiterals.bind(this));\n        }\n    }\n    setLiterals(newLiterals: ILiteral[]) {\n        this.setState({\n            literals: newLiterals\n        });\n    }\n    addLiteral(literal?: ILiteral) {\n        if (!literal)\n            literal = { literalId: getRandomId(\"lit-\"), questionRef: undefined, comparisonOperator: undefined, comparisonValue: undefined, followingOperator: undefined };\n\n        this.setState((prevState: CreateConditionState) => {\n            let newLiterals = _.clone(prevState.literals);\n            if (literal) newLiterals.push(literal);\n            return { literals: newLiterals };\n        }, () => {\n            if (this.props.onChange) {\n\n                this.props.onChange(this.state.literals);\n            }\n        });\n    }\n    moveLiteralUp(index: number) {\n        this.setState((prevState: CreateConditionState) => {\n            let newLiterals = _.clone(prevState.literals);\n            const get_new_index = (i: number, length: number) => {\n                const mod = (x: number, n: number) => (x % n + n) % n;\n                return mod(i - 1, length);\n            };\n            let newIndex = get_new_index(index, newLiterals.length);\n            [newLiterals[index], newLiterals[newIndex]] = [newLiterals[newIndex], newLiterals[index]];\n            return {\n                literals: newLiterals\n            };\n        }, this.forceUpdate.bind(this));\n    }\n    handleDataChange(literalIndex: number, valueField: TableFieldType, newValue: any) {\n        this.setState((prevState: CreateConditionState) => {\n            let newLiterals: ILiteral[] = _.clone(prevState.literals);\n            let current = newLiterals[literalIndex];\n            switch (valueField) {\n                case TableFieldType.QuestionRef:\n                    current.questionRef = newValue && newValue.value ? newValue.value : undefined;\n                    break;\n                case TableFieldType.ComparisonOperator:\n                    let prop: keyof typeof QAComparisonOperator;\n                    let accessProp: keyof typeof QAComparisonOperator;\n                    for (prop in QAComparisonOperator) {\n                        if (QAComparisonOperator[prop] === newValue.value) {\n                            accessProp = prop;\n                            current.comparisonOperator = QAComparisonOperator[accessProp];\n                            break;\n                        }\n                    }\n                    break;\n                case TableFieldType.ComparisonValue:\n                    let newComparisonValue: IContent = { content: newValue.value, type: QAType.String };\n                    current.comparisonValue = newComparisonValue;\n                    break;\n                case TableFieldType.FollowingOperator:\n                    current.followingOperator = (newValue.value === QAFollowingOperator.AND) ? QAFollowingOperator.AND : QAFollowingOperator.OR;\n                    break;\n                default:\n                    break;\n            }\n            return {\n                literals: newLiterals\n            };\n        }, () => {\n            if (this.props.onChange)\n                this.props.onChange(this.state.literals);\n        });\n    }\n    getQuestion(questionRef?: string) {\n        if (questionRef && this.props.definedQuestions && !_.isEmpty(this.props.definedQuestions)) {\n            let v = this.props.definedQuestions[questionRef];\n            return v;\n        }\n        return null;\n    }\n    removeLiteral(index: number) {\n        this.setState((prevState: CreateConditionState) => {\n            let newLiterals = _.clone(prevState.literals);\n            newLiterals.splice(index, 1);\n            return {\n                literals: newLiterals\n            };\n        }, () => {\n            if (this.props.onChange) {\n                this.props.onChange(this.state.literals);\n            }\n        });\n    }\n    render() {\n        return (<Card>\n            <CardHeader>{`${this.props.condition ? \"Edit\" : \"Add\"} Condtion`}</CardHeader>\n            <CardBody>\n                <Row>\n                    <Table>\n                        <thead>\n                            <tr>\n                                <th key=\"th-first\">{``}</th>\n                                {this.columns.map((item, key) => {\n                                    return <th key={key}>{item.text}</th>;\n                                })}\n                                <th key=\"th-last\">{``}</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.literals.map((item: ILiteral, key: number) => {\n                                let questions_ = this.props.definedQuestions ? Object.values(this.props.definedQuestions).map((item: QAQuestion) => ({ value: item.id, label: item.questionContent.content })) : [];\n                                let questionselect = <Select key={`literalq-${key}-${item.literalId}`} styles={customStyles} options={questions_} value={questions_.find((r: { value: string, label: string }) => r.value === item.questionRef)} onChange={(selecteOption: ValueType<IAnswerOption>) => this.handleDataChange(key, TableFieldType.QuestionRef, selecteOption)} />;\n                                let selectedQuestionType = item.questionRef && this.props.definedQuestions && this.props.definedQuestions[item.questionRef] ? this.props.definedQuestions[item.questionRef].answerType : undefined;\n                                let comparisionOPOptions_: ISelectOption[] = getOperatorForType(selectedQuestionType).map((val, index) => ({ value: val, label: val }));\n                                let comparisonOpSelect = <Select key={`literalo-${key}-${item.literalId}`} styles={customStyles} options={comparisionOPOptions_} value={comparisionOPOptions_.find((op, index) => op.value === item.comparisonOperator)} onChange={this.handleDataChange.bind(this, key, TableFieldType.ComparisonOperator)} />;\n                                let question_: QAQuestion | null = this.getQuestion(item.questionRef);\n                                let qAnswerType = question_ ? question_.answerType : undefined;\n                                let qOptions = question_ && question_.options ? question_.options : undefined;\n                                let comparisonValueSelect = <ValInput options={qOptions} key={`literalv-${key}-${item.literalId}`} onChange={this.handleDataChange.bind(this, key, TableFieldType.ComparisonValue)} defaultValue={item.comparisonValue && item.comparisonValue.content} type={qAnswerType} />;\n                                let followingOperatorOptions_: ISelectOption[] = Object.keys(QAFollowingOperator).map((key) => ({ label: key, value: key === \"AND\" ? QAFollowingOperator.AND : key === \"OR\" ? QAFollowingOperator.OR : \"\" }));\n                                let followingOperatorSelect = <Select key={`literalfo-${key}-${item.literalId}`} styles={customStyles} options={followingOperatorOptions_} value={followingOperatorOptions_.find(r => r.value === item.followingOperator)} onChange={this.handleDataChange.bind(this, key, TableFieldType.FollowingOperator)} />;\n                                return <tr key={\"tr_\" + key}>\n                                    <td><Button type=\"button\" size=\"sm\" onClick={() => this.moveLiteralUp(key)}><FontAwesomeIcon icon={faArrowUp} /></Button></td>\n                                    <td>l<sub>{key}</sub></td>\n                                    <td className=\"questionRef\">{questionselect}</td>\n                                    <td className=\"comparisonOperator\">{comparisonOpSelect}</td>\n                                    <td className=\"comparisonValue\">{comparisonValueSelect}</td>\n                                    <td className=\"followingOperator\">{followingOperatorSelect}</td>\n                                    <td><Button size=\"sm\" onClick={() => { this.removeLiteral(key); }}> <FontAwesomeIcon icon={faWindowClose} /></Button></td>\n                                </tr>;\n                            })}\n                            <tr>\n                                <td><Button size=\"sm\" onClick={() => this.addLiteral()} type=\"button\">\n                                    <FontAwesomeIcon icon={faPlusSquare} />\n                                </Button></td>\n                                <td></td>\n                                <td></td>\n                                <td></td>\n                                <td></td>\n                                <td></td>\n                                <td></td>\n\n                            </tr>\n\n                        </tbody>\n                    </Table>\n                </Row>\n\n            </CardBody>\n        </Card>);\n    }\n}\n","import React from \"react\";\nimport { Button, Row, ModalFooter, ModalBody } from \"reactstrap\";\nimport Modal from \"react-modal\";\nimport { CreateCondition } from \"./CreateCondition\";\nimport { ILiteral, QAQuestion, QACondition } from \"dpform\";\n\n\n\ninterface CreateConditionModalState {\n    isOpen: boolean,\n    literals: ILiteral[],\n    errors: { message: string }[]\n}\n\ninterface CreateConditionModalProp {\n    isOpen: boolean\n    definedQuestions: {[key:string]: QAQuestion}\n    onSubmit?: (data: ILiteral[]) => void;\n    onCancel?: (data: ILiteral[]) => void;\n    condition?: QACondition\n}\n\n\nexport class CreateConditionModal extends React.Component<CreateConditionModalProp, CreateConditionModalState> {\n    createCondition_: React.RefObject<CreateCondition>;\n    static defaultProps = {\n        isOpen: false,\n        condition: new QACondition()\n    };\n\n    constructor(props: CreateConditionModalProp) {\n        super(props);\n        this.state = {\n            isOpen: this.props.isOpen,\n            literals: this.props.condition && this.props.condition.literals ? this.props.condition.literals : [],\n            errors: []\n        };\n        this.createCondition_ = React.createRef();\n    }\n    handleChange = (data: ILiteral[]) => {\n        this.setState({\n            errors: [],\n            literals: data\n        });\n    };\n    primaryButtonHandler = () => {\n        let newCondition = new QACondition().setLiterals(this.state.literals);\n        let isValid = QACondition.checkIfValid(newCondition);\n        if (!isValid) {\n            this.setState({\n                errors: [{ message: \"Condition is not valid!\" }]\n            });\n            return;\n        }\n        if (this.props.onSubmit) {\n            this.props.onSubmit(this.state.literals);\n        }\n    };\n    secondaryButtonHandler = () => {\n        if (this.props.onCancel) {\n            this.props.onCancel(this.state.literals);\n        }\n    };\n    render() {\n        const customStyles = {\n            content: {\n                top: '50%',\n                left: '50%',\n                right: 'auto',\n                bottom: 'auto',\n                marginRight: '-50%',\n                transform: 'translate(-50%, -50%)',\n                minHeight: \"400px\",\n                backgroundColor: \"#27293d\"\n            },\n            overlay: {\n                backgroundColor: \"rgba(0, 0, 0, 0.50)\"\n            }\n        };\n        return (<Modal style={customStyles} isOpen={this.props.isOpen}>\n            <ModalBody>\n\n                {this.props.isOpen && <CreateCondition definedQuestions = {this.props.definedQuestions} condition={this.props.condition ? this.props.condition : undefined} ref={this.createCondition_} onChange={(data) => this.handleChange(data)} />}\n                <Row>\n                    <div className=\"btn-danger\">{this.state.errors.map((item: { message: string }) => item.message)}</div>\n                </Row>\n            </ModalBody>\n\n            <ModalFooter>\n                <Button color=\"primary\" onClick={this.primaryButtonHandler}>Submit</Button>\n                <Button color=\"secondary\" onClick={this.secondaryButtonHandler}>Cancel</Button>\n            </ModalFooter>\n        </Modal>);\n    }\n}\n","import React from \"react\";\nimport { ButtonGroup, Button, Switch, Classes, Divider } from \"@blueprintjs/core\";\nimport Select from \"react-select\";\nimport { customStyles } from \"./DPFormItem\";\nimport _ from \"lodash\";\nimport classNames from \"classnames\";\nimport { IDupeSettings, QAQuestion, DuplicateTimesType } from \"dpform\";\n\ninterface DuplicateSettingsProps extends IDupeSettings {\n    definedQuestions: { [key: string]: QAQuestion }\n    handleSave: (dupe: IDupeSettings) => void,\n    handleCancel: () => void\n\n}\ninterface DuplicateSettingsState extends IDupeSettings {\n\n}\n\nexport class DuplicateSettings extends React.Component<DuplicateSettingsProps, DuplicateSettingsState>{\n    constructor(props: DuplicateSettingsProps) {\n        super(props);\n        this.state = {\n            isEnabled: this.props.isEnabled,\n            condition: this.props.condition,\n            duplicateTimes: this.props.duplicateTimes\n        }\n    }\n\n    private handleQuestionRefChange(newValue: any) {\n        this.setState({\n            duplicateTimes: { value: newValue.value, type: \"questionRef\" }\n        })\n    }\n    private handleNumberTimesChange(newValue: string) {\n        this.setState({\n            duplicateTimes: { value: newValue, type: \"number\" }\n        })\n    }\n    private handleTypeChange(newType: any) {\n        this.setState((prevState: DuplicateSettingsState) => {\n            return {\n                duplicateTimes: { value: \"\", type: newType.value }\n            }\n        })\n    }\n    private handleEnabledChange() {\n        this.setState((prevState: DuplicateSettingsState) => {\n            return {\n                isEnabled: !prevState.isEnabled\n            }\n        })\n    }\n    private generateValueComponent(type?: string) {\n        if (type === \"questionRef\") {\n            let options = Object.values(this.props.definedQuestions).map(item => ({ value: item.id, label: item.questionContent.content }));\n            let selected = this.state.duplicateTimes.type === \"questionRef\" ? options.find(item => item.value === this.state.duplicateTimes.value) : undefined;\n            return <Select styles={customStyles} options={options} defaultValue={selected} onChange={this.handleQuestionRefChange.bind(this)} />\n        }\n        return <input\n            defaultValue={this.state.duplicateTimes.type === \"number\" ? this.state.duplicateTimes.value : \"\"}\n            type=\"number\" className=\"form-control\"\n            onChange={e => this.handleNumberTimesChange(e.target.value)} />\n    }\n    private handleSave() {\n        let isInvalid = _.values(this.state).every(_.isEmpty);\n        if (!isInvalid) {\n            this.props.handleSave({ isEnabled: this.state.isEnabled, condition: this.state.condition, duplicateTimes: this.state.duplicateTimes })\n        }\n    }\n\n    render() {\n        let typeOptions = [{ value: \"number\", label: \"Number\" }, { value: \"questionRef\" as DuplicateTimesType, label: \"AnswerValue\" as DuplicateTimesType }];\n        let defaultValue = typeOptions.find(item => item.value === this.state.duplicateTimes.type);\n\n        return (\n\n            <ButtonGroup className={classNames(Classes.ELEVATION_2, Classes.DARK)} vertical fill>\n                <Switch onChange={this.handleEnabledChange.bind(this)} defaultChecked={this.props.isEnabled}>Enabled</Switch>\n                <Divider />\n                <Select menuContainerStyle={{ zIndex: 99999 }}\n                    styles={customStyles}\n                    onChange={(e: any) => this.handleTypeChange(e)}\n                    options={typeOptions}\n                    defaultValue={defaultValue}></Select>\n                {this.generateValueComponent(this.state.duplicateTimes.type)}\n                <Divider />\n                <ButtonGroup fill>\n                    <Button onClick={this.handleSave.bind(this)}>\n                        Save\n                    </Button>\n                    <Button onClick={this.props.handleCancel}>\n                        Cancel\n                    </Button>\n                </ButtonGroup>\n            </ButtonGroup>\n\n\n        )\n    }\n}","import { ReactNode, useState } from \"react\";\n\nimport { Badge } from \"reactstrap\";\nimport React from \"react\";\nimport { Button, ButtonGroup, Collapse, Divider } from \"@blueprintjs/core\";\n\ninterface QuestionButtonProps {\n    questionId: string,\n    questionTitle: string,\n    isExpanded: boolean,\n    children: ReactNode,\n    path: number[],\n    readablePath: string,\n    handleDeletion: (id: string, path_: number[]) => void,\n    handleMoveUp: (id: string, path_: number[]) => void,\n}\n\nexport const QuestionButton = (props: QuestionButtonProps) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n    return (\n        <ButtonGroup className=\"bp3-dark\" style={{ paddingBottom: \"20px\" }} fill vertical>\n            <ButtonGroup>\n                <Button onClick={() => props.handleMoveUp(props.questionId, props.path)} style={{ height: 50, width: 20 }} icon={\"arrow-up\"} />\n\n                <Button style={{ height: 50 }} onClick={() => setIsExpanded(!isExpanded)} alignText={\"left\"} rightIcon={isExpanded ? \"chevron-up\" : \"chevron-down\"}><Badge color=\"secondary\">Q</Badge> <span>{props.readablePath} </span> <span> {props.questionTitle} </span></Button>\n                <Button onClick={() => props.handleDeletion(props.questionId, props.path)} style={{ height: 50, width: 20 }} alignText=\"left\" rightIcon={\"cross\"} />\n            </ButtonGroup>\n            <Collapse keepChildrenMounted={false} isOpen={isExpanded}>\n                {props.children}\n            </Collapse>\n        </ButtonGroup>\n    )\n}\n\n\n\n","import { Badge, Row } from \"reactstrap\";\n\nimport React, { ReactNode, useState } from \"react\";\nimport { ButtonGroup, Button, Collapse, EditableText, Card, Divider, H5, Navbar, Alignment, NavbarDivider } from \"@blueprintjs/core\";\n\ninterface SectionButtonProps {\n    sectionId: string;\n    onClick: (id: string, path: number[]) => void;\n    path: number[];\n    readablePath: string;\n    handleDeletion: (id: string, path: number[]) => void;\n    handleMoveUp: (id: string, path: number[]) => void;\n    children: ReactNode;\n    handleSectionNameChange: (v: string) => void;\n    handleOpenConditionSettings: () => void;\n    handleCustomIdChange: (v: string)=>void;\n    sectionName: string;\n    customId: string;\n\n}\nexport const SectionButton = (props: SectionButtonProps) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n\n    return (\n        <ButtonGroup className=\"bp3-dark\" style={{ paddingBottom: \"20px\" }} fill vertical>\n            <ButtonGroup>\n                <Button style={{ width: 20 }} icon=\"arrow-up\" onClick={() => props.handleMoveUp(props.sectionId, props.path)} />\n\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <H5>\n                            <span>{props.readablePath} </span>\n                            <EditableText onChange={props.handleSectionNameChange} placeholder=\"Section\" defaultValue={props.sectionName}> </EditableText>\n                        </H5>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <EditableText onChange={props.handleCustomIdChange} placeholder=\"Custom Id\" defaultValue={props.customId}> </EditableText>\n\n                        <Button icon=\"key\" onClick={() => props.handleOpenConditionSettings()}></Button>\n\n                        <Button onClick={() => setIsExpanded(!isExpanded)} icon=\"cog\"></Button>\n                        <Button icon=\"folder-open\" onClick={() => props.onClick(props.sectionId, props.path)}></Button>\n                    </Navbar.Group>\n                </Navbar>\n                <Button style={{ width: 20 }} icon=\"cross\" onClick={() => props.handleDeletion(props.sectionId, props.path)} />\n            </ButtonGroup>\n\n            <Collapse isOpen={isExpanded} keepChildrenMounted={false}>\n                {props.children}\n            </Collapse>\n\n        </ButtonGroup>\n    )\n}","import { ButtonGroup } from \"@blueprintjs/core\";\nimport { Constants, getReadablePath, IDupeSettings, ILiteral, QACondition, QAQuestion, QuestionSection, RootSection } from \"dpform\";\nimport React from \"react\";\nimport { destroyModal, openModal } from \"../utils\";\nimport { CreateConditionModal } from \"./CreateConditionModal\";\nimport { DPFormItem } from \"./DPFormItem\";\nimport { DuplicateSettings } from \"./duplicateSettings\";\nimport { QuestionButton } from \"./questionButton\";\nimport { SectionButton } from \"./sectionButton\";\n\ninterface SectionCProps {\n    constants: Constants;\n    section: QuestionSection | RootSection;\n    definedQuestions: { [key: string]: QAQuestion };\n    handleQuestionChange: (question: QAQuestion, _path: number[]) => void;\n    parentPath: number[];\n    handleDeleteChildSectionOrQuestion: (deleteid: string, _path: number[]) => void;\n    handleSectionDuplicatingSettingsChange: (id: string, dupe: IDupeSettings) => void;\n    handleSectionClick: (sectionid: string, _path: number[]) => void;\n    handleSectionNameChange: (id: string, v: string) => void;\n    handleMoveUp: (id: string, path: number[]) => void;\n    handleSectionConditionChange: (sectionId: string, literals: ILiteral[]) => void;\n    handleSectionCustomIdChange: (sectionId: string, customId: string) => void;\n}\ninterface SectionCState {\n}\nexport class SectionC extends React.Component<SectionCProps, SectionCState>{\n    constructor(props: SectionCProps) {\n        super(props);\n        this.state = {\n        }\n    }\n\n    handleQuestionChange(q: QAQuestion, path: number[]) {\n        if (this.props.handleQuestionChange) this.props.handleQuestionChange(q, path);\n    }\n    handleDuplicatingSettingsSave(id: string, dupe: IDupeSettings) {\n        if (this.props.handleSectionDuplicatingSettingsChange) this.props.handleSectionDuplicatingSettingsChange(id, dupe)\n    }\n    handleDuplicatingSettingsCancel() {\n\n    }\n    openConditionSettings(section: QuestionSection) {\n        const condition: QACondition = section.appearingCondition;\n\n        let el = <CreateConditionModal\n            definedQuestions={this.props.definedQuestions}\n            isOpen={true}\n            onSubmit={(l) => {\n                this.props.handleSectionConditionChange(section.id, l);\n                destroyModal();\n            }}\n            onCancel={destroyModal.bind(this)}\n            condition={condition} />\n        openModal(el);\n    }\n\n    render() {\n        let comp = null;\n        let readablePath = getReadablePath(this.props.parentPath);\n        if (readablePath) readablePath += \".\";\n        comp = this.props.section.content.map((item, index) => {\n            let childPath = this.props.parentPath.concat(index);\n            if (item instanceof QAQuestion) {\n                return <QuestionButton\n                    questionTitle={item.questionContent.content}\n                    handleMoveUp={this.props.handleMoveUp}\n                    path={childPath}\n                    questionId={item.id}\n                    handleDeletion={this.props.handleDeleteChildSectionOrQuestion}\n                    readablePath={readablePath + (index + 1)}\n                    key={item.id}\n                    isExpanded={false}>\n                    <DPFormItem\n                        constants={this.props.constants}\n                        definedQuestions={this.props.definedQuestions}\n                        onChange={(q) => this.handleQuestionChange(q, childPath)}\n                        question={item} />\n                </QuestionButton>\n            }\n            else if (item instanceof QuestionSection) {\n                return <SectionButton\n                    customId={item.customId}\n                    handleCustomIdChange={(v) => this.props.handleSectionCustomIdChange(item.id, v)}\n                    handleMoveUp={this.props.handleMoveUp}\n                    sectionName={item.name}\n                    handleSectionNameChange={(v) => this.props.handleSectionNameChange(item.id, v)}\n                    path={childPath}\n                    handleDeletion={this.props.handleDeleteChildSectionOrQuestion}\n                    sectionId={item.id} readablePath={readablePath + (index + 1)}\n                    handleOpenConditionSettings={() => this.openConditionSettings(item)}\n                    key={item.id} onClick={this.props.handleSectionClick}>\n                    <DuplicateSettings definedQuestions={this.props.definedQuestions} handleSave={(d) => this.handleDuplicatingSettingsSave(item.id, d)} handleCancel={this.handleDuplicatingSettingsCancel} {...item.duplicatingSettings} />\n                </SectionButton>\n            }\n            return null;\n        })\n        return (\n            <ButtonGroup fill vertical>\n                {comp}\n\n            </ButtonGroup>\n\n        )\n    }\n}\n\n\n\n\n\n","import { Navbar, Alignment, Button, IconName, EditableText } from \"@blueprintjs/core\";\nimport React, { ReactNode } from \"react\";\n\nconst toolbarItems = [\n\n    {\n        type: \"button\",\n        name: \"up-one-level\",\n        icon: \"arrow-up\",\n        text: \"\"\n    },\n    {\n        type: \"button\",\n        name: \"save-root\",\n        icon: \"floppy-disk\",\n        text: \"Save Form\"\n    },\n    {\n        type: \"button\",\n        name: \"add-section\",\n        icon: \"box\",\n        text: \"Add Section\"\n    },\n    {\n        type: \"button\",\n        name: \"add-question\",\n        icon: \"document\",\n        text: \"Add Question\"\n    },\n    {\n        type: \"button\",\n        name: \"copy-state\",\n        icon: \"clipboard\",\n        text: \"Copy State\"\n    },\n\n]\ninterface ToolbarProps {\n    handleItemClick: (tItem: string) => void,\n    children: ReactNode,\n}\ninterface ToolbarState {\n\n}\nexport class Toolbar extends React.Component<ToolbarProps, ToolbarState>{\n    constructor(props: ToolbarProps) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    handleClick(name: string) {\n        if (this.props.handleItemClick) this.props.handleItemClick(name)\n    }\n    render() {\n        return (\n            <Navbar className=\"bp3-dark\" fixedToTop>\n                <Navbar.Group align={Alignment.LEFT}>\n                    {this.props.children}\n                    {toolbarItems.map(item => <Button onClick={this.handleClick.bind(this, item.name)} key={item.name} icon={item.icon as IconName} text={item.text} className=\"bp3-minimal\" />)}\n                </Navbar.Group>\n            </Navbar>\n        )\n    }\n\n}","export const CONFIG = {\n    LOCAL_SERVER: \"http://localhost:5000/graphql\",\n    PROD_SERVER: \"http://142.93.151.160:5000/graphql\"\n}","\nimport { EditableText, Intent, IToastProps, ITreeNode, Toaster } from \"@blueprintjs/core\";\nimport copy from \"copy-to-clipboard\";\nimport { Constants, IDupeSettings, ILiteral, QAQuestion, QORS, QuestionSection, request, RootSection } from \"dpform\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport { Row } from \"reactstrap\";\nimport { ConstantDefinitions } from \"./constants\";\nimport { FormTree } from \"./formtree\";\nimport { SectionC } from \"./section\";\nimport { Toolbar } from \"./Toolbar\";\nimport { CONFIG } from \"../APPCONFIG\";\n\n\n\n\ninterface SurveyFormState {\n    activeSection: QuestionSection | RootSection,\n    activeSectionPath: number[]\n    selectedNodes: string[],\n    expandedNodes: string[],\n    root: RootSection,\n    constants: Constants,\n\n}\ninterface SurveyFormProps {\n    root: RootSection,\n    onChange: (root: RootSection) => void,\n    token: string,\n\n}\n\n\nexport class SurveyForm extends React.Component<SurveyFormProps, SurveyFormState>{\n\n    private toasterRef!: Toaster;\n\n    constructor(props: SurveyFormProps) {\n        super(props);\n        this.state = {\n            selectedNodes: [],\n            expandedNodes: [this.props.root.id],\n            root: this.props.root,\n            activeSection: this.props.root,\n            activeSectionPath: [0],\n            constants: new Constants(),\n        }\n    }\n    componentDidMount() {\n        this.loadForm();\n    }\n\n    loadForm() {\n        let requestBody = {\n            query: `\n            query GetForm($formId: [String]!){\n                forms(id: $formId){\n                  id\n                  name\n                  content\n                }\n              }`,\n            variables: {\n                formId: \"root-53c37497-3808-cfd8-c886-1361dbaab171\"\n            }\n        }\n        let token = this.props.token;\n        return request(CONFIG.PROD_SERVER, \"forms\", requestBody, \"Could not delete the game file\", token).then(file => {\n            file = file[0]\n            if (file) {\n                file.content = JSON.parse(file.content);\n                console.log(file.id);\n\n                let root: RootSection = RootSection.fromJSON(file);\n                let valbag: (QuestionSection | QAQuestion)[] = []\n                let iterated = this.getAllEntries([0, 1], 6, root, null, true, valbag);\n                console.log(iterated);\n                // let ir = this.Iterator2(root, [0], 0, QORS.QUESTION);\n                this.setState({\n                    root: root,\n                    activeSection: root,\n                    activeSectionPath: [0]\n                })\n            }\n        });\n    }\n\n    getAllEntries(startSectionPath: number[], startIndex: number, root: RootSection, fetchType: QORS | null, first: boolean = true, returnbag?: (QuestionSection | QAQuestion)[]) {\n        if (!returnbag) returnbag = [];\n        if (startSectionPath.length <= 0) return;\n        let section = RootSection.getFromPath(startSectionPath, [root]);\n        if (!section) return;\n        for (let i = startIndex; i < section.content.length; i++) {\n            let current = section.content[i];\n            if (current instanceof QAQuestion) {\n                if (fetchType === QORS.QUESTION || !fetchType) returnbag.push(current);\n\n            }\n            else if (current instanceof QuestionSection) {\n                if (fetchType === QORS.SECTION || !fetchType) returnbag.push(current);\n                this.getAllEntries(startSectionPath.concat(i), 0, root, fetchType, false, returnbag);\n            }\n        }\n        if (first) {\n            let cloned = startSectionPath.slice(0);\n            let index = cloned.pop();\n            if (typeof (index) === \"number\") {\n                this.getAllEntries(cloned, index, root, fetchType, true, returnbag);\n            }\n        }\n        return returnbag;\n    }\n\n    handleAddSection() {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            cloned.addSection(this.state.activeSectionPath);\n            return {\n                root: cloned\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.root);\n        })\n    }\n\n    handleAddQuestion() {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            cloned.addQuestion(this.state.activeSectionPath);\n            return {\n                root: cloned,\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.root);\n        })\n    }\n    handleDeleteQuestionOrSection(deleteid: string, path_: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let activeSection = prevState.activeSection;\n            let activeSectionPath = prevState.activeSectionPath;\n            let parent = path_.slice(0, path_.length - 1);\n            let cloned = _.clone(prevState.root);\n            let item = RootSection.getFromPath(path_, [this.state.root]);\n            if (item && deleteid !== item.id) throw new Error(\"cannot delete, id mismatch\");\n            if (item instanceof QAQuestion) {\n                cloned.removeQuestion(item.id, path_);\n            }\n            else if (item instanceof QuestionSection) {\n                cloned.removeSection(item.id, path_);\n                if (item.id === prevState.activeSection.id) {\n                    let parentSection = RootSection.getFromPath(parent, [this.state.root]);\n                    if (parentSection && !(parentSection instanceof QAQuestion)) {\n                        activeSection = parentSection;\n                        activeSectionPath = parent;\n                    }\n                }\n            }\n\n            return {\n                root: cloned,\n                activeSection: activeSection,\n                activeSectionPath: activeSectionPath\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.root);\n        })\n    }\n    private handleUpOneLevel() {\n\n        if (this.state.activeSectionPath.length > 1) {\n            let newSectionPath = this.state.activeSectionPath.slice(0, this.state.activeSectionPath.length - 1);\n            let newSection = RootSection.getFromPath(newSectionPath, [this.state.root]);\n            if (newSection && !(newSection instanceof QAQuestion)) {\n                this.setState((prevState: SurveyFormState) => {\n                    return {\n                        activeSection: !newSection ? prevState.activeSection : newSection instanceof QAQuestion ? prevState.activeSection : newSection,\n                        activeSectionPath: newSectionPath\n                    }\n\n                })\n            }\n        }\n    }\n    private handleSave() {\n        let file = RootSection.toJSON(this.state.root);\n        file.content = JSON.stringify(file.content);\n        if (!file.name) file.name = \"Main Form\";\n        let requestBody = {\n            query: `\n            mutation SaveForm($saveFile: FormFileInput!){\n                saveForm(form: $saveFile){\n                  id\n                }\n              }`,\n            variables: {\n                saveFile: file\n            }\n        }\n        let token = this.props.token;\n        return request(CONFIG.PROD_SERVER, \"saveForm\", requestBody, \"Could not save the  file\", token).then(re => console.log(re));\n    }\n\n\n    handleToolbarItemClick(name: string) {\n        switch (name) {\n            case \"add-section\":\n                this.handleAddSection()\n                break;\n            case \"add-question\":\n                this.handleAddQuestion();\n                break;\n            case \"up-one-level\":\n                this.handleUpOneLevel();\n                break;\n            case \"save-root\":\n                this.handleSave();\n                break;\n\n            case \"copy-state\":\n                let data = JSON.stringify(RootSection.toJSON(this.state.root));\n                copy(data);\n                let toast: IToastProps = {\n                    message: \"Copied state to clipboard\",\n                    icon: \"tick\",\n                    intent: Intent.SUCCESS,\n                }\n                this.toasterRef.show(toast)\n\n\n                break;\n        }\n    }\n\n    handleQuestionUpdate(question: QAQuestion, path: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            let parent = path.slice(0, path.length - 1);\n            let parentSection = RootSection.getFromPath(parent, [cloned]);\n            if (!(parentSection instanceof QAQuestion)) {\n                let q = this.state.root.questions[question.id];\n                q.updateFromQuestion(question);\n\n            }\n\n            return {\n                root: cloned\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.root);\n        })\n    }\n\n\n    handleFormTreeNodeExpand(nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) {\n        nodeData.isExpanded = true;\n        let item = RootSection.getFromPath(_nodePath, [this.state.root]);\n        if (item) {\n            this.setState((prevState: SurveyFormState) => {\n                let expandedNodes = item ? _.union([item.id], prevState.expandedNodes) : prevState.expandedNodes;\n                return {\n                    expandedNodes: expandedNodes\n                }\n            })\n        }\n    }\n\n    handleFormTreeNodeCollapse(nodeData: ITreeNode) {\n        this.setState((prevState: SurveyFormState) => {\n            let expandedNodes = prevState.expandedNodes.filter((item => nodeData.id !== item));\n            return {\n                expandedNodes: expandedNodes\n            }\n        })\n    }\n\n\n    handleFormTreeNodeClick(nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) {\n        let item = RootSection.getFromPath(_nodePath, [this.state.root]);\n        if (item && !(item instanceof QAQuestion)) {\n            this.setState((prevState: SurveyFormState) => {\n\n                let expandedNodes = item ? _.union([item.id], prevState.expandedNodes) : prevState.expandedNodes;\n                let selectedNodes = item ? [item.id] : prevState.selectedNodes;\n                return {\n                    selectedNodes: selectedNodes,\n                    expandedNodes: expandedNodes,\n                    activeSection: item && !(item instanceof QAQuestion) ? item : prevState.activeSection,\n                    activeSectionPath: _nodePath\n                }\n\n            })\n        }\n        else if (item) {\n            this.setState((prevState: SurveyFormState) => {\n                let parent = _nodePath.length > 1 ? _nodePath.slice(0, _nodePath.length - 1) : _nodePath;\n                let parentSection = RootSection.getFromPath(parent, [prevState.root]);\n                let selectedQuestion = RootSection.getFromPath(_nodePath, [prevState.root]);\n                let expandedNodes = prevState.expandedNodes;\n                let selectedNodes = selectedQuestion ? [selectedQuestion.id] : prevState.selectedNodes;\n                if (parentSection && !(parentSection instanceof QAQuestion)) {\n                    expandedNodes = _.union([parentSection.id], expandedNodes);\n                    selectedNodes.push(parentSection.id);\n                }\n\n                return {\n                    expandedNodes: expandedNodes,\n                    selectedNodes: selectedNodes,\n                    activeSection: parentSection && !(parentSection instanceof QAQuestion) ? parentSection : prevState.activeSection,\n                    activeSectionPath: parent\n                }\n\n\n            })\n        }\n    }\n    handleRootNameChange(newName: string) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            cloned.name = newName;\n            return {\n                root: cloned\n            }\n        }, () => {\n            if (this.props.onChange) this.props.onChange(this.state.root);\n        })\n    }\n\n    handleSectionChange(id: string, path: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let section = RootSection.getFromPath(path, [prevState.root]);\n            let expandedNodes = prevState.expandedNodes;\n            let selectedNodes = []\n            if (section && section instanceof QuestionSection) {\n                expandedNodes = _.union([section.id], expandedNodes);\n                selectedNodes.push(section.id);\n            }\n            return {\n                expandedNodes: expandedNodes,\n                selectedNodes: selectedNodes,\n                activeSection: section && !(section instanceof QAQuestion) ? section : prevState.activeSection,\n                activeSectionPath: path\n            }\n        })\n    }\n    handleDuplicatingSettingsChange(id: string, dupe: IDupeSettings) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            cloned.sections[id].setDuplicatingSettings(dupe);\n            return {\n                root: cloned\n            }\n        })\n    }\n    handleSectionNameChange(id: string, v: string) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            let item = cloned.sections[id];\n            item.name = v;\n            return {\n                root: cloned\n            }\n        })\n    }\n    handleMoveUp(id: string, path: number[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            let newPath = _.clone(path);\n            if (newPath[newPath.length - 1] > 0) {\n                newPath[newPath.length - 1] = newPath[newPath.length - 1] - 1;\n            }\n            cloned.moveItem(path, newPath);\n            return {\n                root: cloned\n            }\n        })\n    }\n    handleSectionConditionChange(sectionId: string, literals: ILiteral[]) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            cloned.sections[sectionId].appearingCondition.setLiterals(literals);\n            return {\n                root: cloned\n            }\n        });\n    }\n\n    handleSectionCustomIdChange(sectionId: string, v: string) {\n        this.setState((prevState: SurveyFormState) => {\n            let cloned = _.clone(prevState.root);\n            cloned.sections[sectionId].customId = v;\n\n            return {\n                root: cloned\n            }\n        });\n    }\n    render() {\n\n        return (\n            <Row>\n                <Toaster ref={r => r ? this.toasterRef = r : null}></Toaster>\n                <ConstantDefinitions isOpen={false}></ConstantDefinitions>\n                <Toolbar handleItemClick={this.handleToolbarItemClick.bind(this)}>\n                    <EditableText value={this.state.root.name} onChange={this.handleRootNameChange.bind(this)} />\n\n                </Toolbar>\n                <div className=\"container\">\n\n                    <div style={{ background: \"transparent\" }} className=\"sidebar\">\n                        <div className=\"sidebar-wrapper\">\n                            <FormTree\n                                expandedNodes={this.state.expandedNodes}\n                                selectedNodes={this.state.selectedNodes}\n                                handleNodeExpand={this.handleFormTreeNodeExpand.bind(this)}\n                                handleNodeCollapse={this.handleFormTreeNodeCollapse.bind(this)}\n                                handleNodeClick={this.handleFormTreeNodeClick.bind(this)}\n                                root_={this.state.root}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"content\">\n                        <SectionC\n                            handleSectionCustomIdChange={this.handleSectionCustomIdChange.bind(this)}\n                            handleSectionConditionChange={this.handleSectionConditionChange.bind(this)}\n                            handleMoveUp={this.handleMoveUp.bind(this)}\n                            constants={this.state.constants}\n                            handleSectionNameChange={this.handleSectionNameChange.bind(this)}\n                            definedQuestions={(this.state.root.questions)}\n                            handleSectionDuplicatingSettingsChange={this.handleDuplicatingSettingsChange.bind(this)}\n                            handleSectionClick={this.handleSectionChange.bind(this)}\n                            handleDeleteChildSectionOrQuestion={this.handleDeleteQuestionOrSection.bind(this)}\n                            parentPath={this.state.activeSectionPath}\n                            handleQuestionChange={this.handleQuestionUpdate.bind(this)}\n                            section={this.state.activeSection} />\n                    </div>\n                    <Row style={{\n                        position: \"fixed\",\n                        height: \"60px\",\n                        bottom: 0,\n                        width: \"100%\",\n                        margin: \"0 auto\"\n                    }} className=\"fixed-footer\">\n\n\n\n                    </Row>\n                </div>\n            </Row>\n\n        )\n    }\n}\n\n","import { request } from \"dpform\";\nimport React from \"react\";\nimport { Button, Container, FormGroup, Row } from \"reactstrap\";\nimport { CONFIG } from \"../APPCONFIG\";\ninterface LoginProps {\n    onLoggedIn: (token: string) => void\n}\ninterface LoginState {\n\n}\nexport class Login extends React.Component<LoginProps, LoginState>{\n    usernameRef?: HTMLInputElement | null;\n    passwordRef?: HTMLInputElement | null;\n    constructor(props: LoginProps) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    handleLogin() {\n        const username = this.usernameRef && this.usernameRef.value;\n        const password = this.passwordRef && this.passwordRef.value;\n        let requestBody = {\n            query: `\n            query Login($email: String!, $password: String!){\n                login(email: $email, password: $password){\n                  token\n                }\n              }`,\n            variables: {\n                email: username,\n                password: password\n            }\n        }\n        return request(CONFIG.PROD_SERVER, \"login\", requestBody, \"Could not login\", \"\").then(res => {\n            console.log(res);\n            if (this.props.onLoggedIn) this.props.onLoggedIn(res.token);\n        })\n    }\n    render() {\n        return (\n            <Container style={{alignContent: \"center\", margin: \"0 auto\"}}>\n                <Row>\n                    <FormGroup>\n                        <label> username </label>\n                        <input ref={r => this.usernameRef = r} type=\"text\" ></input>\n\n                    </FormGroup>\n                </Row>\n                <Row>\n\n                    <FormGroup>\n                        <label> password </label>\n                        <input ref={r => this.passwordRef = r} type=\"password\"></input>\n                    </FormGroup>\n                </Row>\n                <Row>\n\n                    <Button onClick={this.handleLogin.bind(this)}>Submit</Button>\n                </Row>\n            </Container >\n        )\n    }\n}","import { RootSection, QuestionSection, QAQuestion, AnswerOptions } from 'dpform';\nimport React from 'react';\nimport './App.css';\nimport { SurveyForm } from './components/SurveyForm';\nimport { Login } from './ui/login';\nimport { getRandomId } from './utils/getRandomId';\ndeclare global {\n  interface Window {\n\n  }\n}\n(window as any)['QuestionSection'] = QuestionSection;\n(window as any)['RootSection'] = RootSection;\n(window as any)['QAQuestion'] = QAQuestion;\n(window as any)['AnswerOptions'] = AnswerOptions;\n(window as any)['getRandomId'] = getRandomId;\n\nexport default class App extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isLoggedIn: false,\n      token: null,\n    }\n\n  }\n\n  handleChange(form: RootSection) {\n    this.setState({\n      form: form\n    })\n  }\n\n  render() {\n    return (\n      <div className={\"wrapper\"}>\n        {!this.state.isLoggedIn && <Login onLoggedIn={token => this.setState({ token: token, isLoggedIn: true })} />}\n        {this.state.isLoggedIn && <div className=\"main-panel\">\n          <div className=\"content\">\n            <SurveyForm token={this.state.token} root={new RootSection()} onChange={this.handleChange.bind(this)} />\n          </div>\n        </div>}\n      </div>\n    )\n  }\n}\n\n// function parseThings(divs) {\n//   const qs = []\n//   divs.forEach(div => {\n//     const q = new QAQuestion();\n//     q.id = getRandomId(\"q-\");\n//     const label = div.firstElementChild.innerText;\n//     q.questionContent.content = label;\n//     const secondChild = div.children[1];\n//     let type = { name: 'string' };\n//     const hasMultipleChoices = false;\n//     const mul = (Array.from(div.children)).filter(item => item.nodeName === \"INPUT\" && item.getAttribute(\"type\") === \"checkbox\");\n//     const labs = mul.map(item => {\n//       let id = item.getAttribute(\"id\");\n//       const text = document.querySelector(`label[for='${id}']`).innerText;\n//       return text;\n//     })\n//     console.log(mul)\n//     if (secondChild.nodeName === \"SELECT\") {\n//       type = { name: \"select\", ofType: { name: 'string' } }\n//       let op = new AnswerOptions();\n//       let arr = Array.from(secondChild.children).slice(1);\n//       let options = arr.forEach(item => {\n//         op.addOption({\n//           id: \"opt-\" + Object.keys(op.optionsMap).length,\n//           appearingCondition: undefined,\n//           groupName: undefined,\n//           type: type.ofType,\n//           value: item.innerText,\n//         })\n//       });\n//       q.setOptions(op);\n\n//     } else if (mul.length > 0) {\n//       type = { name: \"select\", ofType: { name: 'string' } }\n//       let op = new AnswerOptions();\n//       labs.forEach(item => {\n//         op.addOption({\n//           id: \"opt-\" + Object.keys(op.optionsMap).length,\n//           appearingCondition: undefined,\n//           groupName: undefined,\n//           type: type.ofType,\n//           value: item,\n//         })\n//       });\n//       q.setOptions(op);\n\n\n//     }\n//     q.setAnswerType(type);\n//     qs.push(q);\n//   })\n//   return qs;\n\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createBrowserHistory } from \"history\";\nimport { Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport {whyDidYouUpdate} from \"why-did-you-update\";\n\nconst hist = createBrowserHistory();\n\nwhyDidYouUpdate(React, { groupByComment: true, collapseComponentGroups: false });\n\nReactDOM.render(<Router history={hist}>\n  <Switch>\n    <Route path=\"/admin\" render={props => <App {...props} />} />\n    <Redirect from=\"/\" to=\"/admin/dashboard\" />\n  </Switch>\n</Router>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n","\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__export(require(\"./AnswerOptions\"));\n\n__export(require(\"./answer\"));\n\n__export(require(\"./answerTypes\"));\n\n__export(require(\"./condition\"));\n\n__export(require(\"./constants\"));\n\n__export(require(\"./duplicateSettings\"));\n\n__export(require(\"./question\"));\n\n__export(require(\"./questionSection\"));\n\n__export(require(\"./rootSection\"));\n\n__export(require(\"./util\"));\n\n__export(require(\"./valueType\"));","\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = __importDefault(require(\"lodash\"));\n\nvar QACondition =\n/** @class */\nfunction () {\n  function QACondition() {\n    this.literals = Array();\n  }\n\n  QACondition.fromJSON = function (data) {\n    if (!data) {\n      return new QACondition();\n    }\n\n    var c = new QACondition();\n    var literals = data.literals;\n    c.setLiterals(literals);\n    return c;\n  };\n\n  QACondition.toJSON = function (data) {\n    if (!data) {\n      return undefined;\n    }\n\n    return {\n      literals: JSON.parse(JSON.stringify(data.literals))\n    };\n  };\n\n  QACondition.checkIfValid = function (condition) {\n    if (!condition.literals) {\n      return false;\n    }\n\n    var isValid = true;\n    condition.literals.forEach(function (literal) {\n      var validity = Object.values(literal).every(function (x) {\n        return !lodash_1.default.isNil(x);\n      });\n\n      if (!validity) {\n        isValid = false;\n      }\n    });\n    console.log(isValid);\n    return isValid;\n  };\n\n  QACondition.Clone = function (condition) {\n    var newCondition = new QACondition();\n    return newCondition;\n  };\n\n  QACondition.prototype.setLiterals = function (newLiterals) {\n    this.literals = newLiterals;\n    return this;\n  };\n\n  QACondition.prototype.getClause = function () {\n    var _this = this;\n\n    var clause = '';\n    this.literals.forEach(function (literal, key) {\n      clause += \"l\" + key + (key === _this.literals.length - 1 ? literal.followingOperator : '');\n    });\n    return clause;\n  };\n\n  Object.defineProperty(QACondition.prototype, \"Literals\", {\n    get: function get() {\n      return this.literals;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  QACondition.prototype.addLiteral = function (literal) {\n    this.literals.push(literal);\n    console.log(this.literals);\n  };\n\n  QACondition.prototype.deleteLiteral = function (literalIndex) {\n    this.literals.splice(literalIndex, 1);\n    return this;\n  };\n\n  return QACondition;\n}();\n\nexports.QACondition = QACondition;\nvar QAFollowingOperator;\n\n(function (QAFollowingOperator) {\n  QAFollowingOperator[\"OR\"] = \"||\";\n  QAFollowingOperator[\"AND\"] = \"&\";\n})(QAFollowingOperator = exports.QAFollowingOperator || (exports.QAFollowingOperator = {}));","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction request(API_URL, queryName, requestBody, onErrorMessage, token) {\n  var headers = {\n    'Content-Type': 'application/json'\n  };\n\n  if (token) {\n    headers.Authorization = token;\n  }\n\n  return fetch(API_URL, {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: headers\n  }).then(function (res) {\n    if (res.status !== 200) {\n      throw new Error(onErrorMessage || 'Failed');\n    }\n\n    return res.json();\n  }).then(function (resData) {\n    if (resData.errors) {\n      throw resData.errors[0]; // throw the first error only\n    } else if (resData.data && resData.data[queryName]) {\n      return resData.data[queryName];\n    }\n  }).catch(function (err) {\n    throw err;\n  });\n}\n\nexports.request = request;\n\nfunction getReadablePath(nu) {\n  return nu.slice(1).map(function (item) {\n    return item + 1;\n  }).join('.');\n}\n\nexports.getReadablePath = getReadablePath;\n\nfunction getRandomId(startingText) {\n  if (!startingText) {\n    startingText = '';\n  }\n\n  var S4 = function S4() {\n    return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n  };\n\n  return startingText + (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());\n}\n\nexports.getRandomId = getRandomId;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction ofTypeToJSON(t) {\n  if (!t) {\n    return undefined;\n  }\n\n  return {\n    name: t.name,\n    ofType: ofTypeFromJSON(t.ofType)\n  };\n}\n\nexports.ofTypeToJSON = ofTypeToJSON;\n\nfunction answerTypeToJSON(t) {\n  return {\n    name: t.name,\n    ofType: ofTypeToJSON(t.ofType)\n  };\n}\n\nexports.answerTypeToJSON = answerTypeToJSON;\n\nfunction ofTypeFromJSON(a) {\n  if (!a) {\n    return undefined;\n  }\n\n  var r = {\n    name: a.name,\n    ofType: ofTypeFromJSON(a.ofType)\n  };\n  return r;\n}\n\nexports.ofTypeFromJSON = ofTypeFromJSON;\n\nfunction answerTypeFromJSON(a) {\n  var r = {\n    name: a.name,\n    ofType: ofTypeFromJSON(a.ofType)\n  };\n  return r;\n}\n\nexports.answerTypeFromJSON = answerTypeFromJSON;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar condition_1 = require(\"./condition\");\n\nfunction dupeSettingsToJSON(a) {\n  return {\n    isEnabled: a.isEnabled,\n    condition: condition_1.QACondition.toJSON(a.condition),\n    duplicateTimes: {\n      value: a.duplicateTimes.value,\n      type: a.duplicateTimes.type\n    }\n  };\n}\n\nexports.dupeSettingsToJSON = dupeSettingsToJSON;\n\nfunction dupeSettingsFromJSON(a) {\n  var r = {\n    isEnabled: a.isEnabled,\n    duplicateTimes: {\n      value: a.duplicateTimes.value,\n      type: a.duplicateTimes.type\n    },\n    condition: condition_1.QACondition.fromJSON(a.condition)\n  };\n  return r;\n}\n\nexports.dupeSettingsFromJSON = dupeSettingsFromJSON;"],"sourceRoot":""}